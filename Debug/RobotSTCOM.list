
RobotSTCOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800570c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001778  20000070  0800577c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200017e8  0800577c  000217e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d4f2  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000569e  00000000  00000000  0005d590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00012beb  00000000  00000000  00062c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001998  00000000  00000000  00075820  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000017e8  00000000  00000000  000771b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00009027  00000000  00000000  000789a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000173e2  00000000  00000000  000819c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00104e13  00000000  00000000  00098da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0019dbbc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004e3c  00000000  00000000  0019dc38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080053e4 	.word	0x080053e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080053e4 	.word	0x080053e4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b510      	push	{r4, lr}
 80005f2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_InitTick+0x40>)
 80005f6:	7818      	ldrb	r0, [r3, #0]
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <HAL_InitTick+0x44>)
 8000602:	6810      	ldr	r0, [r2, #0]
 8000604:	fbb0 f0f3 	udiv	r0, r0, r3
 8000608:	f000 f8a6 	bl	8000758 <HAL_SYSTICK_Config>
 800060c:	b968      	cbnz	r0, 800062a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060e:	2c0f      	cmp	r4, #15
 8000610:	d901      	bls.n	8000616 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000612:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000614:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000616:	2200      	movs	r2, #0
 8000618:	4621      	mov	r1, r4
 800061a:	f04f 30ff 	mov.w	r0, #4294967295
 800061e:	f000 f851 	bl	80006c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_InitTick+0x48>)
 8000624:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000626:	2000      	movs	r0, #0
 8000628:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800062a:	2001      	movs	r0, #1
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	20000000 	.word	0x20000000
 8000634:	20000008 	.word	0x20000008
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_Init>:
{
 800063c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f82e 	bl	80006a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffd3 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 800064a:	f003 f95f 	bl	800390c <HAL_MspInit>
}
 800064e:	2000      	movs	r0, #0
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x10>)
 8000656:	6811      	ldr	r1, [r2, #0]
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <HAL_IncTick+0x14>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	440b      	add	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000108 	.word	0x20000108
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <HAL_GetTick+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000108 	.word	0x20000108

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff6 	bl	800066c <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000686:	d002      	beq.n	800068e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_Delay+0x24>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068e:	f7ff ffed 	bl	800066c <HAL_GetTick>
 8000692:	1b40      	subs	r0, r0, r5
 8000694:	4284      	cmp	r4, r0
 8000696:	d8fa      	bhi.n	800068e <HAL_Delay+0x16>
  {
  }
}
 8000698:	bd38      	pop	{r3, r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000

080006a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80006a2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a8:	041b      	lsls	r3, r3, #16
 80006aa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ac:	0200      	lsls	r0, r0, #8
 80006ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80006b4:	4a02      	ldr	r2, [pc, #8]	; (80006c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006b6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80006b8:	60ca      	str	r2, [r1, #12]
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	05fa0000 	.word	0x05fa0000

080006c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_NVIC_SetPriority+0x54>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ce:	f1c3 0407 	rsb	r4, r3, #7
 80006d2:	2c04      	cmp	r4, #4
 80006d4:	bf28      	it	cs
 80006d6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	1d1d      	adds	r5, r3, #4
 80006da:	2d06      	cmp	r5, #6
 80006dc:	d913      	bls.n	8000706 <HAL_NVIC_SetPriority+0x42>
 80006de:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	2501      	movs	r5, #1
 80006e2:	fa05 f404 	lsl.w	r4, r5, r4
 80006e6:	3c01      	subs	r4, #1
 80006e8:	4021      	ands	r1, r4
 80006ea:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ec:	fa05 f303 	lsl.w	r3, r5, r3
 80006f0:	3b01      	subs	r3, #1
 80006f2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80006f6:	2800      	cmp	r0, #0
 80006f8:	db07      	blt.n	800070a <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	0109      	lsls	r1, r1, #4
 80006fc:	b2c9      	uxtb	r1, r1
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <HAL_NVIC_SetPriority+0x58>)
 8000700:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000702:	bc30      	pop	{r4, r5}
 8000704:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	2300      	movs	r3, #0
 8000708:	e7ea      	b.n	80006e0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	f000 000f 	and.w	r0, r0, #15
 800070e:	0109      	lsls	r1, r1, #4
 8000710:	b2c9      	uxtb	r1, r1
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <HAL_NVIC_SetPriority+0x5c>)
 8000714:	5419      	strb	r1, [r3, r0]
 8000716:	e7f4      	b.n	8000702 <HAL_NVIC_SetPriority+0x3e>
 8000718:	e000ed00 	.word	0xe000ed00
 800071c:	e000e400 	.word	0xe000e400
 8000720:	e000ed14 	.word	0xe000ed14

08000724 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000724:	0942      	lsrs	r2, r0, #5
 8000726:	f000 001f 	and.w	r0, r0, #31
 800072a:	2301      	movs	r3, #1
 800072c:	fa03 f000 	lsl.w	r0, r3, r0
 8000730:	4b01      	ldr	r3, [pc, #4]	; (8000738 <HAL_NVIC_EnableIRQ+0x14>)
 8000732:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100

0800073c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800073c:	0943      	lsrs	r3, r0, #5
 800073e:	f000 001f 	and.w	r0, r0, #31
 8000742:	2201      	movs	r2, #1
 8000744:	fa02 f000 	lsl.w	r0, r2, r0
 8000748:	3320      	adds	r3, #32
 800074a:	4a02      	ldr	r2, [pc, #8]	; (8000754 <HAL_NVIC_DisableIRQ+0x18>)
 800074c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100

08000758 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	3801      	subs	r0, #1
 800075a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075e:	d20a      	bcs.n	8000776 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_SYSTICK_Config+0x24>)
 8000762:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	21f0      	movs	r1, #240	; 0xf0
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_SYSTICK_Config+0x28>)
 8000768:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	2000      	movs	r0, #0
 800076e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000784:	2804      	cmp	r0, #4
 8000786:	d005      	beq.n	8000794 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000788:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800078a:	6813      	ldr	r3, [r2, #0]
 800078c:	f023 0304 	bic.w	r3, r3, #4
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000794:	4a02      	ldr	r2, [pc, #8]	; (80007a0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000796:	6813      	ldr	r3, [r2, #0]
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4770      	bx	lr
 80007a0:	e000e010 	.word	0xe000e010

080007a4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007a4:	4770      	bx	lr

080007a6 <HAL_SYSTICK_IRQHandler>:
{
 80007a6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007a8:	f7ff fffc 	bl	80007a4 <HAL_SYSTICK_Callback>
 80007ac:	bd08      	pop	{r3, pc}
	...

080007b0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d038      	beq.n	8000826 <HAL_CRC_Init+0x76>
{
 80007b4:	b510      	push	{r4, lr}
 80007b6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80007b8:	7f43      	ldrb	r3, [r0, #29]
 80007ba:	b31b      	cbz	r3, 8000804 <HAL_CRC_Init+0x54>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80007bc:	2302      	movs	r3, #2
 80007be:	7763      	strb	r3, [r4, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80007c0:	7923      	ldrb	r3, [r4, #4]
 80007c2:	bb1b      	cbnz	r3, 800080c <HAL_CRC_Init+0x5c>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	4a19      	ldr	r2, [pc, #100]	; (800082c <HAL_CRC_Init+0x7c>)
 80007c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80007ca:	6822      	ldr	r2, [r4, #0]
 80007cc:	6893      	ldr	r3, [r2, #8]
 80007ce:	f023 0318 	bic.w	r3, r3, #24
 80007d2:	6093      	str	r3, [r2, #8]
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80007d4:	7963      	ldrb	r3, [r4, #5]
 80007d6:	bb13      	cbnz	r3, 800081e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	f04f 32ff 	mov.w	r2, #4294967295
 80007de:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80007e0:	6822      	ldr	r2, [r4, #0]
 80007e2:	6893      	ldr	r3, [r2, #8]
 80007e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80007e8:	6961      	ldr	r1, [r4, #20]
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6093      	str	r3, [r2, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	6893      	ldr	r3, [r2, #8]
 80007f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007f6:	69a1      	ldr	r1, [r4, #24]
 80007f8:	430b      	orrs	r3, r1
 80007fa:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007fc:	2301      	movs	r3, #1
 80007fe:	7763      	strb	r3, [r4, #29]
  
  /* Return function status */
  return HAL_OK;
 8000800:	2000      	movs	r0, #0
 8000802:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000804:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8000806:	f002 fc8b 	bl	8003120 <HAL_CRC_MspInit>
 800080a:	e7d7      	b.n	80007bc <HAL_CRC_Init+0xc>
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800080c:	68e2      	ldr	r2, [r4, #12]
 800080e:	68a1      	ldr	r1, [r4, #8]
 8000810:	4620      	mov	r0, r4
 8000812:	f000 f80d 	bl	8000830 <HAL_CRCEx_Polynomial_Set>
 8000816:	2800      	cmp	r0, #0
 8000818:	d0dc      	beq.n	80007d4 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800081a:	2001      	movs	r0, #1
}
 800081c:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	6922      	ldr	r2, [r4, #16]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	e7dc      	b.n	80007e0 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8000826:	2001      	movs	r0, #1
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	04c11db7 	.word	0x04c11db7

08000830 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000830:	b410      	push	{r4}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000832:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8000834:	e000      	b.n	8000838 <HAL_CRCEx_Polynomial_Set+0x8>
 8000836:	4623      	mov	r3, r4
 8000838:	fa21 f403 	lsr.w	r4, r1, r3
 800083c:	f014 0f01 	tst.w	r4, #1
 8000840:	d103      	bne.n	800084a <HAL_CRCEx_Polynomial_Set+0x1a>
 8000842:	1e5c      	subs	r4, r3, #1
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f6      	bne.n	8000836 <HAL_CRCEx_Polynomial_Set+0x6>
 8000848:	4623      	mov	r3, r4
  {
  }

  switch (PolyLength)
 800084a:	2a10      	cmp	r2, #16
 800084c:	d013      	beq.n	8000876 <HAL_CRCEx_Polynomial_Set+0x46>
 800084e:	2a18      	cmp	r2, #24
 8000850:	d00d      	beq.n	800086e <HAL_CRCEx_Polynomial_Set+0x3e>
 8000852:	2a08      	cmp	r2, #8
 8000854:	d013      	beq.n	800087e <HAL_CRCEx_Polynomial_Set+0x4e>
  default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8000856:	6803      	ldr	r3, [r0, #0]
 8000858:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800085a:	6801      	ldr	r1, [r0, #0]
 800085c:	688b      	ldr	r3, [r1, #8]
 800085e:	f023 0318 	bic.w	r3, r3, #24
 8000862:	431a      	orrs	r2, r3
 8000864:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8000866:	2000      	movs	r0, #0
}
 8000868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800086c:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800086e:	2b06      	cmp	r3, #6
 8000870:	d9f1      	bls.n	8000856 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8000872:	2001      	movs	r0, #1
 8000874:	e7f8      	b.n	8000868 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8000876:	2b07      	cmp	r3, #7
 8000878:	d9ed      	bls.n	8000856 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 800087a:	2001      	movs	r0, #1
 800087c:	e7f4      	b.n	8000868 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 800087e:	2b0f      	cmp	r3, #15
 8000880:	d9e9      	bls.n	8000856 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8000882:	2001      	movs	r0, #1
 8000884:	e7f0      	b.n	8000868 <HAL_CRCEx_Polynomial_Set+0x38>
	...

08000888 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000888:	6802      	ldr	r2, [r0, #0]
 800088a:	b2d3      	uxtb	r3, r2
 800088c:	3b10      	subs	r3, #16
 800088e:	4909      	ldr	r1, [pc, #36]	; (80008b4 <DMA_CalcBaseAndBitshift+0x2c>)
 8000890:	fba1 1303 	umull	r1, r3, r1, r3
 8000894:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000896:	4908      	ldr	r1, [pc, #32]	; (80008b8 <DMA_CalcBaseAndBitshift+0x30>)
 8000898:	5cc9      	ldrb	r1, [r1, r3]
 800089a:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800089c:	2b03      	cmp	r3, #3
 800089e:	d804      	bhi.n	80008aa <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <DMA_CalcBaseAndBitshift+0x34>)
 80008a2:	4013      	ands	r3, r2
 80008a4:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80008a6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80008a8:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <DMA_CalcBaseAndBitshift+0x34>)
 80008ac:	4013      	ands	r3, r2
 80008ae:	3304      	adds	r3, #4
 80008b0:	6583      	str	r3, [r0, #88]	; 0x58
 80008b2:	e7f8      	b.n	80008a6 <DMA_CalcBaseAndBitshift+0x1e>
 80008b4:	aaaaaaab 	.word	0xaaaaaaab
 80008b8:	080053fc 	.word	0x080053fc
 80008bc:	fffffc00 	.word	0xfffffc00

080008c0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80008c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80008c2:	6982      	ldr	r2, [r0, #24]
 80008c4:	b992      	cbnz	r2, 80008ec <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d00a      	beq.n	80008e0 <DMA_CheckFifoParam+0x20>
 80008ca:	b11b      	cbz	r3, 80008d4 <DMA_CheckFifoParam+0x14>
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d001      	beq.n	80008d4 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80008d0:	2000      	movs	r0, #0
 80008d2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80008d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80008d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80008da:	d12c      	bne.n	8000936 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80008dc:	2000      	movs	r0, #0
 80008de:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80008e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80008e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80008e6:	d028      	beq.n	800093a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80008e8:	2000      	movs	r0, #0
 80008ea:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80008ec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80008f0:	d005      	beq.n	80008fe <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d929      	bls.n	800094a <DMA_CheckFifoParam+0x8a>
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d015      	beq.n	8000926 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80008fa:	2000      	movs	r0, #0
 80008fc:	4770      	bx	lr
    switch (tmp)
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d803      	bhi.n	800090a <DMA_CheckFifoParam+0x4a>
 8000902:	e8df f003 	tbb	[pc, r3]
 8000906:	041c      	.short	0x041c
 8000908:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800090a:	2000      	movs	r0, #0
 800090c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800090e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000910:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000914:	d115      	bne.n	8000942 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8000916:	2000      	movs	r0, #0
 8000918:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800091a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800091c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000920:	d011      	beq.n	8000946 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8000922:	2000      	movs	r0, #0
 8000924:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000926:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000928:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800092c:	d001      	beq.n	8000932 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800092e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000930:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8000932:	2000      	movs	r0, #0
 8000934:	4770      	bx	lr
        status = HAL_ERROR;
 8000936:	2001      	movs	r0, #1
 8000938:	4770      	bx	lr
        status = HAL_ERROR;
 800093a:	2001      	movs	r0, #1
 800093c:	4770      	bx	lr
      status = HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	4770      	bx	lr
        status = HAL_ERROR;
 8000942:	2001      	movs	r0, #1
 8000944:	4770      	bx	lr
        status = HAL_ERROR;
 8000946:	2001      	movs	r0, #1
 8000948:	4770      	bx	lr
      status = HAL_ERROR;
 800094a:	2001      	movs	r0, #1
 800094c:	4770      	bx	lr
	...

08000950 <HAL_DMA_Init>:
{
 8000950:	b570      	push	{r4, r5, r6, lr}
 8000952:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff fe8a 	bl	800066c <HAL_GetTick>
  if(hdma == NULL)
 8000958:	2c00      	cmp	r4, #0
 800095a:	d05d      	beq.n	8000a18 <HAL_DMA_Init+0xc8>
 800095c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800095e:	2300      	movs	r3, #0
 8000960:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000964:	2302      	movs	r3, #2
 8000966:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800096a:	6822      	ldr	r2, [r4, #0]
 800096c:	6813      	ldr	r3, [r2, #0]
 800096e:	f023 0301 	bic.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	f012 0f01 	tst.w	r2, #1
 800097c:	d00a      	beq.n	8000994 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800097e:	f7ff fe75 	bl	800066c <HAL_GetTick>
 8000982:	1b40      	subs	r0, r0, r5
 8000984:	2805      	cmp	r0, #5
 8000986:	d9f5      	bls.n	8000974 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000988:	2320      	movs	r3, #32
 800098a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800098c:	2003      	movs	r0, #3
 800098e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8000992:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000994:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000996:	4921      	ldr	r1, [pc, #132]	; (8000a1c <HAL_DMA_Init+0xcc>)
 8000998:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800099a:	6862      	ldr	r2, [r4, #4]
 800099c:	68a0      	ldr	r0, [r4, #8]
 800099e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009a0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009a2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009a4:	6920      	ldr	r0, [r4, #16]
 80009a6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009a8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009aa:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ac:	69a0      	ldr	r0, [r4, #24]
 80009ae:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80009b0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80009b4:	6a20      	ldr	r0, [r4, #32]
 80009b6:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009b8:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80009bc:	2904      	cmp	r1, #4
 80009be:	d016      	beq.n	80009ee <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 80009c0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80009c2:	6826      	ldr	r6, [r4, #0]
 80009c4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009c6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80009ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009cc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d012      	beq.n	80009f8 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 80009d2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009d4:	4620      	mov	r0, r4
 80009d6:	f7ff ff57 	bl	8000888 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009dc:	233f      	movs	r3, #63	; 0x3f
 80009de:	4093      	lsls	r3, r2
 80009e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009e2:	2000      	movs	r0, #0
 80009e4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80009e6:	2301      	movs	r3, #1
 80009e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80009ec:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80009ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80009f2:	4301      	orrs	r1, r0
 80009f4:	430a      	orrs	r2, r1
 80009f6:	e7e3      	b.n	80009c0 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 80009f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009fa:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0e7      	beq.n	80009d2 <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000a02:	4620      	mov	r0, r4
 8000a04:	f7ff ff5c 	bl	80008c0 <DMA_CheckFifoParam>
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d0e2      	beq.n	80009d2 <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000a10:	2001      	movs	r0, #1
 8000a12:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000a18:	2001      	movs	r0, #1
}
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	e010803f 	.word	0xe010803f

08000a20 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d02e      	beq.n	8000a82 <HAL_DMA_DeInit+0x62>
{
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8000a28:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d101      	bne.n	8000a36 <HAL_DMA_DeInit+0x16>
    return HAL_BUSY;
 8000a32:	2002      	movs	r0, #2
}
 8000a34:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_DMA_DISABLE(hdma);
 8000a36:	6802      	ldr	r2, [r0, #0]
 8000a38:	6813      	ldr	r3, [r2, #0]
 8000a3a:	f023 0301 	bic.w	r3, r3, #1
 8000a3e:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8000a40:	6803      	ldr	r3, [r0, #0]
 8000a42:	2500      	movs	r5, #0
 8000a44:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8000a46:	6803      	ldr	r3, [r0, #0]
 8000a48:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8000a4a:	6803      	ldr	r3, [r0, #0]
 8000a4c:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8000a4e:	6803      	ldr	r3, [r0, #0]
 8000a50:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8000a52:	6803      	ldr	r3, [r0, #0]
 8000a54:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8000a56:	6803      	ldr	r3, [r0, #0]
 8000a58:	2221      	movs	r2, #33	; 0x21
 8000a5a:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a5c:	f7ff ff14 	bl	8000888 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a60:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a62:	233f      	movs	r3, #63	; 0x3f
 8000a64:	4093      	lsls	r3, r2
 8000a66:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 8000a68:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8000a6a:	6425      	str	r5, [r4, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8000a6c:	6465      	str	r5, [r4, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8000a6e:	64a5      	str	r5, [r4, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8000a70:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8000a72:	6525      	str	r5, [r4, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a74:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8000a76:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8000a7a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 8000a7e:	4628      	mov	r0, r5
 8000a80:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a82:	2001      	movs	r0, #1
 8000a84:	4770      	bx	lr

08000a86 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a86:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d003      	beq.n	8000a98 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a94:	2001      	movs	r0, #1
 8000a96:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000a9e:	6802      	ldr	r2, [r0, #0]
 8000aa0:	6813      	ldr	r3, [r2, #0]
 8000aa2:	f023 0301 	bic.w	r3, r3, #1
 8000aa6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000aa8:	2000      	movs	r0, #0
}
 8000aaa:	4770      	bx	lr

08000aac <HAL_DMA_IRQHandler>:
{
 8000aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8000ab6:	4b72      	ldr	r3, [pc, #456]	; (8000c80 <HAL_DMA_IRQHandler+0x1d4>)
 8000ab8:	681d      	ldr	r5, [r3, #0]
 8000aba:	4b72      	ldr	r3, [pc, #456]	; (8000c84 <HAL_DMA_IRQHandler+0x1d8>)
 8000abc:	fba3 3505 	umull	r3, r5, r3, r5
 8000ac0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ac2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000ac4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000ac8:	2308      	movs	r3, #8
 8000aca:	4093      	lsls	r3, r2
 8000acc:	421e      	tst	r6, r3
 8000ace:	d010      	beq.n	8000af2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ad0:	6803      	ldr	r3, [r0, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	f012 0f04 	tst.w	r2, #4
 8000ad8:	d00b      	beq.n	8000af2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	f022 0204 	bic.w	r2, r2, #4
 8000ae0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ae2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	4093      	lsls	r3, r2
 8000ae8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000aea:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000af2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000af4:	2301      	movs	r3, #1
 8000af6:	4093      	lsls	r3, r2
 8000af8:	421e      	tst	r6, r3
 8000afa:	d009      	beq.n	8000b10 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000afc:	6822      	ldr	r2, [r4, #0]
 8000afe:	6952      	ldr	r2, [r2, #20]
 8000b00:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000b04:	d004      	beq.n	8000b10 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b06:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b12:	2304      	movs	r3, #4
 8000b14:	4093      	lsls	r3, r2
 8000b16:	421e      	tst	r6, r3
 8000b18:	d009      	beq.n	8000b2e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b1a:	6822      	ldr	r2, [r4, #0]
 8000b1c:	6812      	ldr	r2, [r2, #0]
 8000b1e:	f012 0f02 	tst.w	r2, #2
 8000b22:	d004      	beq.n	8000b2e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b24:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b30:	2310      	movs	r3, #16
 8000b32:	4093      	lsls	r3, r2
 8000b34:	421e      	tst	r6, r3
 8000b36:	d024      	beq.n	8000b82 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b38:	6822      	ldr	r2, [r4, #0]
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	f012 0f08 	tst.w	r2, #8
 8000b40:	d01f      	beq.n	8000b82 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b42:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000b4c:	d00d      	beq.n	8000b6a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000b54:	d104      	bne.n	8000b60 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b58:	b19b      	cbz	r3, 8000b82 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	4798      	blx	r3
 8000b5e:	e010      	b.n	8000b82 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b62:	b173      	cbz	r3, 8000b82 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000b64:	4620      	mov	r0, r4
 8000b66:	4798      	blx	r3
 8000b68:	e00b      	b.n	8000b82 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000b70:	d103      	bne.n	8000b7a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	f022 0208 	bic.w	r2, r2, #8
 8000b78:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b7c:	b10b      	cbz	r3, 8000b82 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000b7e:	4620      	mov	r0, r4
 8000b80:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b82:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b84:	2320      	movs	r3, #32
 8000b86:	4093      	lsls	r3, r2
 8000b88:	421e      	tst	r6, r3
 8000b8a:	d055      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b8c:	6822      	ldr	r2, [r4, #0]
 8000b8e:	6812      	ldr	r2, [r2, #0]
 8000b90:	f012 0f10 	tst.w	r2, #16
 8000b94:	d050      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b96:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b98:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	d00e      	beq.n	8000bc0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000baa:	d033      	beq.n	8000c14 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000bb2:	d12a      	bne.n	8000c0a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000bb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d03e      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000bba:	4620      	mov	r0, r4
 8000bbc:	4798      	blx	r3
 8000bbe:	e03b      	b.n	8000c38 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bc0:	6822      	ldr	r2, [r4, #0]
 8000bc2:	6813      	ldr	r3, [r2, #0]
 8000bc4:	f023 0316 	bic.w	r3, r3, #22
 8000bc8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bca:	6822      	ldr	r2, [r4, #0]
 8000bcc:	6953      	ldr	r3, [r2, #20]
 8000bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bd2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd6:	b1a3      	cbz	r3, 8000c02 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	6813      	ldr	r3, [r2, #0]
 8000bdc:	f023 0308 	bic.w	r3, r3, #8
 8000be0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000be2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000be4:	233f      	movs	r3, #63	; 0x3f
 8000be6:	4093      	lsls	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000bea:	2300      	movs	r3, #0
 8000bec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000bf6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d03f      	beq.n	8000c7c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	4798      	blx	r3
 8000c00:	e03c      	b.n	8000c7c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1e7      	bne.n	8000bd8 <HAL_DMA_IRQHandler+0x12c>
 8000c08:	e7eb      	b.n	8000be2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000c0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c0c:	b1a3      	cbz	r3, 8000c38 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000c0e:	4620      	mov	r0, r4
 8000c10:	4798      	blx	r3
 8000c12:	e011      	b.n	8000c38 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000c1a:	d109      	bne.n	8000c30 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	f022 0210 	bic.w	r2, r2, #16
 8000c22:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000c24:	2300      	movs	r3, #0
 8000c26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c32:	b10b      	cbz	r3, 8000c38 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000c34:	4620      	mov	r0, r4
 8000c36:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c3a:	b1fb      	cbz	r3, 8000c7c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c3e:	f013 0f01 	tst.w	r3, #1
 8000c42:	d017      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c44:	2305      	movs	r3, #5
 8000c46:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	6813      	ldr	r3, [r2, #0]
 8000c4e:	f023 0301 	bic.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000c54:	9b01      	ldr	r3, [sp, #4]
 8000c56:	3301      	adds	r3, #1
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	429d      	cmp	r5, r3
 8000c5c:	d304      	bcc.n	8000c68 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f013 0f01 	tst.w	r3, #1
 8000c66:	d1f5      	bne.n	8000c54 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000c74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c76:	b10b      	cbz	r3, 8000c7c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4798      	blx	r3
}
 8000c7c:	b003      	add	sp, #12
 8000c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c80:	20000008 	.word	0x20000008
 8000c84:	1b4e81b5 	.word	0x1b4e81b5

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	e037      	b.n	8000d00 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c90:	2609      	movs	r6, #9
 8000c92:	e000      	b.n	8000c96 <HAL_GPIO_Init+0xe>
 8000c94:	2600      	movs	r6, #0
 8000c96:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c9a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	4e6c      	ldr	r6, [pc, #432]	; (8000e50 <HAL_GPIO_Init+0x1c8>)
 8000ca0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca4:	4b6b      	ldr	r3, [pc, #428]	; (8000e54 <HAL_GPIO_Init+0x1cc>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ca8:	43eb      	mvns	r3, r5
 8000caa:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cae:	684f      	ldr	r7, [r1, #4]
 8000cb0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000cb4:	d001      	beq.n	8000cba <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8000cb6:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000cba:	4a66      	ldr	r2, [pc, #408]	; (8000e54 <HAL_GPIO_Init+0x1cc>)
 8000cbc:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000cbe:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc4:	684f      	ldr	r7, [r1, #4]
 8000cc6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000cca:	d001      	beq.n	8000cd0 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8000ccc:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000cd0:	4a60      	ldr	r2, [pc, #384]	; (8000e54 <HAL_GPIO_Init+0x1cc>)
 8000cd2:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd4:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cd6:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cda:	684f      	ldr	r7, [r1, #4]
 8000cdc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000ce0:	d001      	beq.n	8000ce6 <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 8000ce2:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000ce6:	4a5b      	ldr	r2, [pc, #364]	; (8000e54 <HAL_GPIO_Init+0x1cc>)
 8000ce8:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000cea:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cec:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cee:	684e      	ldr	r6, [r1, #4]
 8000cf0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000cf4:	d001      	beq.n	8000cfa <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8000cf6:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000cfa:	4a56      	ldr	r2, [pc, #344]	; (8000e54 <HAL_GPIO_Init+0x1cc>)
 8000cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cfe:	3401      	adds	r4, #1
 8000d00:	2c0f      	cmp	r4, #15
 8000d02:	f200 80a3 	bhi.w	8000e4c <HAL_GPIO_Init+0x1c4>
    ioposition = ((uint32_t)0x01) << position;
 8000d06:	2301      	movs	r3, #1
 8000d08:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0a:	680a      	ldr	r2, [r1, #0]
 8000d0c:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d1f4      	bne.n	8000cfe <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	684a      	ldr	r2, [r1, #4]
 8000d16:	2a12      	cmp	r2, #18
 8000d18:	bf18      	it	ne
 8000d1a:	2a02      	cmpne	r2, #2
 8000d1c:	d112      	bne.n	8000d44 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000d1e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000d22:	f10e 0e08 	add.w	lr, lr, #8
 8000d26:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d2a:	f004 0607 	and.w	r6, r4, #7
 8000d2e:	00b6      	lsls	r6, r6, #2
 8000d30:	270f      	movs	r7, #15
 8000d32:	40b7      	lsls	r7, r6
 8000d34:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d38:	690f      	ldr	r7, [r1, #16]
 8000d3a:	fa07 f606 	lsl.w	r6, r7, r6
 8000d3e:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 8000d40:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 8000d44:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d46:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d50:	43d2      	mvns	r2, r2
 8000d52:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d54:	684f      	ldr	r7, [r1, #4]
 8000d56:	f007 0703 	and.w	r7, r7, #3
 8000d5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000d60:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d62:	684e      	ldr	r6, [r1, #4]
 8000d64:	1e77      	subs	r7, r6, #1
 8000d66:	2e11      	cmp	r6, #17
 8000d68:	bf18      	it	ne
 8000d6a:	2f01      	cmpne	r7, #1
 8000d6c:	d901      	bls.n	8000d72 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6e:	2e12      	cmp	r6, #18
 8000d70:	d10f      	bne.n	8000d92 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 8000d72:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d74:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d76:	68cf      	ldr	r7, [r1, #12]
 8000d78:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d7c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000d7e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d80:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d82:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d86:	684e      	ldr	r6, [r1, #4]
 8000d88:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000d8c:	40a6      	lsls	r6, r4
 8000d8e:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000d90:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d92:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d94:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d96:	688b      	ldr	r3, [r1, #8]
 8000d98:	fa03 f30e 	lsl.w	r3, r3, lr
 8000d9c:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000d9e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da0:	684b      	ldr	r3, [r1, #4]
 8000da2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000da6:	d0aa      	beq.n	8000cfe <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <HAL_GPIO_Init+0x1d0>)
 8000daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44
 8000db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000dbc:	08a3      	lsrs	r3, r4, #2
 8000dbe:	1c9e      	adds	r6, r3, #2
 8000dc0:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <HAL_GPIO_Init+0x1c8>)
 8000dc2:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dc6:	f004 0603 	and.w	r6, r4, #3
 8000dca:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000dce:	260f      	movs	r6, #15
 8000dd0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000dd4:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dd8:	4f20      	ldr	r7, [pc, #128]	; (8000e5c <HAL_GPIO_Init+0x1d4>)
 8000dda:	42b8      	cmp	r0, r7
 8000ddc:	f43f af5a 	beq.w	8000c94 <HAL_GPIO_Init+0xc>
 8000de0:	4e1f      	ldr	r6, [pc, #124]	; (8000e60 <HAL_GPIO_Init+0x1d8>)
 8000de2:	42b0      	cmp	r0, r6
 8000de4:	d022      	beq.n	8000e2c <HAL_GPIO_Init+0x1a4>
 8000de6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dea:	42b0      	cmp	r0, r6
 8000dec:	d020      	beq.n	8000e30 <HAL_GPIO_Init+0x1a8>
 8000dee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000df2:	42b0      	cmp	r0, r6
 8000df4:	d01e      	beq.n	8000e34 <HAL_GPIO_Init+0x1ac>
 8000df6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dfa:	42b0      	cmp	r0, r6
 8000dfc:	d01c      	beq.n	8000e38 <HAL_GPIO_Init+0x1b0>
 8000dfe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e02:	42b0      	cmp	r0, r6
 8000e04:	d01a      	beq.n	8000e3c <HAL_GPIO_Init+0x1b4>
 8000e06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e0a:	42b0      	cmp	r0, r6
 8000e0c:	d018      	beq.n	8000e40 <HAL_GPIO_Init+0x1b8>
 8000e0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e12:	42b0      	cmp	r0, r6
 8000e14:	d016      	beq.n	8000e44 <HAL_GPIO_Init+0x1bc>
 8000e16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e1a:	42b0      	cmp	r0, r6
 8000e1c:	d014      	beq.n	8000e48 <HAL_GPIO_Init+0x1c0>
 8000e1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e22:	42b0      	cmp	r0, r6
 8000e24:	f43f af34 	beq.w	8000c90 <HAL_GPIO_Init+0x8>
 8000e28:	260a      	movs	r6, #10
 8000e2a:	e734      	b.n	8000c96 <HAL_GPIO_Init+0xe>
 8000e2c:	2601      	movs	r6, #1
 8000e2e:	e732      	b.n	8000c96 <HAL_GPIO_Init+0xe>
 8000e30:	2602      	movs	r6, #2
 8000e32:	e730      	b.n	8000c96 <HAL_GPIO_Init+0xe>
 8000e34:	2603      	movs	r6, #3
 8000e36:	e72e      	b.n	8000c96 <HAL_GPIO_Init+0xe>
 8000e38:	2604      	movs	r6, #4
 8000e3a:	e72c      	b.n	8000c96 <HAL_GPIO_Init+0xe>
 8000e3c:	2605      	movs	r6, #5
 8000e3e:	e72a      	b.n	8000c96 <HAL_GPIO_Init+0xe>
 8000e40:	2606      	movs	r6, #6
 8000e42:	e728      	b.n	8000c96 <HAL_GPIO_Init+0xe>
 8000e44:	2607      	movs	r6, #7
 8000e46:	e726      	b.n	8000c96 <HAL_GPIO_Init+0xe>
 8000e48:	2608      	movs	r6, #8
 8000e4a:	e724      	b.n	8000c96 <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8000e4c:	b003      	add	sp, #12
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40013c00 	.word	0x40013c00
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	2b0f      	cmp	r3, #15
 8000e68:	f200 8092 	bhi.w	8000f90 <HAL_GPIO_DeInit+0x12c>
{
 8000e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6e:	e00a      	b.n	8000e86 <HAL_GPIO_DeInit+0x22>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e70:	2609      	movs	r6, #9
 8000e72:	e000      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
 8000e74:	2600      	movs	r6, #0
 8000e76:	fa06 f202 	lsl.w	r2, r6, r2
 8000e7a:	4294      	cmp	r4, r2
 8000e7c:	d06f      	beq.n	8000f5e <HAL_GPIO_DeInit+0xfa>
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e7e:	3301      	adds	r3, #1
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	f200 8084 	bhi.w	8000f8e <HAL_GPIO_DeInit+0x12a>
    ioposition = ((uint32_t)0x01) << position;
 8000e86:	2201      	movs	r2, #1
 8000e88:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8000e8a:	ea02 0501 	and.w	r5, r2, r1
    if(iocurrent == ioposition)
 8000e8e:	42aa      	cmp	r2, r5
 8000e90:	d1f5      	bne.n	8000e7e <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e92:	6806      	ldr	r6, [r0, #0]
 8000e94:	005f      	lsls	r7, r3, #1
 8000e96:	2403      	movs	r4, #3
 8000e98:	40bc      	lsls	r4, r7
 8000e9a:	43e4      	mvns	r4, r4
 8000e9c:	4026      	ands	r6, r4
 8000e9e:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ea0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000ea4:	f10e 0e08 	add.w	lr, lr, #8
 8000ea8:	f850 c02e 	ldr.w	ip, [r0, lr, lsl #2]
 8000eac:	f003 0607 	and.w	r6, r3, #7
 8000eb0:	00b6      	lsls	r6, r6, #2
 8000eb2:	270f      	movs	r7, #15
 8000eb4:	fa07 f606 	lsl.w	r6, r7, r6
 8000eb8:	ea2c 0606 	bic.w	r6, ip, r6
 8000ebc:	f840 602e 	str.w	r6, [r0, lr, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ec0:	6886      	ldr	r6, [r0, #8]
 8000ec2:	4026      	ands	r6, r4
 8000ec4:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec6:	6846      	ldr	r6, [r0, #4]
 8000ec8:	ea26 0202 	bic.w	r2, r6, r2
 8000ecc:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ece:	68c2      	ldr	r2, [r0, #12]
 8000ed0:	4014      	ands	r4, r2
 8000ed2:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8000ed4:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8000ed8:	f10e 0402 	add.w	r4, lr, #2
 8000edc:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <HAL_GPIO_DeInit+0x130>)
 8000ede:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ee2:	f003 0203 	and.w	r2, r3, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4097      	lsls	r7, r2
 8000eea:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000eec:	4e2a      	ldr	r6, [pc, #168]	; (8000f98 <HAL_GPIO_DeInit+0x134>)
 8000eee:	42b0      	cmp	r0, r6
 8000ef0:	d0c0      	beq.n	8000e74 <HAL_GPIO_DeInit+0x10>
 8000ef2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ef6:	42b0      	cmp	r0, r6
 8000ef8:	d021      	beq.n	8000f3e <HAL_GPIO_DeInit+0xda>
 8000efa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000efe:	42b0      	cmp	r0, r6
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_DeInit+0xde>
 8000f02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f06:	42b0      	cmp	r0, r6
 8000f08:	d01d      	beq.n	8000f46 <HAL_GPIO_DeInit+0xe2>
 8000f0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f0e:	42b0      	cmp	r0, r6
 8000f10:	d01b      	beq.n	8000f4a <HAL_GPIO_DeInit+0xe6>
 8000f12:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f16:	42b0      	cmp	r0, r6
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_DeInit+0xea>
 8000f1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f1e:	42b0      	cmp	r0, r6
 8000f20:	d017      	beq.n	8000f52 <HAL_GPIO_DeInit+0xee>
 8000f22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f26:	42b0      	cmp	r0, r6
 8000f28:	d015      	beq.n	8000f56 <HAL_GPIO_DeInit+0xf2>
 8000f2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f2e:	42b0      	cmp	r0, r6
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_DeInit+0xf6>
 8000f32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f36:	42b0      	cmp	r0, r6
 8000f38:	d09a      	beq.n	8000e70 <HAL_GPIO_DeInit+0xc>
 8000f3a:	260a      	movs	r6, #10
 8000f3c:	e79b      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
 8000f3e:	2601      	movs	r6, #1
 8000f40:	e799      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
 8000f42:	2602      	movs	r6, #2
 8000f44:	e797      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
 8000f46:	2603      	movs	r6, #3
 8000f48:	e795      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
 8000f4a:	2604      	movs	r6, #4
 8000f4c:	e793      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
 8000f4e:	2605      	movs	r6, #5
 8000f50:	e791      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
 8000f52:	2606      	movs	r6, #6
 8000f54:	e78f      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
 8000f56:	2607      	movs	r6, #7
 8000f58:	e78d      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
 8000f5a:	2608      	movs	r6, #8
 8000f5c:	e78b      	b.n	8000e76 <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000f5e:	4e0d      	ldr	r6, [pc, #52]	; (8000f94 <HAL_GPIO_DeInit+0x130>)
 8000f60:	f10e 0202 	add.w	r2, lr, #2
 8000f64:	f856 4022 	ldr.w	r4, [r6, r2, lsl #2]
 8000f68:	ea24 0707 	bic.w	r7, r4, r7
 8000f6c:	f846 7022 	str.w	r7, [r6, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000f70:	4c0a      	ldr	r4, [pc, #40]	; (8000f9c <HAL_GPIO_DeInit+0x138>)
 8000f72:	6826      	ldr	r6, [r4, #0]
 8000f74:	43ea      	mvns	r2, r5
 8000f76:	4016      	ands	r6, r2
 8000f78:	6026      	str	r6, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000f7a:	6865      	ldr	r5, [r4, #4]
 8000f7c:	4015      	ands	r5, r2
 8000f7e:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000f80:	68a5      	ldr	r5, [r4, #8]
 8000f82:	4015      	ands	r5, r2
 8000f84:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000f86:	68e5      	ldr	r5, [r4, #12]
 8000f88:	402a      	ands	r2, r5
 8000f8a:	60e2      	str	r2, [r4, #12]
 8000f8c:	e777      	b.n	8000e7e <HAL_GPIO_DeInit+0x1a>
	  }
    }
  }
}
 8000f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40013c00 	.word	0x40013c00

08000fa0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	b912      	cbnz	r2, 8000fa8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	6181      	str	r1, [r0, #24]
 8000fa6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000fa8:	6181      	str	r1, [r0, #24]
 8000faa:	4770      	bx	lr

08000fac <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d057      	beq.n	8001060 <HAL_I2C_Init+0xb4>
{
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fb4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d041      	beq.n	8001040 <HAL_I2C_Init+0x94>

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fbc:	2324      	movs	r3, #36	; 0x24
 8000fbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fc2:	6822      	ldr	r2, [r4, #0]
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	6863      	ldr	r3, [r4, #4]
 8000fd0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000fd4:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	6893      	ldr	r3, [r2, #8]
 8000fda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fde:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fe0:	68e3      	ldr	r3, [r4, #12]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d031      	beq.n	800104a <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fe6:	6822      	ldr	r2, [r4, #0]
 8000fe8:	68a3      	ldr	r3, [r4, #8]
 8000fea:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8000fee:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ff0:	68e3      	ldr	r3, [r4, #12]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d02f      	beq.n	8001056 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ff6:	6822      	ldr	r2, [r4, #0]
 8000ff8:	6851      	ldr	r1, [r2, #4]
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_I2C_Init+0xb8>)
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001000:	6822      	ldr	r2, [r4, #0]
 8001002:	68d3      	ldr	r3, [r2, #12]
 8001004:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001008:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800100a:	6822      	ldr	r2, [r4, #0]
 800100c:	6923      	ldr	r3, [r4, #16]
 800100e:	6961      	ldr	r1, [r4, #20]
 8001010:	430b      	orrs	r3, r1
 8001012:	69a1      	ldr	r1, [r4, #24]
 8001014:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001018:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800101a:	6822      	ldr	r2, [r4, #0]
 800101c:	69e3      	ldr	r3, [r4, #28]
 800101e:	6a21      	ldr	r1, [r4, #32]
 8001020:	430b      	orrs	r3, r1
 8001022:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001024:	6822      	ldr	r2, [r4, #0]
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800102e:	2000      	movs	r0, #0
 8001030:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001032:	2320      	movs	r3, #32
 8001034:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001038:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800103a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 800103e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001040:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001044:	f002 fa04 	bl	8003450 <HAL_I2C_MspInit>
 8001048:	e7b8      	b.n	8000fbc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800104a:	6822      	ldr	r2, [r4, #0]
 800104c:	68a3      	ldr	r3, [r4, #8]
 800104e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001052:	6093      	str	r3, [r2, #8]
 8001054:	e7cc      	b.n	8000ff0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	e7ca      	b.n	8000ff6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001060:	2001      	movs	r0, #1
 8001062:	4770      	bx	lr
 8001064:	02008000 	.word	0x02008000

08001068 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001068:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b20      	cmp	r3, #32
 8001070:	d001      	beq.n	8001076 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001072:	2002      	movs	r0, #2
 8001074:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001076:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800107a:	2b01      	cmp	r3, #1
 800107c:	d020      	beq.n	80010c0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800107e:	2301      	movs	r3, #1
 8001080:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001084:	2324      	movs	r3, #36	; 0x24
 8001086:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800108a:	6802      	ldr	r2, [r0, #0]
 800108c:	6813      	ldr	r3, [r2, #0]
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001094:	6802      	ldr	r2, [r0, #0]
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800109c:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800109e:	6802      	ldr	r2, [r0, #0]
 80010a0:	6813      	ldr	r3, [r2, #0]
 80010a2:	4319      	orrs	r1, r3
 80010a4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80010a6:	6802      	ldr	r2, [r0, #0]
 80010a8:	6813      	ldr	r3, [r2, #0]
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80010b0:	2320      	movs	r3, #32
 80010b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80010b6:	2300      	movs	r3, #0
 80010b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80010bc:	4618      	mov	r0, r3
 80010be:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80010c0:	2002      	movs	r0, #2
  }
}
 80010c2:	4770      	bx	lr

080010c4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b20      	cmp	r3, #32
 80010cc:	d001      	beq.n	80010d2 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80010ce:	2002      	movs	r0, #2
 80010d0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80010d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d01e      	beq.n	8001118 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80010da:	2301      	movs	r3, #1
 80010dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80010e0:	2324      	movs	r3, #36	; 0x24
 80010e2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80010e6:	6802      	ldr	r2, [r0, #0]
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80010f0:	6802      	ldr	r2, [r0, #0]
 80010f2:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80010f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80010f8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80010fc:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80010fe:	6802      	ldr	r2, [r0, #0]
 8001100:	6813      	ldr	r3, [r2, #0]
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001108:	2320      	movs	r3, #32
 800110a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800110e:	2300      	movs	r3, #0
 8001110:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001114:	4618      	mov	r0, r3
 8001116:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001118:	2002      	movs	r0, #2
  }
}
 800111a:	4770      	bx	lr

0800111c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800111c:	b510      	push	{r4, lr}
 800111e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_PWREx_EnableOverDrive+0x74>)
 8001122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001124:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_PWREx_EnableOverDrive+0x78>)
 8001136:	6813      	ldr	r3, [r2, #0]
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113e:	f7ff fa95 	bl	800066c <HAL_GetTick>
 8001142:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_PWREx_EnableOverDrive+0x78>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800114c:	d108      	bne.n	8001160 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800114e:	f7ff fa8d 	bl	800066c <HAL_GetTick>
 8001152:	1b00      	subs	r0, r0, r4
 8001154:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001158:	d9f4      	bls.n	8001144 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800115a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800115c:	b002      	add	sp, #8
 800115e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001160:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <HAL_PWREx_EnableOverDrive+0x78>)
 8001162:	6813      	ldr	r3, [r2, #0]
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800116a:	f7ff fa7f 	bl	800066c <HAL_GetTick>
 800116e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_PWREx_EnableOverDrive+0x78>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001178:	d107      	bne.n	800118a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800117a:	f7ff fa77 	bl	800066c <HAL_GetTick>
 800117e:	1b00      	subs	r0, r0, r4
 8001180:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001184:	d9f4      	bls.n	8001170 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001186:	2003      	movs	r0, #3
 8001188:	e7e8      	b.n	800115c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800118a:	2000      	movs	r0, #0
 800118c:	e7e6      	b.n	800115c <HAL_PWREx_EnableOverDrive+0x40>
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001198:	2800      	cmp	r0, #0
 800119a:	f000 81dc 	beq.w	8001556 <HAL_RCC_OscConfig+0x3be>
{
 800119e:	b570      	push	{r4, r5, r6, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a4:	6803      	ldr	r3, [r0, #0]
 80011a6:	f013 0f01 	tst.w	r3, #1
 80011aa:	d03a      	beq.n	8001222 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ac:	4ba2      	ldr	r3, [pc, #648]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d02b      	beq.n	8001210 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b8:	4b9f      	ldr	r3, [pc, #636]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d020      	beq.n	8001206 <HAL_RCC_OscConfig+0x6e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c4:	6863      	ldr	r3, [r4, #4]
 80011c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ca:	d050      	beq.n	800126e <HAL_RCC_OscConfig+0xd6>
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d154      	bne.n	800127a <HAL_RCC_OscConfig+0xe2>
 80011d0:	4b99      	ldr	r3, [pc, #612]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e2:	6863      	ldr	r3, [r4, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d05f      	beq.n	80012a8 <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fa40 	bl	800066c <HAL_GetTick>
 80011ec:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	4b92      	ldr	r3, [pc, #584]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011f6:	d114      	bne.n	8001222 <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fa38 	bl	800066c <HAL_GetTick>
 80011fc:	1b40      	subs	r0, r0, r5
 80011fe:	2864      	cmp	r0, #100	; 0x64
 8001200:	d9f5      	bls.n	80011ee <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 8001202:	2003      	movs	r0, #3
 8001204:	e1ac      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800120e:	d0d9      	beq.n	80011c4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001218:	d003      	beq.n	8001222 <HAL_RCC_OscConfig+0x8a>
 800121a:	6863      	ldr	r3, [r4, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 819c 	beq.w	800155a <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	f013 0f02 	tst.w	r3, #2
 8001228:	d064      	beq.n	80012f4 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800122a:	4b83      	ldr	r3, [pc, #524]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f013 0f0c 	tst.w	r3, #12
 8001232:	d04d      	beq.n	80012d0 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001234:	4b80      	ldr	r3, [pc, #512]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d042      	beq.n	80012c6 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001240:	68e3      	ldr	r3, [r4, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d079      	beq.n	800133a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001246:	4a7c      	ldr	r2, [pc, #496]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001248:	6813      	ldr	r3, [r2, #0]
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fa0c 	bl	800066c <HAL_GetTick>
 8001254:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001256:	4b78      	ldr	r3, [pc, #480]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f013 0f02 	tst.w	r3, #2
 800125e:	d163      	bne.n	8001328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fa04 	bl	800066c <HAL_GetTick>
 8001264:	1b40      	subs	r0, r0, r5
 8001266:	2802      	cmp	r0, #2
 8001268:	d9f5      	bls.n	8001256 <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 800126a:	2003      	movs	r0, #3
 800126c:	e178      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126e:	4a72      	ldr	r2, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e7b3      	b.n	80011e2 <HAL_RCC_OscConfig+0x4a>
 800127a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127e:	d009      	beq.n	8001294 <HAL_RCC_OscConfig+0xfc>
 8001280:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e7a6      	b.n	80011e2 <HAL_RCC_OscConfig+0x4a>
 8001294:	4b68      	ldr	r3, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e79c      	b.n	80011e2 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80012a8:	f7ff f9e0 	bl	800066c <HAL_GetTick>
 80012ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012b6:	d0b4      	beq.n	8001222 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff f9d8 	bl	800066c <HAL_GetTick>
 80012bc:	1b40      	subs	r0, r0, r5
 80012be:	2864      	cmp	r0, #100	; 0x64
 80012c0:	d9f5      	bls.n	80012ae <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80012c2:	2003      	movs	r0, #3
 80012c4:	e14c      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c6:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012ce:	d1b7      	bne.n	8001240 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d0:	4b59      	ldr	r3, [pc, #356]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f013 0f02 	tst.w	r3, #2
 80012d8:	d004      	beq.n	80012e4 <HAL_RCC_OscConfig+0x14c>
 80012da:	68e3      	ldr	r3, [r4, #12]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
 80012e2:	e13d      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4a54      	ldr	r2, [pc, #336]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80012e6:	6813      	ldr	r3, [r2, #0]
 80012e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012ec:	6921      	ldr	r1, [r4, #16]
 80012ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012f2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	f013 0f08 	tst.w	r3, #8
 80012fa:	d046      	beq.n	800138a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fc:	6963      	ldr	r3, [r4, #20]
 80012fe:	b383      	cbz	r3, 8001362 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001300:	4a4d      	ldr	r2, [pc, #308]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001302:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130a:	f7ff f9af 	bl	800066c <HAL_GetTick>
 800130e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001310:	4b49      	ldr	r3, [pc, #292]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001314:	f013 0f02 	tst.w	r3, #2
 8001318:	d137      	bne.n	800138a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff f9a7 	bl	800066c <HAL_GetTick>
 800131e:	1b40      	subs	r0, r0, r5
 8001320:	2802      	cmp	r0, #2
 8001322:	d9f5      	bls.n	8001310 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8001324:	2003      	movs	r0, #3
 8001326:	e11b      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4a43      	ldr	r2, [pc, #268]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 800132a:	6813      	ldr	r3, [r2, #0]
 800132c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001330:	6921      	ldr	r1, [r4, #16]
 8001332:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e7dc      	b.n	80012f4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800133a:	4a3f      	ldr	r2, [pc, #252]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 800133c:	6813      	ldr	r3, [r2, #0]
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001344:	f7ff f992 	bl	800066c <HAL_GetTick>
 8001348:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f013 0f02 	tst.w	r3, #2
 8001352:	d0cf      	beq.n	80012f4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff f98a 	bl	800066c <HAL_GetTick>
 8001358:	1b40      	subs	r0, r0, r5
 800135a:	2802      	cmp	r0, #2
 800135c:	d9f5      	bls.n	800134a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800135e:	2003      	movs	r0, #3
 8001360:	e0fe      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001362:	4a35      	ldr	r2, [pc, #212]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001364:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136c:	f7ff f97e 	bl	800066c <HAL_GetTick>
 8001370:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001376:	f013 0f02 	tst.w	r3, #2
 800137a:	d006      	beq.n	800138a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff f976 	bl	800066c <HAL_GetTick>
 8001380:	1b40      	subs	r0, r0, r5
 8001382:	2802      	cmp	r0, #2
 8001384:	d9f5      	bls.n	8001372 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8001386:	2003      	movs	r0, #3
 8001388:	e0ea      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	f013 0f04 	tst.w	r3, #4
 8001390:	d07e      	beq.n	8001490 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800139a:	d131      	bne.n	8001400 <HAL_RCC_OscConfig+0x268>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 800139e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013b0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_RCC_OscConfig+0x2a4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013ba:	d023      	beq.n	8001404 <HAL_RCC_OscConfig+0x26c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	68a3      	ldr	r3, [r4, #8]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d034      	beq.n	800142c <HAL_RCC_OscConfig+0x294>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d13c      	bne.n	8001440 <HAL_RCC_OscConfig+0x2a8>
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80013c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	671a      	str	r2, [r3, #112]	; 0x70
 80013d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013d2:	f022 0204 	bic.w	r2, r2, #4
 80013d6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d8:	68a3      	ldr	r3, [r4, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d046      	beq.n	800146c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013de:	f7ff f945 	bl	800066c <HAL_GetTick>
 80013e2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	f013 0f02 	tst.w	r3, #2
 80013ec:	d14f      	bne.n	800148e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff f93d 	bl	800066c <HAL_GetTick>
 80013f2:	1b80      	subs	r0, r0, r6
 80013f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80013f8:	4298      	cmp	r0, r3
 80013fa:	d9f3      	bls.n	80013e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013fc:	2003      	movs	r0, #3
 80013fe:	e0af      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
  FlagStatus pwrclkchanged = RESET;
 8001400:	2500      	movs	r5, #0
 8001402:	e7d6      	b.n	80013b2 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <HAL_RCC_OscConfig+0x2a4>)
 8001406:	6813      	ldr	r3, [r2, #0]
 8001408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800140e:	f7ff f92d 	bl	800066c <HAL_GetTick>
 8001412:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_OscConfig+0x2a4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f413 7f80 	tst.w	r3, #256	; 0x100
 800141c:	d1ce      	bne.n	80013bc <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800141e:	f7ff f925 	bl	800066c <HAL_GetTick>
 8001422:	1b80      	subs	r0, r0, r6
 8001424:	2864      	cmp	r0, #100	; 0x64
 8001426:	d9f5      	bls.n	8001414 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8001428:	2003      	movs	r0, #3
 800142a:	e099      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	4a02      	ldr	r2, [pc, #8]	; (8001438 <HAL_RCC_OscConfig+0x2a0>)
 800142e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
 8001436:	e7cf      	b.n	80013d8 <HAL_RCC_OscConfig+0x240>
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000
 8001440:	2b05      	cmp	r3, #5
 8001442:	d009      	beq.n	8001458 <HAL_RCC_OscConfig+0x2c0>
 8001444:	4b48      	ldr	r3, [pc, #288]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 8001446:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001448:	f022 0201 	bic.w	r2, r2, #1
 800144c:	671a      	str	r2, [r3, #112]	; 0x70
 800144e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001450:	f022 0204 	bic.w	r2, r2, #4
 8001454:	671a      	str	r2, [r3, #112]	; 0x70
 8001456:	e7bf      	b.n	80013d8 <HAL_RCC_OscConfig+0x240>
 8001458:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 800145a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800145c:	f042 0204 	orr.w	r2, r2, #4
 8001460:	671a      	str	r2, [r3, #112]	; 0x70
 8001462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001464:	f042 0201 	orr.w	r2, r2, #1
 8001468:	671a      	str	r2, [r3, #112]	; 0x70
 800146a:	e7b5      	b.n	80013d8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff f8fe 	bl	800066c <HAL_GetTick>
 8001470:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	f013 0f02 	tst.w	r3, #2
 800147a:	d008      	beq.n	800148e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f7ff f8f6 	bl	800066c <HAL_GetTick>
 8001480:	1b80      	subs	r0, r0, r6
 8001482:	f241 3388 	movw	r3, #5000	; 0x1388
 8001486:	4298      	cmp	r0, r3
 8001488:	d9f3      	bls.n	8001472 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800148a:	2003      	movs	r0, #3
 800148c:	e068      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800148e:	b9f5      	cbnz	r5, 80014ce <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001490:	69a3      	ldr	r3, [r4, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001496:	4a34      	ldr	r2, [pc, #208]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 8001498:	6892      	ldr	r2, [r2, #8]
 800149a:	f002 020c 	and.w	r2, r2, #12
 800149e:	2a08      	cmp	r2, #8
 80014a0:	d060      	beq.n	8001564 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d019      	beq.n	80014da <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4a30      	ldr	r2, [pc, #192]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff f8dc 	bl	800066c <HAL_GetTick>
 80014b4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014be:	d048      	beq.n	8001552 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff f8d4 	bl	800066c <HAL_GetTick>
 80014c4:	1b00      	subs	r0, r0, r4
 80014c6:	2802      	cmp	r0, #2
 80014c8:	d9f5      	bls.n	80014b6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80014ca:	2003      	movs	r0, #3
 80014cc:	e048      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ce:	4a26      	ldr	r2, [pc, #152]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 80014d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	e7da      	b.n	8001490 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80014da:	4a23      	ldr	r2, [pc, #140]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 80014dc:	6813      	ldr	r3, [r2, #0]
 80014de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014e4:	f7ff f8c2 	bl	800066c <HAL_GetTick>
 80014e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014f2:	d006      	beq.n	8001502 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff f8ba 	bl	800066c <HAL_GetTick>
 80014f8:	1b40      	subs	r0, r0, r5
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d9f5      	bls.n	80014ea <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80014fe:	2003      	movs	r0, #3
 8001500:	e02e      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001502:	69e3      	ldr	r3, [r4, #28]
 8001504:	6a22      	ldr	r2, [r4, #32]
 8001506:	4313      	orrs	r3, r2
 8001508:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800150a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800150e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001510:	0852      	lsrs	r2, r2, #1
 8001512:	3a01      	subs	r2, #1
 8001514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001518:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800151a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800151e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001520:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001524:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 8001526:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001528:	6813      	ldr	r3, [r2, #0]
 800152a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800152e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001530:	f7ff f89c 	bl	800066c <HAL_GetTick>
 8001534:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_RCC_OscConfig+0x3d0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff f894 	bl	800066c <HAL_GetTick>
 8001544:	1b00      	subs	r0, r0, r4
 8001546:	2802      	cmp	r0, #2
 8001548:	d9f5      	bls.n	8001536 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 800154a:	2003      	movs	r0, #3
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800154e:	2000      	movs	r0, #0
 8001550:	e006      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
 8001552:	2000      	movs	r0, #0
 8001554:	e004      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
 8001558:	4770      	bx	lr
        return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
 800155c:	e000      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 800155e:	2000      	movs	r0, #0
}
 8001560:	b002      	add	sp, #8
 8001562:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001564:	2001      	movs	r0, #1
 8001566:	e7fb      	b.n	8001560 <HAL_RCC_OscConfig+0x3c8>
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b04      	cmp	r3, #4
 8001578:	d059      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0xc2>
 800157a:	2b08      	cmp	r3, #8
 800157c:	d001      	beq.n	8001582 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800157e:	482e      	ldr	r0, [pc, #184]	; (8001638 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001590:	d02a      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001592:	4b28      	ldr	r3, [pc, #160]	; (8001634 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800159a:	461e      	mov	r6, r3
 800159c:	2700      	movs	r7, #0
 800159e:	015c      	lsls	r4, r3, #5
 80015a0:	2500      	movs	r5, #0
 80015a2:	1ae4      	subs	r4, r4, r3
 80015a4:	eb65 0507 	sbc.w	r5, r5, r7
 80015a8:	01a9      	lsls	r1, r5, #6
 80015aa:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015ae:	01a0      	lsls	r0, r4, #6
 80015b0:	1b00      	subs	r0, r0, r4
 80015b2:	eb61 0105 	sbc.w	r1, r1, r5
 80015b6:	00cb      	lsls	r3, r1, #3
 80015b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015bc:	00c4      	lsls	r4, r0, #3
 80015be:	19a0      	adds	r0, r4, r6
 80015c0:	eb43 0107 	adc.w	r1, r3, r7
 80015c4:	024b      	lsls	r3, r1, #9
 80015c6:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80015ca:	0244      	lsls	r4, r0, #9
 80015cc:	4620      	mov	r0, r4
 80015ce:	4619      	mov	r1, r3
 80015d0:	2300      	movs	r3, #0
 80015d2:	f7fe fe85 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015de:	3301      	adds	r3, #1
 80015e0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80015e2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80015e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015f0:	461e      	mov	r6, r3
 80015f2:	2700      	movs	r7, #0
 80015f4:	015c      	lsls	r4, r3, #5
 80015f6:	2500      	movs	r5, #0
 80015f8:	1ae4      	subs	r4, r4, r3
 80015fa:	eb65 0507 	sbc.w	r5, r5, r7
 80015fe:	01a9      	lsls	r1, r5, #6
 8001600:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001604:	01a0      	lsls	r0, r4, #6
 8001606:	1b00      	subs	r0, r0, r4
 8001608:	eb61 0105 	sbc.w	r1, r1, r5
 800160c:	00cb      	lsls	r3, r1, #3
 800160e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001612:	00c4      	lsls	r4, r0, #3
 8001614:	19a0      	adds	r0, r4, r6
 8001616:	eb43 0107 	adc.w	r1, r3, r7
 800161a:	028b      	lsls	r3, r1, #10
 800161c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001620:	0284      	lsls	r4, r0, #10
 8001622:	4620      	mov	r0, r4
 8001624:	4619      	mov	r1, r3
 8001626:	2300      	movs	r3, #0
 8001628:	f7fe fe5a 	bl	80002e0 <__aeabi_uldivmod>
 800162c:	e7d3      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	00f42400 	.word	0x00f42400
 800163c:	007a1200 	.word	0x007a1200

08001640 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001640:	2800      	cmp	r0, #0
 8001642:	f000 80a2 	beq.w	800178a <HAL_RCC_ClockConfig+0x14a>
{
 8001646:	b570      	push	{r4, r5, r6, lr}
 8001648:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800164a:	4b52      	ldr	r3, [pc, #328]	; (8001794 <HAL_RCC_ClockConfig+0x154>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	428b      	cmp	r3, r1
 8001654:	d20c      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4a4f      	ldr	r2, [pc, #316]	; (8001794 <HAL_RCC_ClockConfig+0x154>)
 8001658:	6813      	ldr	r3, [r2, #0]
 800165a:	f023 030f 	bic.w	r3, r3, #15
 800165e:	430b      	orrs	r3, r1
 8001660:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	4299      	cmp	r1, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800166c:	2001      	movs	r0, #1
 800166e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	f013 0f02 	tst.w	r3, #2
 8001676:	d017      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	f013 0f04 	tst.w	r3, #4
 800167c:	d004      	beq.n	8001688 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167e:	4a46      	ldr	r2, [pc, #280]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 8001680:	6893      	ldr	r3, [r2, #8]
 8001682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001686:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	f013 0f08 	tst.w	r3, #8
 800168e:	d004      	beq.n	800169a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001690:	4a41      	ldr	r2, [pc, #260]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 8001692:	6893      	ldr	r3, [r2, #8]
 8001694:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001698:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169a:	4a3f      	ldr	r2, [pc, #252]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 800169c:	6893      	ldr	r3, [r2, #8]
 800169e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016a2:	68a0      	ldr	r0, [r4, #8]
 80016a4:	4303      	orrs	r3, r0
 80016a6:	6093      	str	r3, [r2, #8]
 80016a8:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	f013 0f01 	tst.w	r3, #1
 80016b0:	d031      	beq.n	8001716 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b2:	6863      	ldr	r3, [r4, #4]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d025      	beq.n	8001708 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4a36      	ldr	r2, [pc, #216]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f012 0f02 	tst.w	r2, #2
 80016c4:	d063      	beq.n	800178e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c6:	4934      	ldr	r1, [pc, #208]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 80016c8:	688a      	ldr	r2, [r1, #8]
 80016ca:	f022 0203 	bic.w	r2, r2, #3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80016d2:	f7fe ffcb 	bl	800066c <HAL_GetTick>
 80016d6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	6862      	ldr	r2, [r4, #4]
 80016e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016e6:	d016      	beq.n	8001716 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7fe ffc0 	bl	800066c <HAL_GetTick>
 80016ec:	1b80      	subs	r0, r0, r6
 80016ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80016f2:	4298      	cmp	r0, r3
 80016f4:	d9f0      	bls.n	80016d8 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80016f6:	2003      	movs	r0, #3
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4a27      	ldr	r2, [pc, #156]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001702:	d1e0      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
 8001706:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001708:	4a23      	ldr	r2, [pc, #140]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001710:	d1d9      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001712:	2001      	movs	r0, #1
 8001714:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_RCC_ClockConfig+0x154>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	429d      	cmp	r5, r3
 8001720:	d20c      	bcs.n	800173c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_RCC_ClockConfig+0x154>)
 8001724:	6813      	ldr	r3, [r2, #0]
 8001726:	f023 030f 	bic.w	r3, r3, #15
 800172a:	432b      	orrs	r3, r5
 800172c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	6813      	ldr	r3, [r2, #0]
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	429d      	cmp	r5, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001738:	2001      	movs	r0, #1
}
 800173a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	f013 0f04 	tst.w	r3, #4
 8001742:	d006      	beq.n	8001752 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 8001746:	6893      	ldr	r3, [r2, #8]
 8001748:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800174c:	68e1      	ldr	r1, [r4, #12]
 800174e:	430b      	orrs	r3, r1
 8001750:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	f013 0f08 	tst.w	r3, #8
 8001758:	d007      	beq.n	800176a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 800175c:	6893      	ldr	r3, [r2, #8]
 800175e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001762:	6921      	ldr	r1, [r4, #16]
 8001764:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001768:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800176a:	f7ff feff 	bl	800156c <HAL_RCC_GetSysClockFreq>
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_RCC_ClockConfig+0x158>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x15c>)
 8001778:	5cd3      	ldrb	r3, [r2, r3]
 800177a:	40d8      	lsrs	r0, r3
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_RCC_ClockConfig+0x160>)
 800177e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001780:	2000      	movs	r0, #0
 8001782:	f7fe ff35 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 8001786:	2000      	movs	r0, #0
 8001788:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	4770      	bx	lr
        return HAL_ERROR;
 800178e:	2001      	movs	r0, #1
 8001790:	bd70      	pop	{r4, r5, r6, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00
 8001798:	40023800 	.word	0x40023800
 800179c:	0800562c 	.word	0x0800562c
 80017a0:	20000008 	.word	0x20000008

080017a4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017a4:	4b01      	ldr	r3, [pc, #4]	; (80017ac <HAL_RCC_GetHCLKFreq+0x8>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008

080017b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017b2:	f7ff fff7 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017be:	4a03      	ldr	r2, [pc, #12]	; (80017cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80017c2:	40d8      	lsrs	r0, r3
 80017c4:	bd08      	pop	{r3, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	0800563c 	.word	0x0800563c

080017d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017d2:	f7ff ffe7 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80017de:	4a03      	ldr	r2, [pc, #12]	; (80017ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80017e2:	40d8      	lsrs	r0, r3
 80017e4:	bd08      	pop	{r3, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	0800563c 	.word	0x0800563c

080017f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	b083      	sub	sp, #12
 80017f4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017f6:	6803      	ldr	r3, [r0, #0]
 80017f8:	f013 0f01 	tst.w	r3, #1
 80017fc:	d00c      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017fe:	4bb5      	ldr	r3, [pc, #724]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001810:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001812:	b1c3      	cbz	r3, 8001846 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8001814:	2700      	movs	r7, #0
 8001816:	e000      	b.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8001818:	2700      	movs	r7, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001820:	d015      	beq.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001822:	4aac      	ldr	r2, [pc, #688]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001824:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001828:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800182c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800182e:	430b      	orrs	r3, r1
 8001830:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001834:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800183a:	d006      	beq.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8145 	beq.w	8001acc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  uint32_t pllsaiused = 0;
 8001842:	2500      	movs	r5, #0
 8001844:	e004      	b.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001846:	2701      	movs	r7, #1
 8001848:	e7e7      	b.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800184a:	2701      	movs	r7, #1
 800184c:	e7f6      	b.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 800184e:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001856:	d00f      	beq.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001858:	4a9e      	ldr	r2, [pc, #632]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800185a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800185e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001862:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001864:	430b      	orrs	r3, r1
 8001866:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800186a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800186c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001870:	f000 812e 	beq.w	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001874:	b903      	cbnz	r3, 8001878 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8001876:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800187e:	d000      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8001880:	2701      	movs	r7, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001882:	f013 0f20 	tst.w	r3, #32
 8001886:	f040 8127 	bne.w	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	f013 0f10 	tst.w	r3, #16
 8001890:	d00c      	beq.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001892:	4b90      	ldr	r3, [pc, #576]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001894:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001898:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800189c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80018a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80018a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80018a6:	430a      	orrs	r2, r1
 80018a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80018b2:	d008      	beq.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018b4:	4a87      	ldr	r2, [pc, #540]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80018be:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80018c0:	430b      	orrs	r3, r1
 80018c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80018cc:	d008      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80018ce:	4a81      	ldr	r2, [pc, #516]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018d4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80018d8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80018da:	430b      	orrs	r3, r1
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80018e6:	d008      	beq.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018e8:	4a7a      	ldr	r2, [pc, #488]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80018f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80018f4:	430b      	orrs	r3, r1
 80018f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001900:	d008      	beq.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001902:	4a74      	ldr	r2, [pc, #464]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001904:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001908:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800190c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800190e:	430b      	orrs	r3, r1
 8001910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	f013 0f40 	tst.w	r3, #64	; 0x40
 800191a:	d008      	beq.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800191c:	4a6d      	ldr	r2, [pc, #436]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800191e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001928:	430b      	orrs	r3, r1
 800192a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001934:	d008      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001936:	4a67      	ldr	r2, [pc, #412]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001938:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800193c:	f023 030c 	bic.w	r3, r3, #12
 8001940:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001942:	430b      	orrs	r3, r1
 8001944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800194e:	d008      	beq.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001950:	4a60      	ldr	r2, [pc, #384]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001952:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001956:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800195a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800195c:	430b      	orrs	r3, r1
 800195e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001968:	d008      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800196a:	4a5a      	ldr	r2, [pc, #360]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800196c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001970:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001974:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001976:	430b      	orrs	r3, r1
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001982:	d008      	beq.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001984:	4a53      	ldr	r2, [pc, #332]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001986:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800198a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800198e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001990:	430b      	orrs	r3, r1
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800199c:	d008      	beq.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800199e:	4a4d      	ldr	r2, [pc, #308]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019a8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80019aa:	430b      	orrs	r3, r1
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80019b6:	d008      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80019b8:	4a46      	ldr	r2, [pc, #280]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019c2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80019c4:	430b      	orrs	r3, r1
 80019c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80019d0:	d008      	beq.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80019d2:	4a40      	ldr	r2, [pc, #256]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019dc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80019de:	430b      	orrs	r3, r1
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80019ea:	d008      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019ec:	4a39      	ldr	r2, [pc, #228]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80019f6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80019f8:	430b      	orrs	r3, r1
 80019fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001a04:	d00d      	beq.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a06:	4a33      	ldr	r2, [pc, #204]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a08:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a0c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001a10:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a12:	430b      	orrs	r3, r1
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001a18:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a1e:	f000 80c1 	beq.w	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	f013 0f08 	tst.w	r3, #8
 8001a28:	d000      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 8001a2a:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a2c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001a30:	d008      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a32:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a38:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001a3c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001a3e:	430b      	orrs	r3, r1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001a4a:	d009      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a56:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001a5a:	430b      	orrs	r3, r1
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001a66:	d009      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001a68:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001a72:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001a76:	430b      	orrs	r3, r1
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001a82:	d009      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001a84:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a86:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001a8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8001a92:	430b      	orrs	r3, r1
 8001a94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a9e:	d009      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001aa0:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001aa2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001aa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001aaa:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ab4:	2f00      	cmp	r7, #0
 8001ab6:	d177      	bne.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001abe:	d073      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001ac0:	2d00      	cmp	r5, #0
 8001ac2:	f040 8105 	bne.w	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ac6:	2000      	movs	r0, #0
}
 8001ac8:	b003      	add	sp, #12
 8001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8001acc:	2501      	movs	r5, #1
 8001ace:	e6bf      	b.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001ad0:	2701      	movs	r7, #1
 8001ad2:	e6cf      	b.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001ad4:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	4bb8      	ldr	r3, [pc, #736]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001adc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001aec:	4ab4      	ldr	r2, [pc, #720]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001af6:	f7fe fdb9 	bl	800066c <HAL_GetTick>
 8001afa:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001afc:	4bb0      	ldr	r3, [pc, #704]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b04:	d106      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7fe fdb1 	bl	800066c <HAL_GetTick>
 8001b0a:	1b80      	subs	r0, r0, r6
 8001b0c:	2864      	cmp	r0, #100	; 0x64
 8001b0e:	d9f5      	bls.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8001b10:	2003      	movs	r0, #3
 8001b12:	e7d9      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b14:	4ba9      	ldr	r3, [pc, #676]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b18:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b1c:	d015      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8001b1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b20:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d010      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b28:	4ba4      	ldr	r3, [pc, #656]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001b32:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001b36:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001b3a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001b3e:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001b40:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	f013 0f01 	tst.w	r3, #1
 8001b48:	d112      	bne.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b4c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001b50:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001b54:	d01d      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001b56:	4a99      	ldr	r2, [pc, #612]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001b58:	6893      	ldr	r3, [r2, #8]
 8001b5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b5e:	6093      	str	r3, [r2, #8]
 8001b60:	4996      	ldr	r1, [pc, #600]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001b62:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001b64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b66:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	670b      	str	r3, [r1, #112]	; 0x70
 8001b6e:	e68c      	b.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8001b70:	f7fe fd7c 	bl	800066c <HAL_GetTick>
 8001b74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b76:	4b91      	ldr	r3, [pc, #580]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	f013 0f02 	tst.w	r3, #2
 8001b7e:	d1e4      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7fe fd74 	bl	800066c <HAL_GetTick>
 8001b84:	1b80      	subs	r0, r0, r6
 8001b86:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b8a:	4298      	cmp	r0, r3
 8001b8c:	d9f3      	bls.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8001b8e:	2003      	movs	r0, #3
 8001b90:	e79a      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b92:	488a      	ldr	r0, [pc, #552]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001b94:	6882      	ldr	r2, [r0, #8]
 8001b96:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001b9a:	498a      	ldr	r1, [pc, #552]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8001b9c:	4019      	ands	r1, r3
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	6082      	str	r2, [r0, #8]
 8001ba2:	e7dd      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1;
 8001ba4:	2501      	movs	r5, #1
 8001ba6:	e73c      	b.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8001ba8:	4a84      	ldr	r2, [pc, #528]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001bb0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001bb2:	f7fe fd5b 	bl	800066c <HAL_GetTick>
 8001bb6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bb8:	4b80      	ldr	r3, [pc, #512]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001bc0:	d006      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001bc2:	f7fe fd53 	bl	800066c <HAL_GetTick>
 8001bc6:	1b80      	subs	r0, r0, r6
 8001bc8:	2864      	cmp	r0, #100	; 0x64
 8001bca:	d9f5      	bls.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8001bcc:	2003      	movs	r0, #3
 8001bce:	e77b      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	f013 0f01 	tst.w	r3, #1
 8001bd6:	d013      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8001bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bda:	b98b      	cbnz	r3, 8001c00 <HAL_RCCEx_PeriphCLKConfig+0x410>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001bdc:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001bde:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001be2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001be6:	6860      	ldr	r0, [r4, #4]
 8001be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bec:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001bf0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	68a1      	ldr	r1, [r4, #8]
 8001bf8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001bfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001c06:	d003      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8001c08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c0a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001c0e:	d043      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001c10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001c14:	d003      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c1c:	d03c      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001c24:	d011      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c26:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c28:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c2c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001c30:	6866      	ldr	r6, [r4, #4]
 8001c32:	6923      	ldr	r3, [r4, #16]
 8001c34:	041b      	lsls	r3, r3, #16
 8001c36:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001c3a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001c3e:	4303      	orrs	r3, r0
 8001c40:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001c44:	430b      	orrs	r3, r1
 8001c46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c50:	d00d      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x47e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c52:	6862      	ldr	r2, [r4, #4]
 8001c54:	6923      	ldr	r3, [r4, #16]
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c5c:	68e2      	ldr	r2, [r4, #12]
 8001c5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c62:	68a2      	ldr	r2, [r4, #8]
 8001c64:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001c68:	4a54      	ldr	r2, [pc, #336]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c6a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001c6e:	4a53      	ldr	r2, [pc, #332]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c76:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c78:	f7fe fcf8 	bl	800066c <HAL_GetTick>
 8001c7c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001c86:	f47f af1b 	bne.w	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c8a:	f7fe fcef 	bl	800066c <HAL_GetTick>
 8001c8e:	1b80      	subs	r0, r0, r6
 8001c90:	2864      	cmp	r0, #100	; 0x64
 8001c92:	d9f4      	bls.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x48e>
        return HAL_TIMEOUT;
 8001c94:	2003      	movs	r0, #3
 8001c96:	e717      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001c9a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c9e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ca2:	6860      	ldr	r0, [r4, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cac:	68e0      	ldr	r0, [r4, #12]
 8001cae:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001cb2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001cbc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001cc0:	f023 031f 	bic.w	r3, r3, #31
 8001cc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cc6:	3901      	subs	r1, #1
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cce:	e7a6      	b.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    __HAL_RCC_PLLSAI_DISABLE();
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001cd2:	6813      	ldr	r3, [r2, #0]
 8001cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001cda:	f7fe fcc7 	bl	800066c <HAL_GetTick>
 8001cde:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001ce8:	d006      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x508>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001cea:	f7fe fcbf 	bl	800066c <HAL_GetTick>
 8001cee:	1b40      	subs	r0, r0, r5
 8001cf0:	2864      	cmp	r0, #100	; 0x64
 8001cf2:	d9f5      	bls.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        return HAL_TIMEOUT;
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	e6e7      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001d00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d02:	b122      	cbz	r2, 8001d0e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8001d04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001d08:	d01d      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x556>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d0c:	b9db      	cbnz	r3, 8001d46 <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d0e:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001d14:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001d18:	6960      	ldr	r0, [r4, #20]
 8001d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d22:	69a0      	ldr	r0, [r4, #24]
 8001d24:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001d28:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d32:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d36:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001d3a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001d3c:	3901      	subs	r1, #1
 8001d3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001d4e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d54:	d038      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	f013 0f08 	tst.w	r3, #8
 8001d5c:	d019      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d60:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d64:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d68:	6960      	ldr	r0, [r4, #20]
 8001d6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d6e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d72:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001d76:	430b      	orrs	r3, r1
 8001d78:	69e1      	ldr	r1, [r4, #28]
 8001d7a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001d7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d82:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001d8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d9c:	f7fe fc66 	bl	800066c <HAL_GetTick>
 8001da0:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001daa:	d120      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001dac:	f7fe fc5e 	bl	800066c <HAL_GetTick>
 8001db0:	1b00      	subs	r0, r0, r4
 8001db2:	2864      	cmp	r0, #100	; 0x64
 8001db4:	d9f5      	bls.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
        return HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
 8001db8:	e686      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	0ffffcff 	.word	0x0ffffcff
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8001dca:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001dce:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001dd2:	6965      	ldr	r5, [r4, #20]
 8001dd4:	6a23      	ldr	r3, [r4, #32]
 8001dd6:	041b      	lsls	r3, r3, #16
 8001dd8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001ddc:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001de0:	4303      	orrs	r3, r0
 8001de2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001de6:	430b      	orrs	r3, r1
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001dec:	e7b3      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x566>
  return HAL_OK;
 8001dee:	2000      	movs	r0, #0
 8001df0:	e66a      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001df8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001dfa:	6803      	ldr	r3, [r0, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e02:	d001      	beq.n	8001e08 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001e04:	2000      	movs	r0, #0
 8001e06:	bd38      	pop	{r3, r4, r5, pc}
 8001e08:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001e10:	f7fe fc2c 	bl	800066c <HAL_GetTick>
 8001e14:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001e1e:	d107      	bne.n	8001e30 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e20:	f7fe fc24 	bl	800066c <HAL_GetTick>
 8001e24:	1b40      	subs	r0, r0, r5
 8001e26:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e2a:	d9f4      	bls.n	8001e16 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8001e2c:	2003      	movs	r0, #3
}
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8001e30:	2000      	movs	r0, #0
 8001e32:	bd38      	pop	{r3, r4, r5, pc}

08001e34 <HAL_RTC_Init>:
  if(hrtc == NULL)
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d04a      	beq.n	8001ece <HAL_RTC_Init+0x9a>
{
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e3c:	7f43      	ldrb	r3, [r0, #29]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d03a      	beq.n	8001eb8 <HAL_RTC_Init+0x84>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001e42:	2302      	movs	r3, #2
 8001e44:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	22ca      	movs	r2, #202	; 0xca
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	2253      	movs	r2, #83	; 0x53
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7ff ffd0 	bl	8001df8 <RTC_EnterInitMode>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d130      	bne.n	8001ec0 <HAL_RTC_Init+0x8c>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e5e:	6821      	ldr	r1, [r4, #0]
 8001e60:	6888      	ldr	r0, [r1, #8]
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_RTC_Init+0xa0>)
 8001e64:	4003      	ands	r3, r0
 8001e66:	608b      	str	r3, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e68:	6820      	ldr	r0, [r4, #0]
 8001e6a:	6881      	ldr	r1, [r0, #8]
 8001e6c:	6863      	ldr	r3, [r4, #4]
 8001e6e:	6925      	ldr	r5, [r4, #16]
 8001e70:	432b      	orrs	r3, r5
 8001e72:	6965      	ldr	r5, [r4, #20]
 8001e74:	432b      	orrs	r3, r5
 8001e76:	430b      	orrs	r3, r1
 8001e78:	6083      	str	r3, [r0, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	68e1      	ldr	r1, [r4, #12]
 8001e7e:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001e80:	6821      	ldr	r1, [r4, #0]
 8001e82:	690b      	ldr	r3, [r1, #16]
 8001e84:	68a0      	ldr	r0, [r4, #8]
 8001e86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001e8a:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001e8c:	6821      	ldr	r1, [r4, #0]
 8001e8e:	68cb      	ldr	r3, [r1, #12]
 8001e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e94:	60cb      	str	r3, [r1, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8001e96:	6821      	ldr	r1, [r4, #0]
 8001e98:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001e9a:	f023 0308 	bic.w	r3, r3, #8
 8001e9e:	64cb      	str	r3, [r1, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001ea0:	6821      	ldr	r1, [r4, #0]
 8001ea2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001ea4:	69a0      	ldr	r0, [r4, #24]
 8001ea6:	4303      	orrs	r3, r0
 8001ea8:	64cb      	str	r3, [r1, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	21ff      	movs	r1, #255	; 0xff
 8001eae:	6259      	str	r1, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	7763      	strb	r3, [r4, #29]
}
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001eb8:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001eba:	f001 fc61 	bl	8003780 <HAL_RTC_MspInit>
 8001ebe:	e7c0      	b.n	8001e42 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	22ff      	movs	r2, #255	; 0xff
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8001eca:	2201      	movs	r2, #1
 8001ecc:	e7f2      	b.n	8001eb4 <HAL_RTC_Init+0x80>
     return HAL_ERROR;
 8001ece:	2201      	movs	r2, #1
}
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4770      	bx	lr
 8001ed4:	ff8fffbf 	.word	0xff8fffbf

08001ed8 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d058      	beq.n	8001f8e <HAL_SPI_Init+0xb6>
{
 8001edc:	b510      	push	{r4, lr}
 8001ede:	4604      	mov	r4, r0
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ee4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d045      	beq.n	8001f78 <HAL_SPI_Init+0xa0>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001eec:	2302      	movs	r3, #2
 8001eee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ef2:	6822      	ldr	r2, [r4, #0]
 8001ef4:	6813      	ldr	r3, [r2, #0]
 8001ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001efa:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001efc:	68e3      	ldr	r3, [r4, #12]
 8001efe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f02:	d93e      	bls.n	8001f82 <HAL_SPI_Init+0xaa>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f04:	2100      	movs	r1, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001f0a:	bf18      	it	ne
 8001f0c:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8001f10:	d001      	beq.n	8001f16 <HAL_SPI_Init+0x3e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f12:	2200      	movs	r2, #0
 8001f14:	62a2      	str	r2, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001f16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f18:	b922      	cbnz	r2, 8001f24 <HAL_SPI_Init+0x4c>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f1e:	d933      	bls.n	8001f88 <HAL_SPI_Init+0xb0>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001f20:	2302      	movs	r3, #2
 8001f22:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	6863      	ldr	r3, [r4, #4]
 8001f28:	68a0      	ldr	r0, [r4, #8]
 8001f2a:	4303      	orrs	r3, r0
 8001f2c:	6920      	ldr	r0, [r4, #16]
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	6960      	ldr	r0, [r4, #20]
 8001f32:	4303      	orrs	r3, r0
 8001f34:	69a0      	ldr	r0, [r4, #24]
 8001f36:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	69e0      	ldr	r0, [r4, #28]
 8001f3e:	4303      	orrs	r3, r0
 8001f40:	6a20      	ldr	r0, [r4, #32]
 8001f42:	4303      	orrs	r3, r0
 8001f44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f46:	4303      	orrs	r3, r0
 8001f48:	6013      	str	r3, [r2, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001f4a:	6822      	ldr	r2, [r4, #0]
 8001f4c:	8b63      	ldrh	r3, [r4, #26]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001f54:	4303      	orrs	r3, r0
 8001f56:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001f58:	4303      	orrs	r3, r0
 8001f5a:	68e0      	ldr	r0, [r4, #12]
 8001f5c:	4303      	orrs	r3, r0
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f62:	6822      	ldr	r2, [r4, #0]
 8001f64:	69d3      	ldr	r3, [r2, #28]
 8001f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f6a:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001f76:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001f78:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001f7c:	f001 fc64 	bl	8003848 <HAL_SPI_MspInit>
 8001f80:	e7b4      	b.n	8001eec <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f86:	e7be      	b.n	8001f06 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8001f8c:	e7ca      	b.n	8001f24 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8001f8e:	2001      	movs	r0, #1
 8001f90:	4770      	bx	lr

08001f92 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f92:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f94:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f96:	6a04      	ldr	r4, [r0, #32]
 8001f98:	f024 0401 	bic.w	r4, r4, #1
 8001f9c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f9e:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fa0:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001fa4:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fa8:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001fac:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fb0:	6203      	str	r3, [r0, #32]
}
 8001fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fb8:	b410      	push	{r4}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fba:	6a03      	ldr	r3, [r0, #32]
 8001fbc:	f023 0310 	bic.w	r3, r3, #16
 8001fc0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fc2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fc4:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fc6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001fca:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001fd2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fd6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fd8:	6203      	str	r3, [r0, #32]
}
 8001fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001fe0:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fe6:	f041 0107 	orr.w	r1, r1, #7
 8001fea:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001fec:	6083      	str	r3, [r0, #8]
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_PeriodElapsedCallback>:
{
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_IC_CaptureCallback>:
{
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIM_TriggerCallback>:
{
 8001ff8:	4770      	bx	lr

08001ffa <HAL_TIM_IRQHandler>:
{
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ffe:	6803      	ldr	r3, [r0, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	f012 0f02 	tst.w	r2, #2
 8002006:	d011      	beq.n	800202c <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	f012 0f02 	tst.w	r2, #2
 800200e:	d00d      	beq.n	800202c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002010:	f06f 0202 	mvn.w	r2, #2
 8002014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002016:	2301      	movs	r3, #1
 8002018:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800201a:	6803      	ldr	r3, [r0, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f013 0f03 	tst.w	r3, #3
 8002022:	d079      	beq.n	8002118 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002024:	f7ff ffe6 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002028:	2300      	movs	r3, #0
 800202a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	f012 0f04 	tst.w	r2, #4
 8002034:	d012      	beq.n	800205c <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	f012 0f04 	tst.w	r2, #4
 800203c:	d00e      	beq.n	800205c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800203e:	f06f 0204 	mvn.w	r2, #4
 8002042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002044:	2302      	movs	r3, #2
 8002046:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002048:	6823      	ldr	r3, [r4, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002050:	d068      	beq.n	8002124 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff ffce 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002058:	2300      	movs	r3, #0
 800205a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	f012 0f08 	tst.w	r2, #8
 8002064:	d012      	beq.n	800208c <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	f012 0f08 	tst.w	r2, #8
 800206c:	d00e      	beq.n	800208c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206e:	f06f 0208 	mvn.w	r2, #8
 8002072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002074:	2304      	movs	r3, #4
 8002076:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f013 0f03 	tst.w	r3, #3
 8002080:	d057      	beq.n	8002132 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff ffb6 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002088:	2300      	movs	r3, #0
 800208a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	f012 0f10 	tst.w	r2, #16
 8002094:	d012      	beq.n	80020bc <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	f012 0f10 	tst.w	r2, #16
 800209c:	d00e      	beq.n	80020bc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800209e:	f06f 0210 	mvn.w	r2, #16
 80020a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a4:	2308      	movs	r3, #8
 80020a6:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	f413 7f40 	tst.w	r3, #768	; 0x300
 80020b0:	d046      	beq.n	8002140 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7ff ff9e 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b8:	2300      	movs	r3, #0
 80020ba:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	f012 0f01 	tst.w	r2, #1
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	f012 0f01 	tst.w	r2, #1
 80020cc:	d13f      	bne.n	800214e <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020d6:	d003      	beq.n	80020e0 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020de:	d13d      	bne.n	800215c <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020f0:	d13b      	bne.n	800216a <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020fa:	d003      	beq.n	8002104 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002102:	d139      	bne.n	8002178 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	f012 0f20 	tst.w	r2, #32
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	f012 0f20 	tst.w	r2, #32
 8002114:	d137      	bne.n	8002186 <HAL_TIM_IRQHandler+0x18c>
 8002116:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002118:	f7ff ff6b 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	4620      	mov	r0, r4
 800211e:	f7ff ff6a 	bl	8001ff6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002122:	e781      	b.n	8002028 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff ff64 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212a:	4620      	mov	r0, r4
 800212c:	f7ff ff63 	bl	8001ff6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002130:	e792      	b.n	8002058 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	4620      	mov	r0, r4
 8002134:	f7ff ff5d 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff ff5c 	bl	8001ff6 <HAL_TIM_PWM_PulseFinishedCallback>
 800213e:	e7a3      	b.n	8002088 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff ff56 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff ff55 	bl	8001ff6 <HAL_TIM_PWM_PulseFinishedCallback>
 800214c:	e7b4      	b.n	80020b8 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800214e:	f06f 0201 	mvn.w	r2, #1
 8002152:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002154:	4620      	mov	r0, r4
 8002156:	f7ff ff4b 	bl	8001ff0 <HAL_TIM_PeriodElapsedCallback>
 800215a:	e7b8      	b.n	80020ce <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800215c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002160:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002162:	4620      	mov	r0, r4
 8002164:	f000 f993 	bl	800248e <HAL_TIMEx_BreakCallback>
 8002168:	e7ba      	b.n	80020e0 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800216a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800216e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002170:	4620      	mov	r0, r4
 8002172:	f000 f98c 	bl	800248e <HAL_TIMEx_BreakCallback>
 8002176:	e7bc      	b.n	80020f2 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800217c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff3a 	bl	8001ff8 <HAL_TIM_TriggerCallback>
 8002184:	e7be      	b.n	8002104 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002186:	f06f 0220 	mvn.w	r2, #32
 800218a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800218c:	4620      	mov	r0, r4
 800218e:	f000 f97d 	bl	800248c <HAL_TIMEx_CommutationCallback>
}
 8002192:	e7c0      	b.n	8002116 <HAL_TIM_IRQHandler+0x11c>

08002194 <TIM_Base_SetConfig>:
{
 8002194:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8002196:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002198:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <TIM_Base_SetConfig+0x124>)
 800219a:	4290      	cmp	r0, r2
 800219c:	bf14      	ite	ne
 800219e:	2200      	movne	r2, #0
 80021a0:	2201      	moveq	r2, #1
 80021a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021a6:	bf14      	ite	ne
 80021a8:	4614      	movne	r4, r2
 80021aa:	f042 0401 	orreq.w	r4, r2, #1
 80021ae:	b9d4      	cbnz	r4, 80021e6 <TIM_Base_SetConfig+0x52>
 80021b0:	4d42      	ldr	r5, [pc, #264]	; (80022bc <TIM_Base_SetConfig+0x128>)
 80021b2:	42a8      	cmp	r0, r5
 80021b4:	bf14      	ite	ne
 80021b6:	2500      	movne	r5, #0
 80021b8:	2501      	moveq	r5, #1
 80021ba:	4e41      	ldr	r6, [pc, #260]	; (80022c0 <TIM_Base_SetConfig+0x12c>)
 80021bc:	42b0      	cmp	r0, r6
 80021be:	d054      	beq.n	800226a <TIM_Base_SetConfig+0xd6>
 80021c0:	2d00      	cmp	r5, #0
 80021c2:	d152      	bne.n	800226a <TIM_Base_SetConfig+0xd6>
 80021c4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80021c8:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 80021cc:	42a8      	cmp	r0, r5
 80021ce:	bf14      	ite	ne
 80021d0:	2500      	movne	r5, #0
 80021d2:	2501      	moveq	r5, #1
 80021d4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80021d8:	42b0      	cmp	r0, r6
 80021da:	d002      	beq.n	80021e2 <TIM_Base_SetConfig+0x4e>
 80021dc:	b90d      	cbnz	r5, 80021e2 <TIM_Base_SetConfig+0x4e>
 80021de:	2500      	movs	r5, #0
 80021e0:	e002      	b.n	80021e8 <TIM_Base_SetConfig+0x54>
 80021e2:	2501      	movs	r5, #1
 80021e4:	e000      	b.n	80021e8 <TIM_Base_SetConfig+0x54>
 80021e6:	2501      	movs	r5, #1
 80021e8:	b11d      	cbz	r5, 80021f2 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021ee:	684d      	ldr	r5, [r1, #4]
 80021f0:	432b      	orrs	r3, r5
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021f2:	2c00      	cmp	r4, #0
 80021f4:	d13d      	bne.n	8002272 <TIM_Base_SetConfig+0xde>
 80021f6:	4c31      	ldr	r4, [pc, #196]	; (80022bc <TIM_Base_SetConfig+0x128>)
 80021f8:	42a0      	cmp	r0, r4
 80021fa:	bf14      	ite	ne
 80021fc:	2400      	movne	r4, #0
 80021fe:	2401      	moveq	r4, #1
 8002200:	4d2f      	ldr	r5, [pc, #188]	; (80022c0 <TIM_Base_SetConfig+0x12c>)
 8002202:	42a8      	cmp	r0, r5
 8002204:	d050      	beq.n	80022a8 <TIM_Base_SetConfig+0x114>
 8002206:	2c00      	cmp	r4, #0
 8002208:	d14e      	bne.n	80022a8 <TIM_Base_SetConfig+0x114>
 800220a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800220e:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8002212:	42a0      	cmp	r0, r4
 8002214:	bf14      	ite	ne
 8002216:	2400      	movne	r4, #0
 8002218:	2401      	moveq	r4, #1
 800221a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800221e:	42a8      	cmp	r0, r5
 8002220:	d044      	beq.n	80022ac <TIM_Base_SetConfig+0x118>
 8002222:	2c00      	cmp	r4, #0
 8002224:	d142      	bne.n	80022ac <TIM_Base_SetConfig+0x118>
 8002226:	4c27      	ldr	r4, [pc, #156]	; (80022c4 <TIM_Base_SetConfig+0x130>)
 8002228:	42a0      	cmp	r0, r4
 800222a:	bf14      	ite	ne
 800222c:	2400      	movne	r4, #0
 800222e:	2401      	moveq	r4, #1
 8002230:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8002234:	42a8      	cmp	r0, r5
 8002236:	d03b      	beq.n	80022b0 <TIM_Base_SetConfig+0x11c>
 8002238:	2c00      	cmp	r4, #0
 800223a:	d139      	bne.n	80022b0 <TIM_Base_SetConfig+0x11c>
 800223c:	4c22      	ldr	r4, [pc, #136]	; (80022c8 <TIM_Base_SetConfig+0x134>)
 800223e:	42a0      	cmp	r0, r4
 8002240:	bf14      	ite	ne
 8002242:	2400      	movne	r4, #0
 8002244:	2401      	moveq	r4, #1
 8002246:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800224a:	42a8      	cmp	r0, r5
 800224c:	d032      	beq.n	80022b4 <TIM_Base_SetConfig+0x120>
 800224e:	2c00      	cmp	r4, #0
 8002250:	d130      	bne.n	80022b4 <TIM_Base_SetConfig+0x120>
 8002252:	4c1e      	ldr	r4, [pc, #120]	; (80022cc <TIM_Base_SetConfig+0x138>)
 8002254:	42a0      	cmp	r0, r4
 8002256:	bf14      	ite	ne
 8002258:	2400      	movne	r4, #0
 800225a:	2401      	moveq	r4, #1
 800225c:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8002260:	42a8      	cmp	r0, r5
 8002262:	d004      	beq.n	800226e <TIM_Base_SetConfig+0xda>
 8002264:	b91c      	cbnz	r4, 800226e <TIM_Base_SetConfig+0xda>
 8002266:	2400      	movs	r4, #0
 8002268:	e004      	b.n	8002274 <TIM_Base_SetConfig+0xe0>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800226a:	2501      	movs	r5, #1
 800226c:	e7bc      	b.n	80021e8 <TIM_Base_SetConfig+0x54>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800226e:	2401      	movs	r4, #1
 8002270:	e000      	b.n	8002274 <TIM_Base_SetConfig+0xe0>
 8002272:	2401      	movs	r4, #1
 8002274:	b11c      	cbz	r4, 800227e <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227a:	68cc      	ldr	r4, [r1, #12]
 800227c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800227e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002282:	694c      	ldr	r4, [r1, #20]
 8002284:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002286:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002288:	688b      	ldr	r3, [r1, #8]
 800228a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800228c:	680b      	ldr	r3, [r1, #0]
 800228e:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <TIM_Base_SetConfig+0x13c>)
 8002292:	4298      	cmp	r0, r3
 8002294:	bf08      	it	eq
 8002296:	f042 0201 	orreq.w	r2, r2, #1
 800229a:	b10a      	cbz	r2, 80022a0 <TIM_Base_SetConfig+0x10c>
    TIMx->RCR = Structure->RepetitionCounter;
 800229c:	690b      	ldr	r3, [r1, #16]
 800229e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80022a0:	2301      	movs	r3, #1
 80022a2:	6143      	str	r3, [r0, #20]
}
 80022a4:	bc70      	pop	{r4, r5, r6}
 80022a6:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80022a8:	2401      	movs	r4, #1
 80022aa:	e7e3      	b.n	8002274 <TIM_Base_SetConfig+0xe0>
 80022ac:	2401      	movs	r4, #1
 80022ae:	e7e1      	b.n	8002274 <TIM_Base_SetConfig+0xe0>
 80022b0:	2401      	movs	r4, #1
 80022b2:	e7df      	b.n	8002274 <TIM_Base_SetConfig+0xe0>
 80022b4:	2401      	movs	r4, #1
 80022b6:	e7dd      	b.n	8002274 <TIM_Base_SetConfig+0xe0>
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40014400 	.word	0x40014400
 80022c8:	40001800 	.word	0x40001800
 80022cc:	40002000 	.word	0x40002000
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80022d4:	b1a8      	cbz	r0, 8002302 <HAL_TIM_Base_Init+0x2e>
{ 
 80022d6:	b510      	push	{r4, lr}
 80022d8:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80022da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022de:	b15b      	cbz	r3, 80022f8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80022e0:	2302      	movs	r3, #2
 80022e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022e6:	1d21      	adds	r1, r4, #4
 80022e8:	6820      	ldr	r0, [r4, #0]
 80022ea:	f7ff ff53 	bl	8002194 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022f4:	2000      	movs	r0, #0
 80022f6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80022f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022fc:	f001 fd0a 	bl	8003d14 <HAL_TIM_Base_MspInit>
 8002300:	e7ee      	b.n	80022e0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002302:	2001      	movs	r0, #1
 8002304:	4770      	bx	lr

08002306 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002306:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002308:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800230a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800230e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002312:	4319      	orrs	r1, r3
 8002314:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002316:	6084      	str	r4, [r0, #8]
} 
 8002318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002320:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d07d      	beq.n	8002424 <HAL_TIM_ConfigClockSource+0x104>
{
 8002328:	b510      	push	{r4, lr}
 800232a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800232c:	2301      	movs	r3, #1
 800232e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002338:	6802      	ldr	r2, [r0, #0]
 800233a:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800233c:	4b3a      	ldr	r3, [pc, #232]	; (8002428 <HAL_TIM_ConfigClockSource+0x108>)
 800233e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002340:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002342:	680b      	ldr	r3, [r1, #0]
 8002344:	2b40      	cmp	r3, #64	; 0x40
 8002346:	d059      	beq.n	80023fc <HAL_TIM_ConfigClockSource+0xdc>
 8002348:	d910      	bls.n	800236c <HAL_TIM_ConfigClockSource+0x4c>
 800234a:	2b70      	cmp	r3, #112	; 0x70
 800234c:	d03e      	beq.n	80023cc <HAL_TIM_ConfigClockSource+0xac>
 800234e:	d81f      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x70>
 8002350:	2b50      	cmp	r3, #80	; 0x50
 8002352:	d049      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0xc8>
 8002354:	2b60      	cmp	r3, #96	; 0x60
 8002356:	d132      	bne.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002358:	68ca      	ldr	r2, [r1, #12]
 800235a:	6849      	ldr	r1, [r1, #4]
 800235c:	6820      	ldr	r0, [r4, #0]
 800235e:	f7ff fe2b 	bl	8001fb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002362:	2160      	movs	r1, #96	; 0x60
 8002364:	6820      	ldr	r0, [r4, #0]
 8002366:	f7ff fe3b 	bl	8001fe0 <TIM_ITRx_SetConfig>
    break;
 800236a:	e028      	b.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800236c:	2b10      	cmp	r3, #16
 800236e:	d04f      	beq.n	8002410 <HAL_TIM_ConfigClockSource+0xf0>
 8002370:	d908      	bls.n	8002384 <HAL_TIM_ConfigClockSource+0x64>
 8002372:	2b20      	cmp	r3, #32
 8002374:	d051      	beq.n	800241a <HAL_TIM_ConfigClockSource+0xfa>
 8002376:	2b30      	cmp	r3, #48	; 0x30
 8002378:	d121      	bne.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800237a:	2130      	movs	r1, #48	; 0x30
 800237c:	6820      	ldr	r0, [r4, #0]
 800237e:	f7ff fe2f 	bl	8001fe0 <TIM_ITRx_SetConfig>
    break;
 8002382:	e01c      	b.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002384:	b9db      	cbnz	r3, 80023be <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002386:	2100      	movs	r1, #0
 8002388:	6820      	ldr	r0, [r4, #0]
 800238a:	f7ff fe29 	bl	8001fe0 <TIM_ITRx_SetConfig>
    break;
 800238e:	e016      	b.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002394:	d00e      	beq.n	80023b4 <HAL_TIM_ConfigClockSource+0x94>
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239a:	d110      	bne.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ETR_SetConfig(htim->Instance, 
 800239c:	68cb      	ldr	r3, [r1, #12]
 800239e:	684a      	ldr	r2, [r1, #4]
 80023a0:	6889      	ldr	r1, [r1, #8]
 80023a2:	6820      	ldr	r0, [r4, #0]
 80023a4:	f7ff ffaf 	bl	8002306 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	6893      	ldr	r3, [r2, #8]
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b0:	6093      	str	r3, [r2, #8]
    break;
 80023b2:	e004      	b.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023b4:	6822      	ldr	r2, [r4, #0]
 80023b6:	6891      	ldr	r1, [r2, #8]
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_TIM_ConfigClockSource+0x10c>)
 80023ba:	400b      	ands	r3, r1
 80023bc:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80023be:	2301      	movs	r3, #1
 80023c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80023ca:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 80023cc:	68cb      	ldr	r3, [r1, #12]
 80023ce:	684a      	ldr	r2, [r1, #4]
 80023d0:	6889      	ldr	r1, [r1, #8]
 80023d2:	6820      	ldr	r0, [r4, #0]
 80023d4:	f7ff ff97 	bl	8002306 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023d8:	6822      	ldr	r2, [r4, #0]
 80023da:	6891      	ldr	r1, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_TIM_ConfigClockSource+0x110>)
 80023de:	400b      	ands	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80023e4:	6093      	str	r3, [r2, #8]
    break;
 80023e6:	e7ea      	b.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80023e8:	68ca      	ldr	r2, [r1, #12]
 80023ea:	6849      	ldr	r1, [r1, #4]
 80023ec:	6820      	ldr	r0, [r4, #0]
 80023ee:	f7ff fdd0 	bl	8001f92 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f2:	2150      	movs	r1, #80	; 0x50
 80023f4:	6820      	ldr	r0, [r4, #0]
 80023f6:	f7ff fdf3 	bl	8001fe0 <TIM_ITRx_SetConfig>
    break;
 80023fa:	e7e0      	b.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80023fc:	68ca      	ldr	r2, [r1, #12]
 80023fe:	6849      	ldr	r1, [r1, #4]
 8002400:	6820      	ldr	r0, [r4, #0]
 8002402:	f7ff fdc6 	bl	8001f92 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002406:	2140      	movs	r1, #64	; 0x40
 8002408:	6820      	ldr	r0, [r4, #0]
 800240a:	f7ff fde9 	bl	8001fe0 <TIM_ITRx_SetConfig>
    break;
 800240e:	e7d6      	b.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002410:	2110      	movs	r1, #16
 8002412:	6820      	ldr	r0, [r4, #0]
 8002414:	f7ff fde4 	bl	8001fe0 <TIM_ITRx_SetConfig>
    break;
 8002418:	e7d1      	b.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800241a:	2120      	movs	r1, #32
 800241c:	6820      	ldr	r0, [r4, #0]
 800241e:	f7ff fddf 	bl	8001fe0 <TIM_ITRx_SetConfig>
    break;
 8002422:	e7cc      	b.n	80023be <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8002424:	2002      	movs	r0, #2
 8002426:	4770      	bx	lr
 8002428:	fffe0088 	.word	0xfffe0088
 800242c:	fffefff8 	.word	0xfffefff8
 8002430:	fffeff88 	.word	0xfffeff88

08002434 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002434:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d021      	beq.n	8002480 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 800243c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800243e:	2301      	movs	r3, #1
 8002440:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002444:	6804      	ldr	r4, [r0, #0]
 8002446:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002448:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800244a:	4d0e      	ldr	r5, [pc, #56]	; (8002484 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800244c:	4e0e      	ldr	r6, [pc, #56]	; (8002488 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800244e:	42ac      	cmp	r4, r5
 8002450:	bf18      	it	ne
 8002452:	42b4      	cmpne	r4, r6
 8002454:	d103      	bne.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002456:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800245a:	684d      	ldr	r5, [r1, #4]
 800245c:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002462:	680d      	ldr	r5, [r1, #0]
 8002464:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800246a:	6889      	ldr	r1, [r1, #8]
 800246c:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800246e:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002470:	6803      	ldr	r3, [r0, #0]
 8002472:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002474:	2300      	movs	r3, #0
 8002476:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 800247a:	4618      	mov	r0, r3
} 
 800247c:	bc70      	pop	{r4, r5, r6}
 800247e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002480:	2002      	movs	r0, #2
 8002482:	4770      	bx	lr
 8002484:	40010400 	.word	0x40010400
 8002488:	40010000 	.word	0x40010000

0800248c <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800248c:	4770      	bx	lr

0800248e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800248e:	4770      	bx	lr

08002490 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002490:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b21      	cmp	r3, #33	; 0x21
 8002498:	d001      	beq.n	800249e <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800249a:	2002      	movs	r0, #2
  }
}
 800249c:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 800249e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	b193      	cbz	r3, 80024cc <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a6:	6883      	ldr	r3, [r0, #8]
 80024a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ac:	d01a      	beq.n	80024e4 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80024ae:	6802      	ldr	r2, [r0, #0]
 80024b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	64c1      	str	r1, [r0, #76]	; 0x4c
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80024ba:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 80024c8:	2000      	movs	r0, #0
 80024ca:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80024cc:	6802      	ldr	r2, [r0, #0]
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d4:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024d6:	6802      	ldr	r2, [r0, #0]
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024de:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80024e0:	2000      	movs	r0, #0
 80024e2:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e4:	6903      	ldr	r3, [r0, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1e1      	bne.n	80024ae <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80024ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80024ec:	6802      	ldr	r2, [r0, #0]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f4:	6293      	str	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80024f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80024f8:	3302      	adds	r3, #2
 80024fa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80024fc:	e7dd      	b.n	80024ba <UART_Transmit_IT+0x2a>

080024fe <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024fe:	6802      	ldr	r2, [r0, #0]
 8002500:	6813      	ldr	r3, [r2, #0]
 8002502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002506:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002508:	6802      	ldr	r2, [r0, #0]
 800250a:	6893      	ldr	r3, [r2, #8]
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002512:	2320      	movs	r3, #32
 8002514:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002518:	4770      	bx	lr

0800251a <HAL_UART_DeInit>:
  if(huart == NULL)
 800251a:	b1d8      	cbz	r0, 8002554 <HAL_UART_DeInit+0x3a>
{
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8002520:	2324      	movs	r3, #36	; 0x24
 8002522:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002526:	6802      	ldr	r2, [r0, #0]
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8002530:	6803      	ldr	r3, [r0, #0]
 8002532:	2500      	movs	r5, #0
 8002534:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800253a:	6803      	ldr	r3, [r0, #0]
 800253c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800253e:	f001 fe5b 	bl	80041f8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002542:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 8002544:	f884 5069 	strb.w	r5, [r4, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8002548:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 800254c:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
  return HAL_OK;
 8002550:	4628      	mov	r0, r5
 8002552:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002554:	2001      	movs	r0, #1
 8002556:	4770      	bx	lr

08002558 <UART_WaitOnFlagUntilTimeout>:
{
 8002558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255c:	4605      	mov	r5, r0
 800255e:	460f      	mov	r7, r1
 8002560:	4616      	mov	r6, r2
 8002562:	4698      	mov	r8, r3
 8002564:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002566:	682b      	ldr	r3, [r5, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	ea37 0303 	bics.w	r3, r7, r3
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	42b3      	cmp	r3, r6
 8002576:	d11e      	bne.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002578:	f1b4 3fff 	cmp.w	r4, #4294967295
 800257c:	d0f3      	beq.n	8002566 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800257e:	b12c      	cbz	r4, 800258c <UART_WaitOnFlagUntilTimeout+0x34>
 8002580:	f7fe f874 	bl	800066c <HAL_GetTick>
 8002584:	eba0 0008 	sub.w	r0, r0, r8
 8002588:	4284      	cmp	r4, r0
 800258a:	d8ec      	bhi.n	8002566 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800258c:	682a      	ldr	r2, [r5, #0]
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002594:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002596:	682a      	ldr	r2, [r5, #0]
 8002598:	6893      	ldr	r3, [r2, #8]
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80025a0:	2320      	movs	r3, #32
 80025a2:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80025a6:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80025aa:	2300      	movs	r3, #0
 80025ac:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 80025b0:	2003      	movs	r0, #3
 80025b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80025b6:	2000      	movs	r0, #0
}
 80025b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025bc <HAL_UART_Transmit>:
{
 80025bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80025c4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d004      	beq.n	80025d8 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	b002      	add	sp, #8
 80025d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025d8:	4604      	mov	r4, r0
 80025da:	460d      	mov	r5, r1
 80025dc:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 80025de:	2a00      	cmp	r2, #0
 80025e0:	bf18      	it	ne
 80025e2:	2900      	cmpne	r1, #0
 80025e4:	d04c      	beq.n	8002680 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80025e6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Transmit+0x36>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e7ee      	b.n	80025d0 <HAL_UART_Transmit+0x14>
 80025f2:	2301      	movs	r3, #1
 80025f4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025fc:	2321      	movs	r3, #33	; 0x21
 80025fe:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8002602:	f7fe f833 	bl	800066c <HAL_GetTick>
 8002606:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002608:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800260c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002610:	e003      	b.n	800261a <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	782a      	ldrb	r2, [r5, #0]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
 8002618:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 800261a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800261e:	b29b      	uxth	r3, r3
 8002620:	b1e3      	cbz	r3, 800265c <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8002622:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29b      	uxth	r3, r3
 800262c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002630:	9600      	str	r6, [sp, #0]
 8002632:	463b      	mov	r3, r7
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff ff8d 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 800263e:	bb08      	cbnz	r0, 8002684 <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002640:	68a3      	ldr	r3, [r4, #8]
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	d1e4      	bne.n	8002612 <HAL_UART_Transmit+0x56>
 8002648:	6923      	ldr	r3, [r4, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1e1      	bne.n	8002612 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002658:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 800265a:	e7de      	b.n	800261a <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800265c:	9600      	str	r6, [sp, #0]
 800265e:	463b      	mov	r3, r7
 8002660:	2200      	movs	r2, #0
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff ff77 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	b108      	cbz	r0, 8002672 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e7ae      	b.n	80025d0 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8002672:	2220      	movs	r2, #32
 8002674:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002678:	2200      	movs	r2, #0
 800267a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 800267e:	e7a7      	b.n	80025d0 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e7a5      	b.n	80025d0 <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e7a3      	b.n	80025d0 <HAL_UART_Transmit+0x14>

08002688 <HAL_UART_Receive>:
{
 8002688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8002690:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	d003      	beq.n	80026a2 <HAL_UART_Receive+0x1a>
    return HAL_BUSY;
 800269a:	2002      	movs	r0, #2
}
 800269c:	b002      	add	sp, #8
 800269e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026a2:	4604      	mov	r4, r0
 80026a4:	460d      	mov	r5, r1
 80026a6:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	bf18      	it	ne
 80026ac:	2900      	cmpne	r1, #0
 80026ae:	d06d      	beq.n	800278c <HAL_UART_Receive+0x104>
    __HAL_LOCK(huart);
 80026b0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_UART_Receive+0x34>
 80026b8:	2002      	movs	r0, #2
 80026ba:	e7ef      	b.n	800269c <HAL_UART_Receive+0x14>
 80026bc:	2301      	movs	r3, #1
 80026be:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026c6:	2322      	movs	r3, #34	; 0x22
 80026c8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 80026cc:	f7fd ffce 	bl	800066c <HAL_GetTick>
 80026d0:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80026d2:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 80026d6:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80026da:	68a3      	ldr	r3, [r4, #8]
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e0:	d006      	beq.n	80026f0 <HAL_UART_Receive+0x68>
 80026e2:	b9a3      	cbnz	r3, 800270e <HAL_UART_Receive+0x86>
 80026e4:	6923      	ldr	r3, [r4, #16]
 80026e6:	b973      	cbnz	r3, 8002706 <HAL_UART_Receive+0x7e>
 80026e8:	23ff      	movs	r3, #255	; 0xff
 80026ea:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80026ee:	e011      	b.n	8002714 <HAL_UART_Receive+0x8c>
 80026f0:	6923      	ldr	r3, [r4, #16]
 80026f2:	b923      	cbnz	r3, 80026fe <HAL_UART_Receive+0x76>
 80026f4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80026f8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80026fc:	e00a      	b.n	8002714 <HAL_UART_Receive+0x8c>
 80026fe:	23ff      	movs	r3, #255	; 0xff
 8002700:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8002704:	e006      	b.n	8002714 <HAL_UART_Receive+0x8c>
 8002706:	237f      	movs	r3, #127	; 0x7f
 8002708:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800270c:	e002      	b.n	8002714 <HAL_UART_Receive+0x8c>
 800270e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002712:	d002      	beq.n	800271a <HAL_UART_Receive+0x92>
    uhMask = huart->Mask;
 8002714:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8002718:	e010      	b.n	800273c <HAL_UART_Receive+0xb4>
    UART_MASK_COMPUTATION(huart);
 800271a:	6923      	ldr	r3, [r4, #16]
 800271c:	b91b      	cbnz	r3, 8002726 <HAL_UART_Receive+0x9e>
 800271e:	237f      	movs	r3, #127	; 0x7f
 8002720:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8002724:	e7f6      	b.n	8002714 <HAL_UART_Receive+0x8c>
 8002726:	233f      	movs	r3, #63	; 0x3f
 8002728:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800272c:	e7f2      	b.n	8002714 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002732:	fa5f f388 	uxtb.w	r3, r8
 8002736:	4013      	ands	r3, r2
 8002738:	702b      	strb	r3, [r5, #0]
 800273a:	3501      	adds	r5, #1
    while(huart->RxXferCount > 0U)
 800273c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002740:	b29b      	uxth	r3, r3
 8002742:	b1e3      	cbz	r3, 800277e <HAL_UART_Receive+0xf6>
      huart->RxXferCount--;
 8002744:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29b      	uxth	r3, r3
 800274e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002752:	9600      	str	r6, [sp, #0]
 8002754:	463b      	mov	r3, r7
 8002756:	2200      	movs	r2, #0
 8002758:	2120      	movs	r1, #32
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff fefc 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 8002760:	b9b0      	cbnz	r0, 8002790 <HAL_UART_Receive+0x108>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002762:	68a3      	ldr	r3, [r4, #8]
 8002764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002768:	d1e1      	bne.n	800272e <HAL_UART_Receive+0xa6>
 800276a:	6923      	ldr	r3, [r4, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1de      	bne.n	800272e <HAL_UART_Receive+0xa6>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	ea08 0303 	and.w	r3, r8, r3
 8002778:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 800277c:	e7de      	b.n	800273c <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 800277e:	2320      	movs	r3, #32
 8002780:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8002784:	2000      	movs	r0, #0
 8002786:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800278a:	e787      	b.n	800269c <HAL_UART_Receive+0x14>
      return  HAL_ERROR;
 800278c:	2001      	movs	r0, #1
 800278e:	e785      	b.n	800269c <HAL_UART_Receive+0x14>
        return HAL_TIMEOUT;
 8002790:	2003      	movs	r0, #3
 8002792:	e783      	b.n	800269c <HAL_UART_Receive+0x14>

08002794 <UART_EndTransmit_IT>:
{
 8002794:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002796:	6801      	ldr	r1, [r0, #0]
 8002798:	680b      	ldr	r3, [r1, #0]
 800279a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800279e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80027a0:	2320      	movs	r3, #32
 80027a2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80027a6:	f001 f928 	bl	80039fa <HAL_UART_TxCpltCallback>
}
 80027aa:	2000      	movs	r0, #0
 80027ac:	bd08      	pop	{r3, pc}

080027ae <UART_Receive_IT>:
{
 80027ae:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80027b0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027b4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b22      	cmp	r3, #34	; 0x22
 80027bc:	d006      	beq.n	80027cc <UART_Receive_IT+0x1e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80027be:	6802      	ldr	r2, [r0, #0]
 80027c0:	6993      	ldr	r3, [r2, #24]
 80027c2:	f043 0308 	orr.w	r3, r3, #8
 80027c6:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 80027c8:	2002      	movs	r0, #2
 80027ca:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027cc:	6883      	ldr	r3, [r0, #8]
 80027ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d2:	d011      	beq.n	80027f8 <UART_Receive_IT+0x4a>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	6541      	str	r1, [r0, #84]	; 0x54
 80027da:	6801      	ldr	r1, [r0, #0]
 80027dc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	400a      	ands	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 80027e4:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80027f2:	b16b      	cbz	r3, 8002810 <UART_Receive_IT+0x62>
    return HAL_OK;
 80027f4:	2000      	movs	r0, #0
}
 80027f6:	bd08      	pop	{r3, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f8:	6903      	ldr	r3, [r0, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1ea      	bne.n	80027d4 <UART_Receive_IT+0x26>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80027fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002800:	6801      	ldr	r1, [r0, #0]
 8002802:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002804:	400a      	ands	r2, r1
 8002806:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 8002808:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800280a:	3302      	adds	r3, #2
 800280c:	6543      	str	r3, [r0, #84]	; 0x54
 800280e:	e7e9      	b.n	80027e4 <UART_Receive_IT+0x36>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002810:	6802      	ldr	r2, [r0, #0]
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002818:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281a:	6802      	ldr	r2, [r0, #0]
 800281c:	6893      	ldr	r3, [r2, #8]
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002824:	2320      	movs	r3, #32
 8002826:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800282a:	f001 f8e5 	bl	80039f8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800282e:	2000      	movs	r0, #0
 8002830:	bd08      	pop	{r3, pc}
	...

08002834 <HAL_UART_IRQHandler>:
{
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002838:	6802      	ldr	r2, [r0, #0]
 800283a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800283c:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800283e:	6891      	ldr	r1, [r2, #8]
  if (errorflags == RESET)
 8002840:	f013 050f 	ands.w	r5, r3, #15
 8002844:	d105      	bne.n	8002852 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002846:	f013 0f20 	tst.w	r3, #32
 800284a:	d002      	beq.n	8002852 <HAL_UART_IRQHandler+0x1e>
 800284c:	f010 0f20 	tst.w	r0, #32
 8002850:	d15f      	bne.n	8002912 <HAL_UART_IRQHandler+0xde>
  if(   (errorflags != RESET)
 8002852:	2d00      	cmp	r5, #0
 8002854:	d073      	beq.n	800293e <HAL_UART_IRQHandler+0x10a>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002856:	f011 0101 	ands.w	r1, r1, #1
 800285a:	d102      	bne.n	8002862 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800285c:	f410 7f90 	tst.w	r0, #288	; 0x120
 8002860:	d06d      	beq.n	800293e <HAL_UART_IRQHandler+0x10a>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002862:	f013 0f01 	tst.w	r3, #1
 8002866:	d007      	beq.n	8002878 <HAL_UART_IRQHandler+0x44>
 8002868:	f410 7f80 	tst.w	r0, #256	; 0x100
 800286c:	d004      	beq.n	8002878 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800286e:	2501      	movs	r5, #1
 8002870:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002872:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002874:	432a      	orrs	r2, r5
 8002876:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002878:	f013 0f02 	tst.w	r3, #2
 800287c:	d007      	beq.n	800288e <HAL_UART_IRQHandler+0x5a>
 800287e:	b131      	cbz	r1, 800288e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	2502      	movs	r5, #2
 8002884:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002886:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002888:	f042 0204 	orr.w	r2, r2, #4
 800288c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800288e:	f013 0f04 	tst.w	r3, #4
 8002892:	d007      	beq.n	80028a4 <HAL_UART_IRQHandler+0x70>
 8002894:	b131      	cbz	r1, 80028a4 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002896:	6822      	ldr	r2, [r4, #0]
 8002898:	2504      	movs	r5, #4
 800289a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800289c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800289e:	f042 0202 	orr.w	r2, r2, #2
 80028a2:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80028a4:	f013 0f08 	tst.w	r3, #8
 80028a8:	d009      	beq.n	80028be <HAL_UART_IRQHandler+0x8a>
 80028aa:	f010 0f20 	tst.w	r0, #32
 80028ae:	d100      	bne.n	80028b2 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028b0:	b129      	cbz	r1, 80028be <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80028b2:	6822      	ldr	r2, [r4, #0]
 80028b4:	2108      	movs	r1, #8
 80028b6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028b8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80028ba:	430a      	orrs	r2, r1
 80028bc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028be:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80028c0:	2a00      	cmp	r2, #0
 80028c2:	d048      	beq.n	8002956 <HAL_UART_IRQHandler+0x122>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028c4:	f013 0f20 	tst.w	r3, #32
 80028c8:	d002      	beq.n	80028d0 <HAL_UART_IRQHandler+0x9c>
 80028ca:	f010 0f20 	tst.w	r0, #32
 80028ce:	d124      	bne.n	800291a <HAL_UART_IRQHandler+0xe6>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80028d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80028d2:	f013 0f08 	tst.w	r3, #8
 80028d6:	d104      	bne.n	80028e2 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80028dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80028e0:	d027      	beq.n	8002932 <HAL_UART_IRQHandler+0xfe>
        UART_EndRxTransfer(huart);
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff fe0b 	bl	80024fe <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028f0:	d01b      	beq.n	800292a <HAL_UART_IRQHandler+0xf6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f8:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80028fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028fc:	b18b      	cbz	r3, 8002922 <HAL_UART_IRQHandler+0xee>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_UART_IRQHandler+0x134>)
 8002900:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002902:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002904:	f7fe f8bf 	bl	8000a86 <HAL_DMA_Abort_IT>
 8002908:	b328      	cbz	r0, 8002956 <HAL_UART_IRQHandler+0x122>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800290c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800290e:	4798      	blx	r3
 8002910:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002912:	4620      	mov	r0, r4
 8002914:	f7ff ff4b 	bl	80027ae <UART_Receive_IT>
      return;
 8002918:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff ff47 	bl	80027ae <UART_Receive_IT>
 8002920:	e7d6      	b.n	80028d0 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002922:	4620      	mov	r0, r4
 8002924:	f001 f86a 	bl	80039fc <HAL_UART_ErrorCallback>
 8002928:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 800292a:	4620      	mov	r0, r4
 800292c:	f001 f866 	bl	80039fc <HAL_UART_ErrorCallback>
 8002930:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002932:	4620      	mov	r0, r4
 8002934:	f001 f862 	bl	80039fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	2300      	movs	r3, #0
 800293a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800293c:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800293e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002942:	d002      	beq.n	800294a <HAL_UART_IRQHandler+0x116>
 8002944:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002948:	d106      	bne.n	8002958 <HAL_UART_IRQHandler+0x124>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800294a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800294e:	d002      	beq.n	8002956 <HAL_UART_IRQHandler+0x122>
 8002950:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002954:	d104      	bne.n	8002960 <HAL_UART_IRQHandler+0x12c>
 8002956:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff fd99 	bl	8002490 <UART_Transmit_IT>
    return;
 800295e:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff ff17 	bl	8002794 <UART_EndTransmit_IT>
    return;
 8002966:	e7f6      	b.n	8002956 <HAL_UART_IRQHandler+0x122>
 8002968:	0800296d 	.word	0x0800296d

0800296c <UART_DMAAbortOnError>:
{
 800296c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800296e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002976:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800297a:	f001 f83f 	bl	80039fc <HAL_UART_ErrorCallback>
 800297e:	bd08      	pop	{r3, pc}

08002980 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002980:	b538      	push	{r3, r4, r5, lr}
 8002982:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002984:	6883      	ldr	r3, [r0, #8]
 8002986:	6902      	ldr	r2, [r0, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	6942      	ldr	r2, [r0, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	69c2      	ldr	r2, [r0, #28]
 8002990:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002992:	6801      	ldr	r1, [r0, #0]
 8002994:	6808      	ldr	r0, [r1, #0]
 8002996:	4aa0      	ldr	r2, [pc, #640]	; (8002c18 <UART_SetConfig+0x298>)
 8002998:	4002      	ands	r2, r0
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	6853      	ldr	r3, [r2, #4]
 80029a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029a6:	68e1      	ldr	r1, [r4, #12]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80029ac:	69a3      	ldr	r3, [r4, #24]
 80029ae:	6a22      	ldr	r2, [r4, #32]
 80029b0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80029b2:	6821      	ldr	r1, [r4, #0]
 80029b4:	688a      	ldr	r2, [r1, #8]
 80029b6:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029be:	6825      	ldr	r5, [r4, #0]
 80029c0:	4b96      	ldr	r3, [pc, #600]	; (8002c1c <UART_SetConfig+0x29c>)
 80029c2:	429d      	cmp	r5, r3
 80029c4:	d02b      	beq.n	8002a1e <UART_SetConfig+0x9e>
 80029c6:	4b96      	ldr	r3, [pc, #600]	; (8002c20 <UART_SetConfig+0x2a0>)
 80029c8:	429d      	cmp	r5, r3
 80029ca:	d03c      	beq.n	8002a46 <UART_SetConfig+0xc6>
 80029cc:	4b95      	ldr	r3, [pc, #596]	; (8002c24 <UART_SetConfig+0x2a4>)
 80029ce:	429d      	cmp	r5, r3
 80029d0:	d052      	beq.n	8002a78 <UART_SetConfig+0xf8>
 80029d2:	4b95      	ldr	r3, [pc, #596]	; (8002c28 <UART_SetConfig+0x2a8>)
 80029d4:	429d      	cmp	r5, r3
 80029d6:	d067      	beq.n	8002aa8 <UART_SetConfig+0x128>
 80029d8:	4b94      	ldr	r3, [pc, #592]	; (8002c2c <UART_SetConfig+0x2ac>)
 80029da:	429d      	cmp	r5, r3
 80029dc:	d07c      	beq.n	8002ad8 <UART_SetConfig+0x158>
 80029de:	4b94      	ldr	r3, [pc, #592]	; (8002c30 <UART_SetConfig+0x2b0>)
 80029e0:	429d      	cmp	r5, r3
 80029e2:	f000 8094 	beq.w	8002b0e <UART_SetConfig+0x18e>
 80029e6:	4b93      	ldr	r3, [pc, #588]	; (8002c34 <UART_SetConfig+0x2b4>)
 80029e8:	429d      	cmp	r5, r3
 80029ea:	f000 80ab 	beq.w	8002b44 <UART_SetConfig+0x1c4>
 80029ee:	4b92      	ldr	r3, [pc, #584]	; (8002c38 <UART_SetConfig+0x2b8>)
 80029f0:	429d      	cmp	r5, r3
 80029f2:	f000 80c2 	beq.w	8002b7a <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80029f6:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029f8:	69e2      	ldr	r2, [r4, #28]
 80029fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80029fe:	f000 80db 	beq.w	8002bb8 <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	f200 8168 	bhi.w	8002cd8 <UART_SetConfig+0x358>
 8002a08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a0c:	013c0131 	.word	0x013c0131
 8002a10:	01660147 	.word	0x01660147
 8002a14:	01660151 	.word	0x01660151
 8002a18:	01660166 	.word	0x01660166
 8002a1c:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a1e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d803      	bhi.n	8002a36 <UART_SetConfig+0xb6>
 8002a2e:	e8df f003 	tbb	[pc, r3]
 8002a32:	06bf      	.short	0x06bf
 8002a34:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002a36:	2310      	movs	r3, #16
 8002a38:	e7de      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e7dc      	b.n	80029f8 <UART_SetConfig+0x78>
 8002a3e:	2304      	movs	r3, #4
 8002a40:	e7da      	b.n	80029f8 <UART_SetConfig+0x78>
 8002a42:	2308      	movs	r3, #8
 8002a44:	e7d8      	b.n	80029f8 <UART_SetConfig+0x78>
 8002a46:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d808      	bhi.n	8002a68 <UART_SetConfig+0xe8>
 8002a56:	e8df f003 	tbb	[pc, r3]
 8002a5a:	07ad      	.short	0x07ad
 8002a5c:	070b0707 	.word	0x070b0707
 8002a60:	07090707 	.word	0x07090707
 8002a64:	0707      	.short	0x0707
 8002a66:	0d          	.byte	0x0d
 8002a67:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002a68:	2310      	movs	r3, #16
 8002a6a:	e7c5      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e7c3      	b.n	80029f8 <UART_SetConfig+0x78>
 8002a70:	2304      	movs	r3, #4
 8002a72:	e7c1      	b.n	80029f8 <UART_SetConfig+0x78>
 8002a74:	2308      	movs	r3, #8
 8002a76:	e7bf      	b.n	80029f8 <UART_SetConfig+0x78>
 8002a78:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d00d      	beq.n	8002aa4 <UART_SetConfig+0x124>
 8002a88:	d905      	bls.n	8002a96 <UART_SetConfig+0x116>
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d008      	beq.n	8002aa0 <UART_SetConfig+0x120>
 8002a8e:	2b30      	cmp	r3, #48	; 0x30
 8002a90:	d104      	bne.n	8002a9c <UART_SetConfig+0x11c>
 8002a92:	2308      	movs	r3, #8
 8002a94:	e7b0      	b.n	80029f8 <UART_SetConfig+0x78>
 8002a96:	b90b      	cbnz	r3, 8002a9c <UART_SetConfig+0x11c>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e7ad      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	e7ab      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e7a9      	b.n	80029f8 <UART_SetConfig+0x78>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	e7a7      	b.n	80029f8 <UART_SetConfig+0x78>
 8002aa8:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d00d      	beq.n	8002ad4 <UART_SetConfig+0x154>
 8002ab8:	d905      	bls.n	8002ac6 <UART_SetConfig+0x146>
 8002aba:	2b80      	cmp	r3, #128	; 0x80
 8002abc:	d008      	beq.n	8002ad0 <UART_SetConfig+0x150>
 8002abe:	2bc0      	cmp	r3, #192	; 0xc0
 8002ac0:	d104      	bne.n	8002acc <UART_SetConfig+0x14c>
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	e798      	b.n	80029f8 <UART_SetConfig+0x78>
 8002ac6:	b90b      	cbnz	r3, 8002acc <UART_SetConfig+0x14c>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e795      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002acc:	2310      	movs	r3, #16
 8002ace:	e793      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e791      	b.n	80029f8 <UART_SetConfig+0x78>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e78f      	b.n	80029f8 <UART_SetConfig+0x78>
 8002ad8:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae8:	d00f      	beq.n	8002b0a <UART_SetConfig+0x18a>
 8002aea:	d907      	bls.n	8002afc <UART_SetConfig+0x17c>
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d009      	beq.n	8002b06 <UART_SetConfig+0x186>
 8002af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af6:	d104      	bne.n	8002b02 <UART_SetConfig+0x182>
 8002af8:	2308      	movs	r3, #8
 8002afa:	e77d      	b.n	80029f8 <UART_SetConfig+0x78>
 8002afc:	b90b      	cbnz	r3, 8002b02 <UART_SetConfig+0x182>
 8002afe:	2300      	movs	r3, #0
 8002b00:	e77a      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002b02:	2310      	movs	r3, #16
 8002b04:	e778      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b06:	2302      	movs	r3, #2
 8002b08:	e776      	b.n	80029f8 <UART_SetConfig+0x78>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e774      	b.n	80029f8 <UART_SetConfig+0x78>
 8002b0e:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1e:	d00f      	beq.n	8002b40 <UART_SetConfig+0x1c0>
 8002b20:	d907      	bls.n	8002b32 <UART_SetConfig+0x1b2>
 8002b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b26:	d009      	beq.n	8002b3c <UART_SetConfig+0x1bc>
 8002b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b2c:	d104      	bne.n	8002b38 <UART_SetConfig+0x1b8>
 8002b2e:	2308      	movs	r3, #8
 8002b30:	e762      	b.n	80029f8 <UART_SetConfig+0x78>
 8002b32:	b90b      	cbnz	r3, 8002b38 <UART_SetConfig+0x1b8>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e75f      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002b38:	2310      	movs	r3, #16
 8002b3a:	e75d      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e75b      	b.n	80029f8 <UART_SetConfig+0x78>
 8002b40:	2304      	movs	r3, #4
 8002b42:	e759      	b.n	80029f8 <UART_SetConfig+0x78>
 8002b44:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	d00f      	beq.n	8002b76 <UART_SetConfig+0x1f6>
 8002b56:	d907      	bls.n	8002b68 <UART_SetConfig+0x1e8>
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d009      	beq.n	8002b72 <UART_SetConfig+0x1f2>
 8002b5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b62:	d104      	bne.n	8002b6e <UART_SetConfig+0x1ee>
 8002b64:	2308      	movs	r3, #8
 8002b66:	e747      	b.n	80029f8 <UART_SetConfig+0x78>
 8002b68:	b90b      	cbnz	r3, 8002b6e <UART_SetConfig+0x1ee>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e744      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002b6e:	2310      	movs	r3, #16
 8002b70:	e742      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b72:	2302      	movs	r3, #2
 8002b74:	e740      	b.n	80029f8 <UART_SetConfig+0x78>
 8002b76:	2304      	movs	r3, #4
 8002b78:	e73e      	b.n	80029f8 <UART_SetConfig+0x78>
 8002b7a:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b8a:	d00f      	beq.n	8002bac <UART_SetConfig+0x22c>
 8002b8c:	d907      	bls.n	8002b9e <UART_SetConfig+0x21e>
 8002b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b92:	d009      	beq.n	8002ba8 <UART_SetConfig+0x228>
 8002b94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b98:	d104      	bne.n	8002ba4 <UART_SetConfig+0x224>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	e72c      	b.n	80029f8 <UART_SetConfig+0x78>
 8002b9e:	b90b      	cbnz	r3, 8002ba4 <UART_SetConfig+0x224>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e729      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	e727      	b.n	80029f8 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e725      	b.n	80029f8 <UART_SetConfig+0x78>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e723      	b.n	80029f8 <UART_SetConfig+0x78>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e721      	b.n	80029f8 <UART_SetConfig+0x78>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e71f      	b.n	80029f8 <UART_SetConfig+0x78>
    switch (clocksource)
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d855      	bhi.n	8002c68 <UART_SetConfig+0x2e8>
 8002bbc:	e8df f003 	tbb	[pc, r3]
 8002bc0:	54221705 	.word	0x54221705
 8002bc4:	54545440 	.word	0x54545440
 8002bc8:	4b          	.byte	0x4b
 8002bc9:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bca:	f7fe fdf1 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 8002bce:	6862      	ldr	r2, [r4, #4]
 8002bd0:	0853      	lsrs	r3, r2, #1
 8002bd2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bda:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bdc:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002bde:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002be2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002be6:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	60d3      	str	r3, [r2, #12]
 8002bec:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002bee:	f7fe fdef 	bl	80017d0 <HAL_RCC_GetPCLK2Freq>
 8002bf2:	6862      	ldr	r2, [r4, #4]
 8002bf4:	0853      	lsrs	r3, r2, #1
 8002bf6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bfe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c00:	2000      	movs	r0, #0
      break;
 8002c02:	e7ec      	b.n	8002bde <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c04:	6862      	ldr	r2, [r4, #4]
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <UART_SetConfig+0x2bc>)
 8002c08:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c10:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c12:	2000      	movs	r0, #0
      break;
 8002c14:	e7e3      	b.n	8002bde <UART_SetConfig+0x25e>
 8002c16:	bf00      	nop
 8002c18:	efff69f3 	.word	0xefff69f3
 8002c1c:	40011000 	.word	0x40011000
 8002c20:	40004400 	.word	0x40004400
 8002c24:	40004800 	.word	0x40004800
 8002c28:	40004c00 	.word	0x40004c00
 8002c2c:	40005000 	.word	0x40005000
 8002c30:	40011400 	.word	0x40011400
 8002c34:	40007800 	.word	0x40007800
 8002c38:	40007c00 	.word	0x40007c00
 8002c3c:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c40:	f7fe fc94 	bl	800156c <HAL_RCC_GetSysClockFreq>
 8002c44:	6862      	ldr	r2, [r4, #4]
 8002c46:	0853      	lsrs	r3, r2, #1
 8002c48:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c50:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c52:	2000      	movs	r0, #0
      break;
 8002c54:	e7c3      	b.n	8002bde <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c56:	6862      	ldr	r2, [r4, #4]
 8002c58:	0853      	lsrs	r3, r2, #1
 8002c5a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c62:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c64:	2000      	movs	r0, #0
      break;
 8002c66:	e7ba      	b.n	8002bde <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8002c68:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e7b7      	b.n	8002bde <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c6e:	f7fe fd9f 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 8002c72:	6863      	ldr	r3, [r4, #4]
 8002c74:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c78:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c7c:	b280      	uxth	r0, r0
 8002c7e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c80:	2000      	movs	r0, #0
      break;
 8002c82:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c84:	f7fe fda4 	bl	80017d0 <HAL_RCC_GetPCLK2Freq>
 8002c88:	6863      	ldr	r3, [r4, #4]
 8002c8a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c92:	b280      	uxth	r0, r0
 8002c94:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c96:	2000      	movs	r0, #0
      break;
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c9a:	6862      	ldr	r2, [r4, #4]
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <UART_SetConfig+0x35c>)
 8002c9e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002caa:	2000      	movs	r0, #0
      break;
 8002cac:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cae:	f7fe fc5d 	bl	800156c <HAL_RCC_GetSysClockFreq>
 8002cb2:	6863      	ldr	r3, [r4, #4]
 8002cb4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002cb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cbc:	b280      	uxth	r0, r0
 8002cbe:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc0:	2000      	movs	r0, #0
      break;
 8002cc2:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002cc4:	6862      	ldr	r2, [r4, #4]
 8002cc6:	0853      	lsrs	r3, r2, #1
 8002cc8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cd4:	2000      	movs	r0, #0
      break;
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002cd8:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002cda:	bd38      	pop	{r3, r4, r5, pc}
 8002cdc:	00f42400 	.word	0x00f42400

08002ce0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ce0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ce2:	f013 0f01 	tst.w	r3, #1
 8002ce6:	d006      	beq.n	8002cf6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ce8:	6802      	ldr	r2, [r0, #0]
 8002cea:	6853      	ldr	r3, [r2, #4]
 8002cec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002cf0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cf6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cf8:	f013 0f02 	tst.w	r3, #2
 8002cfc:	d006      	beq.n	8002d0c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cfe:	6802      	ldr	r2, [r0, #0]
 8002d00:	6853      	ldr	r3, [r2, #4]
 8002d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d06:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d0e:	f013 0f04 	tst.w	r3, #4
 8002d12:	d006      	beq.n	8002d22 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d14:	6802      	ldr	r2, [r0, #0]
 8002d16:	6853      	ldr	r3, [r2, #4]
 8002d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d24:	f013 0f08 	tst.w	r3, #8
 8002d28:	d006      	beq.n	8002d38 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d2a:	6802      	ldr	r2, [r0, #0]
 8002d2c:	6853      	ldr	r3, [r2, #4]
 8002d2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d32:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d3a:	f013 0f10 	tst.w	r3, #16
 8002d3e:	d006      	beq.n	8002d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d40:	6802      	ldr	r2, [r0, #0]
 8002d42:	6893      	ldr	r3, [r2, #8]
 8002d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d48:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d50:	f013 0f20 	tst.w	r3, #32
 8002d54:	d006      	beq.n	8002d64 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d56:	6802      	ldr	r2, [r0, #0]
 8002d58:	6893      	ldr	r3, [r2, #8]
 8002d5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d5e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d6a:	d00a      	beq.n	8002d82 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d6c:	6802      	ldr	r2, [r0, #0]
 8002d6e:	6853      	ldr	r3, [r2, #4]
 8002d70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d74:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002d76:	430b      	orrs	r3, r1
 8002d78:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d80:	d00b      	beq.n	8002d9a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d82:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d88:	d006      	beq.n	8002d98 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d8a:	6802      	ldr	r2, [r0, #0]
 8002d8c:	6853      	ldr	r3, [r2, #4]
 8002d8e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002d92:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6053      	str	r3, [r2, #4]
 8002d98:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d9a:	6802      	ldr	r2, [r0, #0]
 8002d9c:	6853      	ldr	r3, [r2, #4]
 8002d9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002da2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6053      	str	r3, [r2, #4]
 8002da8:	e7eb      	b.n	8002d82 <UART_AdvFeatureConfig+0xa2>

08002daa <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002daa:	b510      	push	{r4, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002db4:	f7fd fc5a 	bl	800066c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	f012 0f08 	tst.w	r2, #8
 8002dc0:	d109      	bne.n	8002dd6 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8002dc8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2200      	movs	r2, #0
 8002de0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7ff fbb7 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d0e9      	beq.n	8002dc2 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002dee:	2003      	movs	r0, #3
 8002df0:	e7ef      	b.n	8002dd2 <UART_CheckIdleState+0x28>

08002df2 <HAL_UART_Init>:
  if(huart == NULL)
 8002df2:	b378      	cbz	r0, 8002e54 <HAL_UART_Init+0x62>
{
 8002df4:	b510      	push	{r4, lr}
 8002df6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002df8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002dfc:	b30b      	cbz	r3, 8002e42 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002dfe:	2324      	movs	r3, #36	; 0x24
 8002e00:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002e04:	6822      	ldr	r2, [r4, #0]
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f7ff fdb6 	bl	8002980 <UART_SetConfig>
 8002e14:	2801      	cmp	r0, #1
 8002e16:	d01f      	beq.n	8002e58 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e1a:	b9bb      	cbnz	r3, 8002e4c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1c:	6822      	ldr	r2, [r4, #0]
 8002e1e:	6853      	ldr	r3, [r2, #4]
 8002e20:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002e24:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	6893      	ldr	r3, [r2, #8]
 8002e2a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002e2e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff ffb5 	bl	8002daa <UART_CheckIdleState>
 8002e40:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002e42:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002e46:	f001 f86b 	bl	8003f20 <HAL_UART_MspInit>
 8002e4a:	e7d8      	b.n	8002dfe <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff ff47 	bl	8002ce0 <UART_AdvFeatureConfig>
 8002e52:	e7e3      	b.n	8002e1c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002e54:	2001      	movs	r0, #1
 8002e56:	4770      	bx	lr
}
 8002e58:	bd10      	pop	{r4, pc}
	...

08002e5c <Set_UartMsgHandle>:
/* Private Function ------------------------------------------------------------------*/

void Set_UartMsgHandle(UART_HandleTypeDef *UART_MsgHandle)
{

	UartMsgHandle = UART_MsgHandle;
 8002e5c:	4b01      	ldr	r3, [pc, #4]	; (8002e64 <Set_UartMsgHandle+0x8>)
 8002e5e:	6018      	str	r0, [r3, #0]
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000134 	.word	0x20000134

08002e68 <UART_DMA_Init>:

DMA_HandleTypeDef DMA_UART_RX;
DMA_HandleTypeDef DMA_WIFI_UART;

void UART_DMA_Init(void)
{
 8002e68:	b500      	push	{lr}
 8002e6a:	b083      	sub	sp, #12

  /*## -1- Enable DMA clock #################################################*/
  CONSOLE_UART_DMAx_CLK_ENABLE();
 8002e6c:	4b48      	ldr	r3, [pc, #288]	; (8002f90 <UART_DMA_Init+0x128>)
 8002e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e70:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	9b00      	ldr	r3, [sp, #0]
#ifdef USE_STM32F7XX_NUCLEO
  /*##-2- Select the DMA functional Parameters ###############################*/
  DMA_UART_RX.Init.Channel = WIFI_CONSOLE_DMA_CHANNEL;
 8002e80:	4844      	ldr	r0, [pc, #272]	; (8002f94 <UART_DMA_Init+0x12c>)
 8002e82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e86:	6043      	str	r3, [r0, #4]
  DMA_UART_RX.Init.Direction = DMA_PERIPH_TO_MEMORY;          /* M2M transfer mode                */
 8002e88:	2300      	movs	r3, #0
 8002e8a:	6083      	str	r3, [r0, #8]
  DMA_UART_RX.Init.PeriphInc = DMA_PINC_DISABLE;               /* Peripheral increment mode Enable */
 8002e8c:	60c3      	str	r3, [r0, #12]
  DMA_UART_RX.Init.MemInc = DMA_MINC_DISABLE;                  /* Memory increment mode Enable     */
 8002e8e:	6103      	str	r3, [r0, #16]
  DMA_UART_RX.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE; /* Peripheral data alignment : Word */
 8002e90:	6143      	str	r3, [r0, #20]
  DMA_UART_RX.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;    /* memory data alignment : Word     */
 8002e92:	6183      	str	r3, [r0, #24]
  DMA_UART_RX.Init.Mode = DMA_NORMAL;                         // Normal DMA mode DMA_NORMAL, DMA_CIRCULAR, DMA_PFCTRL
 8002e94:	61c3      	str	r3, [r0, #28]
  DMA_UART_RX.Init.Priority = DMA_PRIORITY_MEDIUM;              /* priority level : DMA_PRIORITY_MEDIUM, DMA_PRIORITY_HIGH            */
 8002e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e9a:	6202      	str	r2, [r0, #32]
  DMA_UART_RX.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e9c:	6243      	str	r3, [r0, #36]	; 0x24
  DMA_UART_RX.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	6283      	str	r3, [r0, #40]	; 0x28
  DMA_UART_RX.Init.MemBurst = DMA_MBURST_INC4;
 8002ea2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002ea6:	62c3      	str	r3, [r0, #44]	; 0x2c
  DMA_UART_RX.Init.PeriphBurst = DMA_PBURST_INC4;
 8002ea8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eac:	6303      	str	r3, [r0, #48]	; 0x30

  /*##-3- Select the DMA instance to be used for the transfer : #*/
  DMA_UART_RX.Instance = WIFI_CONSOLE_DMA_STREAM;
 8002eae:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <UART_DMA_Init+0x130>)
 8002eb0:	6003      	str	r3, [r0, #0]

  /*##-3- Select the DMA instance to be used for the transfer */
  DMA_UART_RX.Instance = WIFI_CONSOLE_DMA_CHANNEL;
#endif
  /*##-4- Initialize the DMA stream ##########################################*/
  if (HAL_DMA_Init(&DMA_UART_RX) != HAL_OK)
 8002eb2:	f7fd fd4d 	bl	8000950 <HAL_DMA_Init>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d15e      	bne.n	8002f78 <UART_DMA_Init+0x110>
		_Error_Handler(__FILE__, __LINE__);
  }

  /*##-5- Configure NVIC for DMA transfer complete/error interrupts ##########*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(WIFI_CONSOLE_DMA_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	200c      	movs	r0, #12
 8002ec0:	f7fd fc00 	bl	80006c4 <HAL_NVIC_SetPriority>

  /* Enable the DMA Channel global Interrupt */
  HAL_NVIC_EnableIRQ(WIFI_CONSOLE_DMA_IRQn);
 8002ec4:	200c      	movs	r0, #12
 8002ec6:	f7fd fc2d 	bl	8000724 <HAL_NVIC_EnableIRQ>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8002eca:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <UART_DMA_Init+0x130>)
 8002ecc:	4a33      	ldr	r2, [pc, #204]	; (8002f9c <UART_DMA_Init+0x134>)
 8002ece:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8002ed0:	4a33      	ldr	r2, [pc, #204]	; (8002fa0 <UART_DMA_Init+0x138>)
 8002ed2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	4a33      	ldr	r2, [pc, #204]	; (8002fa4 <UART_DMA_Init+0x13c>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f042 0210 	orr.w	r2, r2, #16
 8002ee6:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
#endif
#endif

//================================================================================================
  /*## -1- Enable DMA clock #################################################*/
  WIFI_UART_DMAx_CLK_ENABLE();
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <UART_DMA_Init+0x128>)
 8002ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	9b01      	ldr	r3, [sp, #4]
#ifdef USE_STM32F7XX_NUCLEO
  /*##-2- Select the DMA functional Parameters ###############################*/
  DMA_WIFI_UART.Init.Channel = WIFI_UART_DMA_CHANNEL;
 8002f04:	4828      	ldr	r0, [pc, #160]	; (8002fa8 <UART_DMA_Init+0x140>)
 8002f06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f0a:	6043      	str	r3, [r0, #4]
  DMA_WIFI_UART.Init.Direction = DMA_PERIPH_TO_MEMORY;          /* M2M transfer mode                */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6083      	str	r3, [r0, #8]
  DMA_WIFI_UART.Init.PeriphInc = DMA_PINC_DISABLE;               /* Peripheral increment mode Enable */
 8002f10:	60c3      	str	r3, [r0, #12]
  DMA_WIFI_UART.Init.MemInc = DMA_MINC_DISABLE;                  /* Memory increment mode Enable     */
 8002f12:	6103      	str	r3, [r0, #16]
  DMA_WIFI_UART.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE; /* Peripheral data alignment : Word */
 8002f14:	6143      	str	r3, [r0, #20]
  DMA_WIFI_UART.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;    /* memory data alignment : Word     */
 8002f16:	6183      	str	r3, [r0, #24]
  DMA_WIFI_UART.Init.Mode = DMA_NORMAL;                         // Normal DMA mode DMA_NORMAL, DMA_CIRCULAR, DMA_PFCTRL
 8002f18:	61c3      	str	r3, [r0, #28]
  DMA_WIFI_UART.Init.Priority = DMA_PRIORITY_MEDIUM;              /* priority level : DMA_PRIORITY_MEDIUM, DMA_PRIORITY_HIGH            */
 8002f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f1e:	6202      	str	r2, [r0, #32]
  DMA_WIFI_UART.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f20:	6243      	str	r3, [r0, #36]	; 0x24
  DMA_WIFI_UART.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f22:	2303      	movs	r3, #3
 8002f24:	6283      	str	r3, [r0, #40]	; 0x28
  DMA_WIFI_UART.Init.MemBurst = DMA_MBURST_INC4;
 8002f26:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002f2a:	62c3      	str	r3, [r0, #44]	; 0x2c
  DMA_WIFI_UART.Init.PeriphBurst = DMA_PBURST_INC4;
 8002f2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f30:	6303      	str	r3, [r0, #48]	; 0x30

  /*##-3- Select the DMA instance to be used for the transfer */
  DMA_WIFI_UART.Instance = WIFI_UART_DMA_STREAM;
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <UART_DMA_Init+0x144>)
 8002f34:	6003      	str	r3, [r0, #0]

  /*##-3- Select the DMA instance to be used for the transfer */
  DMA_WIFI_UART.Instance = WIFI_UART_DMA_CHANNEL;
#endif
  /*##-4- Initialize the DMA stream ##########################################*/
  if (HAL_DMA_Init(&DMA_WIFI_UART) != HAL_OK)
 8002f36:	f7fd fd0b 	bl	8000950 <HAL_DMA_Init>
 8002f3a:	bb10      	cbnz	r0, 8002f82 <UART_DMA_Init+0x11a>
		_Error_Handler(__FILE__, __LINE__);
  }

  /*##-5- Configure NVIC for DMA transfer complete/error interrupts ##########*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(WIFI_UART_DMA_IRQn, 0, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4611      	mov	r1, r2
 8002f40:	2010      	movs	r0, #16
 8002f42:	f7fd fbbf 	bl	80006c4 <HAL_NVIC_SetPriority>

  /* Enable the DMA Channel global Interrupt */
  HAL_NVIC_EnableIRQ(WIFI_UART_DMA_IRQn);
 8002f46:	2010      	movs	r0, #16
 8002f48:	f7fd fbec 	bl	8000724 <HAL_NVIC_EnableIRQ>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <UART_DMA_Init+0x144>)
 8002f4e:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <UART_DMA_Init+0x148>)
 8002f50:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <UART_DMA_Init+0x14c>)
 8002f54:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <UART_DMA_Init+0x13c>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	f042 0201 	orr.w	r2, r2, #1
 8002f60:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	f042 0210 	orr.w	r2, r2, #16
 8002f68:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
#endif
#ifdef USE_STM32L0XX_NUCLEO
  LL_DMA_EnableChannel(WIFI_UART_DMA, WIFI_UART_LL_DMA);
#endif
#endif
}
 8002f72:	b003      	add	sp, #12
 8002f74:	f85d fb04 	ldr.w	pc, [sp], #4
		_Error_Handler(__FILE__, __LINE__);
 8002f78:	21a9      	movs	r1, #169	; 0xa9
 8002f7a:	480f      	ldr	r0, [pc, #60]	; (8002fb8 <UART_DMA_Init+0x150>)
 8002f7c:	f000 fab0 	bl	80034e0 <_Error_Handler>
 8002f80:	e79b      	b.n	8002eba <UART_DMA_Init+0x52>
		_Error_Handler(__FILE__, __LINE__);
 8002f82:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002f86:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <UART_DMA_Init+0x150>)
 8002f88:	f000 faaa 	bl	80034e0 <_Error_Handler>
 8002f8c:	e7d6      	b.n	8002f3c <UART_DMA_Init+0xd4>
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	20001158 	.word	0x20001158
 8002f98:	40026028 	.word	0x40026028
 8002f9c:	40004824 	.word	0x40004824
 8002fa0:	20001338 	.word	0x20001338
 8002fa4:	ffff0000 	.word	0xffff0000
 8002fa8:	20001278 	.word	0x20001278
 8002fac:	40026088 	.word	0x40026088
 8002fb0:	40004424 	.word	0x40004424
 8002fb4:	2000040a 	.word	0x2000040a
 8002fb8:	08005404 	.word	0x08005404

08002fbc <DMA1_TransferComplete>:
void DMA1_TransferComplete()
{
  /* Process Locked */
	huart2.Lock = HAL_LOCKED;

	huart2.ErrorCode = HAL_UART_ERROR_NONE;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <DMA1_TransferComplete+0x48>)
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	66d9      	str	r1, [r3, #108]	; 0x6c
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart2.gState = HAL_UART_STATE_BUSY_TX;
 8002fc2:	2221      	movs	r2, #33	; 0x21
 8002fc4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#endif
	huart2.pTxBuffPtr = (uint8_t*) console_send_char;
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <DMA1_TransferComplete+0x4c>)
 8002fca:	64da      	str	r2, [r3, #76]	; 0x4c
	huart2.TxXferSize = 1;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	huart2.TxXferCount = 1;
 8002fd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
		huart2.State = HAL_UART_STATE_BUSY_TX;
    }
#endif
  // Process Unlocked
	huart2.Lock = HAL_UNLOCKED;
 8002fd6:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	6802      	ldr	r2, [r0, #0]
 8002fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fe2:	6002      	str	r2, [r0, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002fe4:	4a09      	ldr	r2, [pc, #36]	; (800300c <DMA1_TransferComplete+0x50>)
 8002fe6:	6810      	ldr	r0, [r2, #0]
 8002fe8:	f040 0010 	orr.w	r0, r0, #16
 8002fec:	6010      	str	r0, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002fee:	6810      	ldr	r0, [r2, #0]
 8002ff0:	f040 0001 	orr.w	r0, r0, #1
 8002ff4:	6010      	str	r0, [r2, #0]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8002ff6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ffa:	3a28      	subs	r2, #40	; 0x28
 8002ffc:	6090      	str	r0, [r2, #8]
  //LL_DMA_EnableChannel(WIFI_CONSOLE_DMA, WIFI_CONSOLE_LL_DMA);
#endif

#endif
  /* Process Unlocked */
	huart2.Lock = HAL_UNLOCKED;
 8002ffe:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
 8003002:	4770      	bx	lr
 8003004:	20000098 	.word	0x20000098
 8003008:	20001338 	.word	0x20001338
 800300c:	40026028 	.word	0x40026028

08003010 <DMA2_TransferComplete>:
void DMA2_TransferComplete()
{
    /* Process Locked */
	huart3.Lock = HAL_LOCKED;

	huart3.ErrorCode = HAL_UART_ERROR_NONE;
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <DMA2_TransferComplete+0x44>)
 8003012:	2200      	movs	r2, #0
 8003014:	66da      	str	r2, [r3, #108]	; 0x6c
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart3.gState = HAL_UART_STATE_BUSY_TX;
 8003016:	2121      	movs	r1, #33	; 0x21
 8003018:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
#endif
	huart3.pTxBuffPtr = (uint8_t*) WiFi_Counter_Variables.uart_byte;
 800301c:	490e      	ldr	r1, [pc, #56]	; (8003058 <DMA2_TransferComplete+0x48>)
 800301e:	64d9      	str	r1, [r3, #76]	; 0x4c
	huart3.TxXferSize = 1;
 8003020:	2101      	movs	r1, #1
 8003022:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
	huart3.TxXferCount = 1;
 8003026:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
    {
		huart3->State = HAL_UART_STATE_BUSY_TX;
    }
#endif
  // Process Unlocked
	huart3.Lock = HAL_UNLOCKED;
 800302a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	6013      	str	r3, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <DMA2_TransferComplete+0x4c>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	f042 0210 	orr.w	r2, r2, #16
 8003040:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8003048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800304c:	3b88      	subs	r3, #136	; 0x88
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20001074 	.word	0x20001074
 8003058:	2000040a 	.word	0x2000040a
 800305c:	40026088 	.word	0x40026088

08003060 <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 8003060:	b500      	push	{lr}
 8003062:	b083      	sub	sp, #12
 8003064:	a902      	add	r1, sp, #8
 8003066:	f841 0d04 	str.w	r0, [r1, #-4]!
	// HAL_UART_Transmit(UartHandle, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	2201      	movs	r2, #1
 8003070:	4803      	ldr	r0, [pc, #12]	; (8003080 <uartSendChar+0x20>)
 8003072:	f7ff faa3 	bl	80025bc <HAL_UART_Transmit>
  return ch;
}
 8003076:	9801      	ldr	r0, [sp, #4]
 8003078:	b003      	add	sp, #12
 800307a:	f85d fb04 	ldr.w	pc, [sp], #4
 800307e:	bf00      	nop
 8003080:	20001074 	.word	0x20001074

08003084 <uartReceiveChar>:
/** @brief Receives a character from serial port
 * @param None
 * @retval Character received
 */
int uartReceiveChar(void)
{
 8003084:	b500      	push	{lr}
 8003086:	b083      	sub	sp, #12
  uint8_t ch;
	// HAL_UART_Receive(UartHandle, &ch, 1, HAL_MAX_DELAY);
	HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);
 8003088:	f04f 33ff 	mov.w	r3, #4294967295
 800308c:	2201      	movs	r2, #1
 800308e:	f10d 0107 	add.w	r1, sp, #7
 8003092:	4810      	ldr	r0, [pc, #64]	; (80030d4 <uartReceiveChar+0x50>)
 8003094:	f7ff faf8 	bl	8002688 <HAL_UART_Receive>

  /* Echo character back to console */
  HAL_UART_Transmit(UartHandle, &ch, 1, HAL_MAX_DELAY);
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	2201      	movs	r2, #1
 800309e:	f10d 0107 	add.w	r1, sp, #7
 80030a2:	480d      	ldr	r0, [pc, #52]	; (80030d8 <uartReceiveChar+0x54>)
 80030a4:	6800      	ldr	r0, [r0, #0]
 80030a6:	f7ff fa89 	bl	80025bc <HAL_UART_Transmit>

  /* And cope with Windows */
  if(ch == '\r'){
 80030aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030ae:	2b0d      	cmp	r3, #13
 80030b0:	d004      	beq.n	80030bc <uartReceiveChar+0x38>
    uint8_t ret = '\n';
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
  }

  return ch;
}
 80030b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80030b6:	b003      	add	sp, #12
 80030b8:	f85d fb04 	ldr.w	pc, [sp], #4
    uint8_t ret = '\n';
 80030bc:	a902      	add	r1, sp, #8
 80030be:	230a      	movs	r3, #10
 80030c0:	f801 3d02 	strb.w	r3, [r1, #-2]!
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	2201      	movs	r2, #1
 80030ca:	4803      	ldr	r0, [pc, #12]	; (80030d8 <uartReceiveChar+0x54>)
 80030cc:	6800      	ldr	r0, [r0, #0]
 80030ce:	f7ff fa75 	bl	80025bc <HAL_UART_Transmit>
 80030d2:	e7ee      	b.n	80030b2 <uartReceiveChar+0x2e>
 80030d4:	20001074 	.word	0x20001074
 80030d8:	20000134 	.word	0x20000134

080030dc <__io_putchar>:
/** @brief putchar call for standard output implementation
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
 80030dc:	b508      	push	{r3, lr}
  return uartSendChar(ch);
 80030de:	f7ff ffbf 	bl	8003060 <uartSendChar>
}
 80030e2:	bd08      	pop	{r3, pc}

080030e4 <__io_getchar>:
/** @brief getchar call for standard input implementation
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
 80030e4:	b508      	push	{r3, lr}
  return uartReceiveChar();
 80030e6:	f7ff ffcd 	bl	8003084 <uartReceiveChar>
}
 80030ea:	bd08      	pop	{r3, pc}

080030ec <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80030ec:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 80030ee:	4809      	ldr	r0, [pc, #36]	; (8003114 <MX_CRC_Init+0x28>)
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <MX_CRC_Init+0x2c>)
 80030f2:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80030f8:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80030fa:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80030fc:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80030fe:	2301      	movs	r3, #1
 8003100:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003102:	f7fd fb55 	bl	80007b0 <HAL_CRC_Init>
 8003106:	b900      	cbnz	r0, 800310a <MX_CRC_Init+0x1e>
 8003108:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 800310a:	213d      	movs	r1, #61	; 0x3d
 800310c:	4803      	ldr	r0, [pc, #12]	; (800311c <MX_CRC_Init+0x30>)
 800310e:	f000 f9e7 	bl	80034e0 <_Error_Handler>
  }

}
 8003112:	e7f9      	b.n	8003108 <MX_CRC_Init+0x1c>
 8003114:	20001380 	.word	0x20001380
 8003118:	40023000 	.word	0x40023000
 800311c:	08005434 	.word	0x08005434

08003120 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8003120:	6802      	ldr	r2, [r0, #0]
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_CRC_MspInit+0x28>)
 8003124:	429a      	cmp	r2, r3
 8003126:	d000      	beq.n	800312a <HAL_CRC_MspInit+0xa>
    __HAL_RCC_CRC_CLK_ENABLE();
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003128:	4770      	bx	lr
{
 800312a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800312c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003132:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	9b01      	ldr	r3, [sp, #4]
}
 8003142:	b002      	add	sp, #8
 8003144:	e7f0      	b.n	8003128 <HAL_CRC_MspInit+0x8>
 8003146:	bf00      	nop
 8003148:	40023000 	.word	0x40023000

0800314c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800314c:	b500      	push	{lr}
 800314e:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <MX_DMA_Init+0x60>)
 8003152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003154:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	4611      	mov	r1, r2
 8003168:	200c      	movs	r0, #12
 800316a:	f7fd faab 	bl	80006c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800316e:	200c      	movs	r0, #12
 8003170:	f7fd fad8 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003174:	2200      	movs	r2, #0
 8003176:	4611      	mov	r1, r2
 8003178:	200e      	movs	r0, #14
 800317a:	f7fd faa3 	bl	80006c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800317e:	200e      	movs	r0, #14
 8003180:	f7fd fad0 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003184:	2200      	movs	r2, #0
 8003186:	4611      	mov	r1, r2
 8003188:	2010      	movs	r0, #16
 800318a:	f7fd fa9b 	bl	80006c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800318e:	2010      	movs	r0, #16
 8003190:	f7fd fac8 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003194:	2200      	movs	r2, #0
 8003196:	4611      	mov	r1, r2
 8003198:	2011      	movs	r0, #17
 800319a:	f7fd fa93 	bl	80006c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800319e:	2011      	movs	r0, #17
 80031a0:	f7fd fac0 	bl	8000724 <HAL_NVIC_EnableIRQ>

}
 80031a4:	b003      	add	sp, #12
 80031a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <MX_GPIO_Init>:
     PD1   ------> CAN1_TX
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80031b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b4:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b6:	4b6c      	ldr	r3, [pc, #432]	; (8003368 <MX_GPIO_Init+0x1b8>)
 80031b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ba:	f042 0204 	orr.w	r2, r2, #4
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
 80031c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c2:	f002 0204 	and.w	r2, r2, #4
 80031c6:	9201      	str	r2, [sp, #4]
 80031c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031cc:	f042 0220 	orr.w	r2, r2, #32
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
 80031d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d4:	f002 0220 	and.w	r2, r2, #32
 80031d8:	9202      	str	r2, [sp, #8]
 80031da:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
 80031e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80031ea:	9203      	str	r2, [sp, #12]
 80031ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
 80031f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f8:	f002 0201 	and.w	r2, r2, #1
 80031fc:	9204      	str	r2, [sp, #16]
 80031fe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003202:	f042 0202 	orr.w	r2, r2, #2
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
 8003208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320a:	f002 0202 	and.w	r2, r2, #2
 800320e:	9205      	str	r2, [sp, #20]
 8003210:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003214:	f042 0208 	orr.w	r2, r2, #8
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
 800321a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321c:	f002 0208 	and.w	r2, r2, #8
 8003220:	9206      	str	r2, [sp, #24]
 8003222:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
 800322c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003232:	9207      	str	r2, [sp, #28]
 8003234:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003238:	f042 0210 	orr.w	r2, r2, #16
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	9308      	str	r3, [sp, #32]
 8003246:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003248:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8003378 <MX_GPIO_Init+0x1c8>
 800324c:	2200      	movs	r2, #0
 800324e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003252:	4650      	mov	r0, sl
 8003254:	f7fd fea4 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003258:	4f44      	ldr	r7, [pc, #272]	; (800336c <MX_GPIO_Init+0x1bc>)
 800325a:	2200      	movs	r2, #0
 800325c:	2140      	movs	r1, #64	; 0x40
 800325e:	4638      	mov	r0, r7
 8003260:	f7fd fe9e 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003264:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8003268:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800326c:	4b40      	ldr	r3, [pc, #256]	; (8003370 <MX_GPIO_Init+0x1c0>)
 800326e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2400      	movs	r4, #0
 8003272:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003274:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800337c <MX_GPIO_Init+0x1cc>
 8003278:	a909      	add	r1, sp, #36	; 0x24
 800327a:	4648      	mov	r0, r9
 800327c:	f7fd fd04 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003280:	2332      	movs	r3, #50	; 0x32
 8003282:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2602      	movs	r6, #2
 8003286:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328a:	2503      	movs	r5, #3
 800328c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800328e:	f04f 080b 	mov.w	r8, #11
 8003292:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003296:	a909      	add	r1, sp, #36	; 0x24
 8003298:	4648      	mov	r0, r9
 800329a:	f7fd fcf5 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800329e:	2386      	movs	r3, #134	; 0x86
 80032a0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032a8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ac:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 80032b0:	a909      	add	r1, sp, #36	; 0x24
 80032b2:	4648      	mov	r0, r9
 80032b4:	f7fd fce8 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80032b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032c2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80032c6:	a909      	add	r1, sp, #36	; 0x24
 80032c8:	4650      	mov	r0, sl
 80032ca:	f7fd fcdd 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80032ce:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80032d2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d4:	f04f 0b01 	mov.w	fp, #1
 80032d8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032de:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e0:	a909      	add	r1, sp, #36	; 0x24
 80032e2:	4650      	mov	r0, sl
 80032e4:	f7fd fcd0 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80032e8:	2340      	movs	r3, #64	; 0x40
 80032ea:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ec:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80032f4:	a909      	add	r1, sp, #36	; 0x24
 80032f6:	4638      	mov	r0, r7
 80032f8:	f7fd fcc6 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003300:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003304:	a909      	add	r1, sp, #36	; 0x24
 8003306:	4638      	mov	r0, r7
 8003308:	f7fd fcbe 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800330c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003310:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003312:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003318:	230a      	movs	r3, #10
 800331a:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331c:	a909      	add	r1, sp, #36	; 0x24
 800331e:	4648      	mov	r0, r9
 8003320:	f7fd fcb2 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003328:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800332a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800332e:	a909      	add	r1, sp, #36	; 0x24
 8003330:	4648      	mov	r0, r9
 8003332:	f7fd fca9 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003336:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800333e:	2309      	movs	r3, #9
 8003340:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003342:	a909      	add	r1, sp, #36	; 0x24
 8003344:	480b      	ldr	r0, [pc, #44]	; (8003374 <MX_GPIO_Init+0x1c4>)
 8003346:	f7fd fc9f 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800334a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800334e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003354:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003356:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800335a:	a909      	add	r1, sp, #36	; 0x24
 800335c:	4638      	mov	r0, r7
 800335e:	f7fd fc93 	bl	8000c88 <HAL_GPIO_Init>

}
 8003362:	b00f      	add	sp, #60	; 0x3c
 8003364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	40021800 	.word	0x40021800
 8003370:	10110000 	.word	0x10110000
 8003374:	40020c00 	.word	0x40020c00
 8003378:	40020400 	.word	0x40020400
 800337c:	40020800 	.word	0x40020800

08003380 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003380:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003382:	4815      	ldr	r0, [pc, #84]	; (80033d8 <MX_I2C1_Init+0x58>)
 8003384:	4b15      	ldr	r3, [pc, #84]	; (80033dc <MX_I2C1_Init+0x5c>)
 8003386:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <MX_I2C1_Init+0x60>)
 800338a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003390:	2201      	movs	r2, #1
 8003392:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003394:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003396:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003398:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800339a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800339c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800339e:	f7fd fe05 	bl	8000fac <HAL_I2C_Init>
 80033a2:	b950      	cbnz	r0, 80033ba <MX_I2C1_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033a4:	2100      	movs	r1, #0
 80033a6:	480c      	ldr	r0, [pc, #48]	; (80033d8 <MX_I2C1_Init+0x58>)
 80033a8:	f7fd fe5e 	bl	8001068 <HAL_I2CEx_ConfigAnalogFilter>
 80033ac:	b950      	cbnz	r0, 80033c4 <MX_I2C1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033ae:	2100      	movs	r1, #0
 80033b0:	4809      	ldr	r0, [pc, #36]	; (80033d8 <MX_I2C1_Init+0x58>)
 80033b2:	f7fd fe87 	bl	80010c4 <HAL_I2CEx_ConfigDigitalFilter>
 80033b6:	b950      	cbnz	r0, 80033ce <MX_I2C1_Init+0x4e>
 80033b8:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80033ba:	2143      	movs	r1, #67	; 0x43
 80033bc:	4809      	ldr	r0, [pc, #36]	; (80033e4 <MX_I2C1_Init+0x64>)
 80033be:	f000 f88f 	bl	80034e0 <_Error_Handler>
 80033c2:	e7ef      	b.n	80033a4 <MX_I2C1_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 80033c4:	214a      	movs	r1, #74	; 0x4a
 80033c6:	4807      	ldr	r0, [pc, #28]	; (80033e4 <MX_I2C1_Init+0x64>)
 80033c8:	f000 f88a 	bl	80034e0 <_Error_Handler>
 80033cc:	e7ef      	b.n	80033ae <MX_I2C1_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033ce:	2151      	movs	r1, #81	; 0x51
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <MX_I2C1_Init+0x64>)
 80033d2:	f000 f885 	bl	80034e0 <_Error_Handler>
  }

}
 80033d6:	e7ef      	b.n	80033b8 <MX_I2C1_Init+0x38>
 80033d8:	200013a4 	.word	0x200013a4
 80033dc:	40005400 	.word	0x40005400
 80033e0:	00c0eaff 	.word	0x00c0eaff
 80033e4:	08005444 	.word	0x08005444

080033e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80033e8:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80033ea:	4815      	ldr	r0, [pc, #84]	; (8003440 <MX_I2C2_Init+0x58>)
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <MX_I2C2_Init+0x5c>)
 80033ee:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <MX_I2C2_Init+0x60>)
 80033f2:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033f8:	2201      	movs	r2, #1
 80033fa:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033fc:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80033fe:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003400:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003402:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003404:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003406:	f7fd fdd1 	bl	8000fac <HAL_I2C_Init>
 800340a:	b950      	cbnz	r0, 8003422 <MX_I2C2_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800340c:	2100      	movs	r1, #0
 800340e:	480c      	ldr	r0, [pc, #48]	; (8003440 <MX_I2C2_Init+0x58>)
 8003410:	f7fd fe2a 	bl	8001068 <HAL_I2CEx_ConfigAnalogFilter>
 8003414:	b950      	cbnz	r0, 800342c <MX_I2C2_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003416:	2100      	movs	r1, #0
 8003418:	4809      	ldr	r0, [pc, #36]	; (8003440 <MX_I2C2_Init+0x58>)
 800341a:	f7fd fe53 	bl	80010c4 <HAL_I2CEx_ConfigDigitalFilter>
 800341e:	b950      	cbnz	r0, 8003436 <MX_I2C2_Init+0x4e>
 8003420:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003422:	2164      	movs	r1, #100	; 0x64
 8003424:	4809      	ldr	r0, [pc, #36]	; (800344c <MX_I2C2_Init+0x64>)
 8003426:	f000 f85b 	bl	80034e0 <_Error_Handler>
 800342a:	e7ef      	b.n	800340c <MX_I2C2_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 800342c:	216b      	movs	r1, #107	; 0x6b
 800342e:	4807      	ldr	r0, [pc, #28]	; (800344c <MX_I2C2_Init+0x64>)
 8003430:	f000 f856 	bl	80034e0 <_Error_Handler>
 8003434:	e7ef      	b.n	8003416 <MX_I2C2_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003436:	2172      	movs	r1, #114	; 0x72
 8003438:	4804      	ldr	r0, [pc, #16]	; (800344c <MX_I2C2_Init+0x64>)
 800343a:	f000 f851 	bl	80034e0 <_Error_Handler>
  }

}
 800343e:	e7ef      	b.n	8003420 <MX_I2C2_Init+0x38>
 8003440:	200013f0 	.word	0x200013f0
 8003444:	40005800 	.word	0x40005800
 8003448:	00c0eaff 	.word	0x00c0eaff
 800344c:	08005444 	.word	0x08005444

08003450 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003450:	b500      	push	{lr}
 8003452:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8003454:	6803      	ldr	r3, [r0, #0]
 8003456:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <HAL_I2C_MspInit+0x7c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d005      	beq.n	8003468 <HAL_I2C_MspInit+0x18>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_I2C_MspInit+0x80>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01c      	beq.n	800349c <HAL_I2C_MspInit+0x4c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003462:	b009      	add	sp, #36	; 0x24
 8003464:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin = I2C1_X_SCL_Pin|I2C1_X_SDA_Pin;
 8003468:	f44f 7340 	mov.w	r3, #768	; 0x300
 800346c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800346e:	2312      	movs	r3, #18
 8003470:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003472:	2301      	movs	r3, #1
 8003474:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800347a:	2304      	movs	r3, #4
 800347c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347e:	a903      	add	r1, sp, #12
 8003480:	4814      	ldr	r0, [pc, #80]	; (80034d4 <HAL_I2C_MspInit+0x84>)
 8003482:	f7fd fc01 	bl	8000c88 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_I2C_MspInit+0x88>)
 8003488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	9b01      	ldr	r3, [sp, #4]
 800349a:	e7e2      	b.n	8003462 <HAL_I2C_MspInit+0x12>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800349c:	2303      	movs	r3, #3
 800349e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034a0:	2212      	movs	r2, #18
 80034a2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a4:	2201      	movs	r2, #1
 80034a6:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80034aa:	2304      	movs	r3, #4
 80034ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034ae:	a903      	add	r1, sp, #12
 80034b0:	480a      	ldr	r0, [pc, #40]	; (80034dc <HAL_I2C_MspInit+0x8c>)
 80034b2:	f7fd fbe9 	bl	8000c88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_I2C_MspInit+0x88>)
 80034b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	9b02      	ldr	r3, [sp, #8]
}
 80034ca:	e7ca      	b.n	8003462 <HAL_I2C_MspInit+0x12>
 80034cc:	40005400 	.word	0x40005400
 80034d0:	40005800 	.word	0x40005800
 80034d4:	40020400 	.word	0x40020400
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40021400 	.word	0x40021400

080034e0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80034e0:	e7fe      	b.n	80034e0 <_Error_Handler>
	...

080034e4 <SystemClock_Config>:
{
 80034e4:	b500      	push	{lr}
 80034e6:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <SystemClock_Config+0xf8>)
 80034ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80034fc:	4a38      	ldr	r2, [pc, #224]	; (80035e0 <SystemClock_Config+0xfc>)
 80034fe:	6813      	ldr	r3, [r2, #0]
 8003500:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003514:	2309      	movs	r3, #9
 8003516:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003518:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800351c:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800351e:	2301      	movs	r3, #1
 8003520:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003522:	2202      	movs	r2, #2
 8003524:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003526:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800352a:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800352c:	2304      	movs	r3, #4
 800352e:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003530:	2164      	movs	r1, #100	; 0x64
 8003532:	9134      	str	r1, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003534:	9235      	str	r2, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003536:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003538:	a82b      	add	r0, sp, #172	; 0xac
 800353a:	f7fd fe2d 	bl	8001198 <HAL_RCC_OscConfig>
 800353e:	2800      	cmp	r0, #0
 8003540:	d139      	bne.n	80035b6 <SystemClock_Config+0xd2>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003542:	f7fd fdeb 	bl	800111c <HAL_PWREx_EnableOverDrive>
 8003546:	2800      	cmp	r0, #0
 8003548:	d139      	bne.n	80035be <SystemClock_Config+0xda>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800354a:	230f      	movs	r3, #15
 800354c:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800354e:	2302      	movs	r3, #2
 8003550:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003552:	2300      	movs	r3, #0
 8003554:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003556:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800355a:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800355c:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800355e:	2103      	movs	r1, #3
 8003560:	a826      	add	r0, sp, #152	; 0x98
 8003562:	f7fe f86d 	bl	8001640 <HAL_RCC_ClockConfig>
 8003566:	bb78      	cbnz	r0, 80035c8 <SystemClock_Config+0xe4>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8003568:	f64f 53a0 	movw	r3, #64928	; 0xfda0
 800356c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800356e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003572:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003574:	2300      	movs	r3, #0
 8003576:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003578:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800357a:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800357c:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800357e:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8003580:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003582:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003584:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003586:	a802      	add	r0, sp, #8
 8003588:	f7fe f932 	bl	80017f0 <HAL_RCCEx_PeriphCLKConfig>
 800358c:	bb08      	cbnz	r0, 80035d2 <SystemClock_Config+0xee>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800358e:	f7fe f909 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 8003592:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <SystemClock_Config+0x100>)
 8003594:	fba3 3000 	umull	r3, r0, r3, r0
 8003598:	0980      	lsrs	r0, r0, #6
 800359a:	f7fd f8dd 	bl	8000758 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800359e:	2004      	movs	r0, #4
 80035a0:	f7fd f8f0 	bl	8000784 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80035a4:	2200      	movs	r2, #0
 80035a6:	4611      	mov	r1, r2
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f7fd f88a 	bl	80006c4 <HAL_NVIC_SetPriority>
}
 80035b0:	b039      	add	sp, #228	; 0xe4
 80035b2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80035b6:	21fc      	movs	r1, #252	; 0xfc
 80035b8:	480b      	ldr	r0, [pc, #44]	; (80035e8 <SystemClock_Config+0x104>)
 80035ba:	f7ff ff91 	bl	80034e0 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80035be:	f240 1103 	movw	r1, #259	; 0x103
 80035c2:	4809      	ldr	r0, [pc, #36]	; (80035e8 <SystemClock_Config+0x104>)
 80035c4:	f7ff ff8c 	bl	80034e0 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80035c8:	f240 1111 	movw	r1, #273	; 0x111
 80035cc:	4806      	ldr	r0, [pc, #24]	; (80035e8 <SystemClock_Config+0x104>)
 80035ce:	f7ff ff87 	bl	80034e0 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80035d2:	f44f 7192 	mov.w	r1, #292	; 0x124
 80035d6:	4804      	ldr	r0, [pc, #16]	; (80035e8 <SystemClock_Config+0x104>)
 80035d8:	f7ff ff82 	bl	80034e0 <_Error_Handler>
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40007000 	.word	0x40007000
 80035e4:	10624dd3 	.word	0x10624dd3
 80035e8:	08005454 	.word	0x08005454

080035ec <USART_PRINT_MSG_Configuration>:
		uint32_t baud_rate) {
 80035ec:	b510      	push	{r4, lr}
 80035ee:	4604      	mov	r4, r0
	UART_MsgHandle->Instance = WIFI_UART_MSG;
 80035f0:	4b10      	ldr	r3, [pc, #64]	; (8003634 <USART_PRINT_MSG_Configuration+0x48>)
 80035f2:	6003      	str	r3, [r0, #0]
	UART_MsgHandle->Init.BaudRate = baud_rate;
 80035f4:	6041      	str	r1, [r0, #4]
	UART_MsgHandle->Init.WordLength = UART_WORDLENGTH_8B;
 80035f6:	2300      	movs	r3, #0
 80035f8:	6083      	str	r3, [r0, #8]
	UART_MsgHandle->Init.StopBits = UART_STOPBITS_1;
 80035fa:	60c3      	str	r3, [r0, #12]
	UART_MsgHandle->Init.Parity = UART_PARITY_NONE;
 80035fc:	6103      	str	r3, [r0, #16]
	UART_MsgHandle->Init.HwFlowCtl = UART_HWCONTROL_NONE; // USART_HardwareFlowControl_RTS_CTS;
 80035fe:	6183      	str	r3, [r0, #24]
	UART_MsgHandle->Init.Mode = UART_MODE_TX_RX;
 8003600:	230c      	movs	r3, #12
 8003602:	6143      	str	r3, [r0, #20]
	if (HAL_UART_DeInit(UART_MsgHandle) != HAL_OK) {
 8003604:	f7fe ff89 	bl	800251a <HAL_UART_DeInit>
 8003608:	b948      	cbnz	r0, 800361e <USART_PRINT_MSG_Configuration+0x32>
	if (HAL_UART_Init(UART_MsgHandle) != HAL_OK) {
 800360a:	4620      	mov	r0, r4
 800360c:	f7ff fbf1 	bl	8002df2 <HAL_UART_Init>
 8003610:	b950      	cbnz	r0, 8003628 <USART_PRINT_MSG_Configuration+0x3c>
	UART_MsgHandle->Instance->CR3 |= 0x00000040;
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	6893      	ldr	r3, [r2, #8]
 8003616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800361a:	6093      	str	r3, [r2, #8]
 800361c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800361e:	f240 1141 	movw	r1, #321	; 0x141
 8003622:	4805      	ldr	r0, [pc, #20]	; (8003638 <USART_PRINT_MSG_Configuration+0x4c>)
 8003624:	f7ff ff5c 	bl	80034e0 <_Error_Handler>
		Error_Handler();
 8003628:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <USART_PRINT_MSG_Configuration+0x4c>)
 800362e:	f7ff ff57 	bl	80034e0 <_Error_Handler>
 8003632:	bf00      	nop
 8003634:	40004800 	.word	0x40004800
 8003638:	08005454 	.word	0x08005454

0800363c <main>:
{
 800363c:	b510      	push	{r4, lr}
	setvbuf(stdin, NULL, _IONBF, 0);
 800363e:	4c37      	ldr	r4, [pc, #220]	; (800371c <main+0xe0>)
 8003640:	6820      	ldr	r0, [r4, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	2202      	movs	r2, #2
 8003646:	4619      	mov	r1, r3
 8003648:	6840      	ldr	r0, [r0, #4]
 800364a:	f001 f96d 	bl	8004928 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	2202      	movs	r2, #2
 8003654:	4619      	mov	r1, r3
 8003656:	6880      	ldr	r0, [r0, #8]
 8003658:	f001 f966 	bl	8004928 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	2300      	movs	r3, #0
 8003660:	2202      	movs	r2, #2
 8003662:	4619      	mov	r1, r3
 8003664:	68c0      	ldr	r0, [r0, #12]
 8003666:	f001 f95f 	bl	8004928 <setvbuf>
  HAL_Init();
 800366a:	f7fc ffe7 	bl	800063c <HAL_Init>
  SystemClock_Config();
 800366e:	f7ff ff39 	bl	80034e4 <SystemClock_Config>
  MX_GPIO_Init();
 8003672:	f7ff fd9d 	bl	80031b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003676:	f7ff fd69 	bl	800314c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800367a:	f000 fc11 	bl	8003ea0 <MX_USART3_UART_Init>
  MX_CRC_Init();
 800367e:	f7ff fd35 	bl	80030ec <MX_CRC_Init>
  MX_I2C1_Init();
 8003682:	f7ff fe7d 	bl	8003380 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003686:	f7ff feaf 	bl	80033e8 <MX_I2C2_Init>
  MX_RTC_Init();
 800368a:	f000 f85d 	bl	8003748 <MX_RTC_Init>
  MX_SPI1_Init();
 800368e:	f000 f887 	bl	80037a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003692:	f000 f8af 	bl	80037f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003696:	f000 fa59 	bl	8003b4c <MX_TIM1_Init>
  MX_TIM2_Init();
 800369a:	f000 fa91 	bl	8003bc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800369e:	f000 fac5 	bl	8003c2c <MX_TIM3_Init>
  MX_TIM4_Init();
 80036a2:	f000 fafd 	bl	8003ca0 <MX_TIM4_Init>
  MX_UART5_Init();
 80036a6:	f000 fb7b 	bl	8003da0 <MX_UART5_Init>
  MX_UART7_Init();
 80036aa:	f000 fb99 	bl	8003de0 <MX_UART7_Init>
  MX_UART8_Init();
 80036ae:	f000 fbb7 	bl	8003e20 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80036b2:	f000 fbd5 	bl	8003e60 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80036b6:	f000 fc13 	bl	8003ee0 <MX_USART6_UART_Init>
	USART_PRINT_MSG_Configuration(&huart3, 115200);
 80036ba:	4c19      	ldr	r4, [pc, #100]	; (8003720 <main+0xe4>)
 80036bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80036c0:	4620      	mov	r0, r4
 80036c2:	f7ff ff93 	bl	80035ec <USART_PRINT_MSG_Configuration>
	Set_UartMsgHandle(&huart3); //this is required for the console handler initialization
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff fbc8 	bl	8002e5c <Set_UartMsgHandle>
	printf("\r\n\n/********************************************************\n");
 80036cc:	4815      	ldr	r0, [pc, #84]	; (8003724 <main+0xe8>)
 80036ce:	f001 f913 	bl	80048f8 <puts>
	printf("\r *                                                      *\n");
 80036d2:	4c15      	ldr	r4, [pc, #84]	; (8003728 <main+0xec>)
 80036d4:	4620      	mov	r0, r4
 80036d6:	f001 f90f 	bl	80048f8 <puts>
	printf("\r * X-CUBE-WIFI1 Expansion Software v3.1.1               *\n");
 80036da:	4814      	ldr	r0, [pc, #80]	; (800372c <main+0xf0>)
 80036dc:	f001 f90c 	bl	80048f8 <puts>
	printf("\r * Console Application                                  *\n");
 80036e0:	4813      	ldr	r0, [pc, #76]	; (8003730 <main+0xf4>)
 80036e2:	f001 f909 	bl	80048f8 <puts>
	printf("\r * Send AT commands to SPWF module directly             *\n");
 80036e6:	4813      	ldr	r0, [pc, #76]	; (8003734 <main+0xf8>)
 80036e8:	f001 f906 	bl	80048f8 <puts>
	printf("\r *                                                      *\n");
 80036ec:	4620      	mov	r0, r4
 80036ee:	f001 f903 	bl	80048f8 <puts>
	printf("\r *******************************************************/\n\r\n");
 80036f2:	4811      	ldr	r0, [pc, #68]	; (8003738 <main+0xfc>)
 80036f4:	f001 f900 	bl	80048f8 <puts>
	printf("\rPlease wait...\r\n");
 80036f8:	4810      	ldr	r0, [pc, #64]	; (800373c <main+0x100>)
 80036fa:	f001 f8fd 	bl	80048f8 <puts>
	USART2->CR3 |= 0x00000040;
 80036fe:	4a10      	ldr	r2, [pc, #64]	; (8003740 <main+0x104>)
 8003700:	6893      	ldr	r3, [r2, #8]
 8003702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003706:	6093      	str	r3, [r2, #8]
		UART_DMA_Init();
 8003708:	f7ff fbae 	bl	8002e68 <UART_DMA_Init>
	HAL_Delay(2000);
 800370c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003710:	f7fc ffb2 	bl	8000678 <HAL_Delay>
	printf("\rConsole Ready...\r\n");
 8003714:	480b      	ldr	r0, [pc, #44]	; (8003744 <main+0x108>)
 8003716:	f001 f8ef 	bl	80048f8 <puts>
 800371a:	e7fe      	b.n	800371a <main+0xde>
 800371c:	2000000c 	.word	0x2000000c
 8003720:	20001074 	.word	0x20001074
 8003724:	08005464 	.word	0x08005464
 8003728:	080054a4 	.word	0x080054a4
 800372c:	080054e0 	.word	0x080054e0
 8003730:	0800551c 	.word	0x0800551c
 8003734:	08005558 	.word	0x08005558
 8003738:	08005594 	.word	0x08005594
 800373c:	080055d4 	.word	0x080055d4
 8003740:	40004400 	.word	0x40004400
 8003744:	080055e8 	.word	0x080055e8

08003748 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003748:	b508      	push	{r3, lr}

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 800374a:	480a      	ldr	r0, [pc, #40]	; (8003774 <MX_RTC_Init+0x2c>)
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <MX_RTC_Init+0x30>)
 800374e:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003750:	2300      	movs	r3, #0
 8003752:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003754:	227f      	movs	r2, #127	; 0x7f
 8003756:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800375c:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800375e:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003760:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003762:	f7fe fb67 	bl	8001e34 <HAL_RTC_Init>
 8003766:	b900      	cbnz	r0, 800376a <MX_RTC_Init+0x22>
 8003768:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 800376a:	2140      	movs	r1, #64	; 0x40
 800376c:	4803      	ldr	r0, [pc, #12]	; (800377c <MX_RTC_Init+0x34>)
 800376e:	f7ff feb7 	bl	80034e0 <_Error_Handler>
  }

}
 8003772:	e7f9      	b.n	8003768 <MX_RTC_Init+0x20>
 8003774:	2000143c 	.word	0x2000143c
 8003778:	40002800 	.word	0x40002800
 800377c:	080055fc 	.word	0x080055fc

08003780 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8003780:	6802      	ldr	r2, [r0, #0]
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RTC_MspInit+0x18>)
 8003784:	429a      	cmp	r2, r3
 8003786:	d000      	beq.n	800378a <HAL_RTC_MspInit+0xa>
 8003788:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800378a:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_RTC_MspInit+0x1c>)
 800378c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800378e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003794:	e7f8      	b.n	8003788 <HAL_RTC_MspInit+0x8>
 8003796:	bf00      	nop
 8003798:	40002800 	.word	0x40002800
 800379c:	40023800 	.word	0x40023800

080037a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80037a0:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 80037a2:	4811      	ldr	r0, [pc, #68]	; (80037e8 <MX_SPI1_Init+0x48>)
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <MX_SPI1_Init+0x4c>)
 80037a6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037a8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80037ac:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037ae:	2300      	movs	r3, #0
 80037b0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80037b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80037b6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037ba:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037c4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037c6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037ca:	2207      	movs	r2, #7
 80037cc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037ce:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037d0:	2308      	movs	r3, #8
 80037d2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037d4:	f7fe fb80 	bl	8001ed8 <HAL_SPI_Init>
 80037d8:	b900      	cbnz	r0, 80037dc <MX_SPI1_Init+0x3c>
 80037da:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 80037dc:	2148      	movs	r1, #72	; 0x48
 80037de:	4804      	ldr	r0, [pc, #16]	; (80037f0 <MX_SPI1_Init+0x50>)
 80037e0:	f7ff fe7e 	bl	80034e0 <_Error_Handler>
  }

}
 80037e4:	e7f9      	b.n	80037da <MX_SPI1_Init+0x3a>
 80037e6:	bf00      	nop
 80037e8:	200014c0 	.word	0x200014c0
 80037ec:	40013000 	.word	0x40013000
 80037f0:	0800560c 	.word	0x0800560c

080037f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80037f4:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 80037f6:	4811      	ldr	r0, [pc, #68]	; (800383c <MX_SPI2_Init+0x48>)
 80037f8:	4b11      	ldr	r3, [pc, #68]	; (8003840 <MX_SPI2_Init+0x4c>)
 80037fa:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037fc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003800:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003802:	2300      	movs	r3, #0
 8003804:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003806:	f44f 7240 	mov.w	r2, #768	; 0x300
 800380a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800380c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800380e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003814:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003816:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003818:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800381a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800381c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800381e:	2207      	movs	r2, #7
 8003820:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003822:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003824:	2308      	movs	r3, #8
 8003826:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003828:	f7fe fb56 	bl	8001ed8 <HAL_SPI_Init>
 800382c:	b900      	cbnz	r0, 8003830 <MX_SPI2_Init+0x3c>
 800382e:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8003830:	2160      	movs	r1, #96	; 0x60
 8003832:	4804      	ldr	r0, [pc, #16]	; (8003844 <MX_SPI2_Init+0x50>)
 8003834:	f7ff fe54 	bl	80034e0 <_Error_Handler>
  }

}
 8003838:	e7f9      	b.n	800382e <MX_SPI2_Init+0x3a>
 800383a:	bf00      	nop
 800383c:	2000145c 	.word	0x2000145c
 8003840:	40003800 	.word	0x40003800
 8003844:	0800560c 	.word	0x0800560c

08003848 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800384c:	6803      	ldr	r3, [r0, #0]
 800384e:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <HAL_SPI_MspInit+0xa8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_SPI_MspInit+0x16>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8003854:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <HAL_SPI_MspInit+0xac>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d024      	beq.n	80038a4 <HAL_SPI_MspInit+0x5c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800385a:	b009      	add	sp, #36	; 0x24
 800385c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800385e:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_SPI_MspInit+0xb0>)
 8003860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003862:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003866:	645a      	str	r2, [r3, #68]	; 0x44
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003872:	2360      	movs	r3, #96	; 0x60
 8003874:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	2702      	movs	r7, #2
 8003878:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2600      	movs	r6, #0
 800387c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387e:	2503      	movs	r5, #3
 8003880:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003882:	2405      	movs	r4, #5
 8003884:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003886:	a903      	add	r1, sp, #12
 8003888:	481c      	ldr	r0, [pc, #112]	; (80038fc <HAL_SPI_MspInit+0xb4>)
 800388a:	f7fd f9fd 	bl	8000c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003892:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003898:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389a:	a903      	add	r1, sp, #12
 800389c:	4818      	ldr	r0, [pc, #96]	; (8003900 <HAL_SPI_MspInit+0xb8>)
 800389e:	f7fd f9f3 	bl	8000c88 <HAL_GPIO_Init>
 80038a2:	e7da      	b.n	800385a <HAL_SPI_MspInit+0x12>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038a4:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <HAL_SPI_MspInit+0xb0>)
 80038a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038b8:	230c      	movs	r3, #12
 80038ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2702      	movs	r7, #2
 80038be:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2600      	movs	r6, #0
 80038c2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c4:	2503      	movs	r5, #3
 80038c6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038c8:	2405      	movs	r4, #5
 80038ca:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038cc:	eb0d 0103 	add.w	r1, sp, r3
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <HAL_SPI_MspInit+0xbc>)
 80038d2:	f7fd f9d9 	bl	8000c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038e2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e4:	a903      	add	r1, sp, #12
 80038e6:	4808      	ldr	r0, [pc, #32]	; (8003908 <HAL_SPI_MspInit+0xc0>)
 80038e8:	f7fd f9ce 	bl	8000c88 <HAL_GPIO_Init>
}
 80038ec:	e7b5      	b.n	800385a <HAL_SPI_MspInit+0x12>
 80038ee:	bf00      	nop
 80038f0:	40013000 	.word	0x40013000
 80038f4:	40003800 	.word	0x40003800
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40020000 	.word	0x40020000
 8003900:	40020c00 	.word	0x40020c00
 8003904:	40020800 	.word	0x40020800
 8003908:	40020400 	.word	0x40020400

0800390c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800390c:	b500      	push	{lr}
 800390e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b21      	ldr	r3, [pc, #132]	; (8003998 <HAL_MspInit+0x8c>)
 8003912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003914:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
 800391a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003920:	9200      	str	r2, [sp, #0]
 8003922:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003936:	2003      	movs	r0, #3
 8003938:	f7fc feb2 	bl	80006a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800393c:	2200      	movs	r2, #0
 800393e:	4611      	mov	r1, r2
 8003940:	f06f 000b 	mvn.w	r0, #11
 8003944:	f7fc febe 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003948:	2200      	movs	r2, #0
 800394a:	4611      	mov	r1, r2
 800394c:	f06f 000a 	mvn.w	r0, #10
 8003950:	f7fc feb8 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003954:	2200      	movs	r2, #0
 8003956:	4611      	mov	r1, r2
 8003958:	f06f 0009 	mvn.w	r0, #9
 800395c:	f7fc feb2 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003960:	2200      	movs	r2, #0
 8003962:	4611      	mov	r1, r2
 8003964:	f06f 0004 	mvn.w	r0, #4
 8003968:	f7fc feac 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	4611      	mov	r1, r2
 8003970:	f06f 0003 	mvn.w	r0, #3
 8003974:	f7fc fea6 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003978:	2200      	movs	r2, #0
 800397a:	4611      	mov	r1, r2
 800397c:	f06f 0001 	mvn.w	r0, #1
 8003980:	f7fc fea0 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003984:	2200      	movs	r2, #0
 8003986:	4611      	mov	r1, r2
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	f7fc fe9a 	bl	80006c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003990:	b003      	add	sp, #12
 8003992:	f85d fb04 	ldr.w	pc, [sp], #4
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800399c:	4770      	bx	lr

0800399e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800399e:	e7fe      	b.n	800399e <HardFault_Handler>

080039a0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80039a0:	e7fe      	b.n	80039a0 <MemManage_Handler>

080039a2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80039a2:	e7fe      	b.n	80039a2 <BusFault_Handler>

080039a4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80039a4:	e7fe      	b.n	80039a4 <UsageFault_Handler>

080039a6 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80039a6:	4770      	bx	lr

080039a8 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80039a8:	4770      	bx	lr

080039aa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80039aa:	4770      	bx	lr

080039ac <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80039ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ae:	f7fc fe51 	bl	8000654 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80039b2:	f7fc fef8 	bl	80007a6 <HAL_SYSTICK_IRQHandler>
 80039b6:	bd08      	pop	{r3, pc}

080039b8 <TIM3_IRQHandler>:
/**
 * @brief  This function handles TIM interrupt request.
 * @param  None
 * @retval None
 */
void TIM3_IRQHandler(void) {
 80039b8:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim3);
 80039ba:	4802      	ldr	r0, [pc, #8]	; (80039c4 <TIM3_IRQHandler+0xc>)
 80039bc:	f7fe fb1d 	bl	8001ffa <HAL_TIM_IRQHandler>
 80039c0:	bd08      	pop	{r3, pc}
 80039c2:	bf00      	nop
 80039c4:	20001524 	.word	0x20001524

080039c8 <TIM2_IRQHandler>:
/**
 * @brief  This function handles TIM interrupt request.
 * @param  None
 * @retval None
 */
void TIM2_IRQHandler(void) {
 80039c8:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim2);
 80039ca:	4802      	ldr	r0, [pc, #8]	; (80039d4 <TIM2_IRQHandler+0xc>)
 80039cc:	f7fe fb15 	bl	8001ffa <HAL_TIM_IRQHandler>
 80039d0:	bd08      	pop	{r3, pc}
 80039d2:	bf00      	nop
 80039d4:	20001564 	.word	0x20001564

080039d8 <DMA1_Stream3_IRQHandler>:

/**
* @brief This function handles DMA1 stream3 global interrupt.
*/
void DMA1_Stream3_IRQHandler(void)
{
 80039d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80039da:	4802      	ldr	r0, [pc, #8]	; (80039e4 <DMA1_Stream3_IRQHandler+0xc>)
 80039dc:	f7fd f866 	bl	8000aac <HAL_DMA_IRQHandler>
 80039e0:	bd08      	pop	{r3, pc}
 80039e2:	bf00      	nop
 80039e4:	20001218 	.word	0x20001218

080039e8 <DMA1_Stream6_IRQHandler>:

/**
* @brief This function handles DMA1 stream6 global interrupt.
*/
void DMA1_Stream6_IRQHandler(void)
{
 80039e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80039ea:	4802      	ldr	r0, [pc, #8]	; (80039f4 <DMA1_Stream6_IRQHandler+0xc>)
 80039ec:	f7fd f85e 	bl	8000aac <HAL_DMA_IRQHandler>
 80039f0:	bd08      	pop	{r3, pc}
 80039f2:	bf00      	nop
 80039f4:	200012d8 	.word	0x200012d8

080039f8 <HAL_UART_RxCpltCallback>:
 * @brief  HAL_UART_RxCpltCallback
 *         Rx Transfer completed callback
 * @param  UsartHandle: UART handle
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandleArg) {
 80039f8:	4770      	bx	lr

080039fa <HAL_UART_TxCpltCallback>:
 * @brief  HAL_UART_TxCpltCallback
 *         Tx Transfer completed callback
 * @param  UsartHandle: UART handle
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandleArg) {
 80039fa:	4770      	bx	lr

080039fc <HAL_UART_ErrorCallback>:
 * @param  UsartHandle: UART handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 80039fc:	b508      	push	{r3, lr}
	// WiFi_HAL_UART_ErrorCallback(UartHandle);
	printf("UART ERROR!!!");
 80039fe:	4802      	ldr	r0, [pc, #8]	; (8003a08 <HAL_UART_ErrorCallback+0xc>)
 8003a00:	f000 ff06 	bl	8004810 <iprintf>
 8003a04:	bd08      	pop	{r3, pc}
 8003a06:	bf00      	nop
 8003a08:	0800561c 	.word	0x0800561c

08003a0c <USART2_IRQHandler>:
/**
 * @brief  This function handles USARTx Handler.
 * @param  None
 * @retval None
 */
void USARTx_IRQHandler(void) {
 8003a0c:	b508      	push	{r3, lr}
	// printf("WIFI UART IRQ");
	HAL_UART_IRQHandler(&huart2);
 8003a0e:	4802      	ldr	r0, [pc, #8]	; (8003a18 <USART2_IRQHandler+0xc>)
 8003a10:	f7fe ff10 	bl	8002834 <HAL_UART_IRQHandler>
 8003a14:	bd08      	pop	{r3, pc}
 8003a16:	bf00      	nop
 8003a18:	20000098 	.word	0x20000098

08003a1c <USART3_IRQHandler>:
 * @brief  This function handles USARTx vcom Handler.
 * @param  None
 * @retval None
 */
#ifdef USART_PRINT_MSG
void USARTx_PRINT_IRQHandler(void) {
 8003a1c:	b508      	push	{r3, lr}
	// printf("CONSOLE UART IRQ");
	HAL_UART_IRQHandler(&huart3);
 8003a1e:	4802      	ldr	r0, [pc, #8]	; (8003a28 <USART3_IRQHandler+0xc>)
 8003a20:	f7fe ff08 	bl	8002834 <HAL_UART_IRQHandler>
 8003a24:	bd08      	pop	{r3, pc}
 8003a26:	bf00      	nop
 8003a28:	20001074 	.word	0x20001074

08003a2c <DMA1_Stream1_IRQHandler>:

#ifdef WIFI_USE_VCOM

#ifdef USE_STM32F7XX_NUCLEO
// CONSOLE - UART - RX
void DMA1_Stream1_IRQHandler(void) {
 8003a2c:	b508      	push	{r3, lr}
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <DMA1_Stream1_IRQHandler+0x1c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
	//printf("Reading from console\r\n");
	if (LL_DMA_IsActiveFlag_TC1(DMA1) == 1) {
 8003a32:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003a36:	d100      	bne.n	8003a3a <DMA1_Stream1_IRQHandler+0xe>
 8003a38:	bd08      	pop	{r3, pc}
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a3e:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <DMA1_Stream1_IRQHandler+0x1c>)
 8003a40:	609a      	str	r2, [r3, #8]
		LL_DMA_ClearFlag_TC1(DMA1);
		DMA1_TransferComplete();
 8003a42:	f7ff fabb 	bl	8002fbc <DMA1_TransferComplete>
	}
}
 8003a46:	e7f7      	b.n	8003a38 <DMA1_Stream1_IRQHandler+0xc>
 8003a48:	40026000 	.word	0x40026000

08003a4c <DMA1_Stream5_IRQHandler>:

// WIFI - UART - RX
void DMA1_Stream5_IRQHandler(void) {
 8003a4c:	b508      	push	{r3, lr}
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <DMA1_Stream5_IRQHandler+0x1c>)
 8003a50:	685b      	ldr	r3, [r3, #4]
	// printf("Reading from WIFI UART\r\n");
	if (LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 8003a52:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003a56:	d100      	bne.n	8003a5a <DMA1_Stream5_IRQHandler+0xe>
 8003a58:	bd08      	pop	{r3, pc}
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8003a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a5e:	4b02      	ldr	r3, [pc, #8]	; (8003a68 <DMA1_Stream5_IRQHandler+0x1c>)
 8003a60:	60da      	str	r2, [r3, #12]
		LL_DMA_ClearFlag_TC5(DMA1);
		DMA2_TransferComplete();
 8003a62:	f7ff fad5 	bl	8003010 <DMA2_TransferComplete>
	}
}
 8003a66:	e7f7      	b.n	8003a58 <DMA1_Stream5_IRQHandler+0xc>
 8003a68:	40026000 	.word	0x40026000

08003a6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	460d      	mov	r5, r1
 8003a70:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a72:	2400      	movs	r4, #0
 8003a74:	e005      	b.n	8003a82 <_read+0x16>
	{
		*ptr++ = __io_getchar();
 8003a76:	1c6e      	adds	r6, r5, #1
 8003a78:	f7ff fb34 	bl	80030e4 <__io_getchar>
 8003a7c:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7e:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8003a80:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a82:	42bc      	cmp	r4, r7
 8003a84:	dbf7      	blt.n	8003a76 <_read+0xa>
	}

return len;
}
 8003a86:	4638      	mov	r0, r7
 8003a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a8a <_write>:

int _write(int file, char *ptr, int len)
{
 8003a8a:	b570      	push	{r4, r5, r6, lr}
 8003a8c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8e:	2400      	movs	r4, #0
 8003a90:	e005      	b.n	8003a9e <_write+0x14>
	{
		__io_putchar(*ptr++);
 8003a92:	1c4d      	adds	r5, r1, #1
 8003a94:	7808      	ldrb	r0, [r1, #0]
 8003a96:	f7ff fb21 	bl	80030dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a9a:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8003a9c:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a9e:	42b4      	cmp	r4, r6
 8003aa0:	dbf7      	blt.n	8003a92 <_write+0x8>
	}
	return len;
}
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003aa8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003aa8:	b508      	push	{r3, lr}
 8003aaa:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003aac:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <_sbrk+0x34>)
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	b142      	cbz	r2, 8003ac4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <_sbrk+0x34>)
 8003ab4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003ab6:	4403      	add	r3, r0
 8003ab8:	466a      	mov	r2, sp
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d806      	bhi.n	8003acc <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003abe:	4a07      	ldr	r2, [pc, #28]	; (8003adc <_sbrk+0x34>)
 8003ac0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003ac2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003ac4:	4906      	ldr	r1, [pc, #24]	; (8003ae0 <_sbrk+0x38>)
 8003ac6:	4a05      	ldr	r2, [pc, #20]	; (8003adc <_sbrk+0x34>)
 8003ac8:	6011      	str	r1, [r2, #0]
 8003aca:	e7f2      	b.n	8003ab2 <_sbrk+0xa>
		errno = ENOMEM;
 8003acc:	f000 fc46 	bl	800435c <__errno>
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	bd08      	pop	{r3, pc}
 8003ada:	bf00      	nop
 8003adc:	2000008c 	.word	0x2000008c
 8003ae0:	200017e8 	.word	0x200017e8

08003ae4 <_close>:

int _close(int file)
{
	return -1;
}
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	4770      	bx	lr

08003aea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aee:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003af0:	2000      	movs	r0, #0
 8003af2:	4770      	bx	lr

08003af4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003af4:	2001      	movs	r0, #1
 8003af6:	4770      	bx	lr

08003af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003af8:	2000      	movs	r0, #0
 8003afa:	4770      	bx	lr

08003afc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003afc:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003afe:	4a0f      	ldr	r2, [pc, #60]	; (8003b3c <SystemInit+0x40>)
 8003b00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <SystemInit+0x44>)
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	f041 0101 	orr.w	r1, r1, #1
 8003b14:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b16:	2000      	movs	r0, #0
 8003b18:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b1a:	681c      	ldr	r4, [r3, #0]
 8003b1c:	4909      	ldr	r1, [pc, #36]	; (8003b44 <SystemInit+0x48>)
 8003b1e:	4021      	ands	r1, r4
 8003b20:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b22:	4909      	ldr	r1, [pc, #36]	; (8003b48 <SystemInit+0x4c>)
 8003b24:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b26:	6819      	ldr	r1, [r3, #0]
 8003b28:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003b2c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b2e:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b34:	6093      	str	r3, [r2, #8]
#endif
}
 8003b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00
 8003b40:	40023800 	.word	0x40023800
 8003b44:	fef6ffff 	.word	0xfef6ffff
 8003b48:	24003010 	.word	0x24003010

08003b4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b4c:	b500      	push	{lr}
 8003b4e:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 8003b50:	4818      	ldr	r0, [pc, #96]	; (8003bb4 <MX_TIM1_Init+0x68>)
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <MX_TIM1_Init+0x6c>)
 8003b54:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b5a:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 8003b5c:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b5e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b60:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b62:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b64:	f7fe fbb6 	bl	80022d4 <HAL_TIM_Base_Init>
 8003b68:	b9a0      	cbnz	r0, 8003b94 <MX_TIM1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b6a:	a908      	add	r1, sp, #32
 8003b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b70:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b74:	480f      	ldr	r0, [pc, #60]	; (8003bb4 <MX_TIM1_Init+0x68>)
 8003b76:	f7fe fbd3 	bl	8002320 <HAL_TIM_ConfigClockSource>
 8003b7a:	b980      	cbnz	r0, 8003b9e <MX_TIM1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b80:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b82:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b84:	a901      	add	r1, sp, #4
 8003b86:	480b      	ldr	r0, [pc, #44]	; (8003bb4 <MX_TIM1_Init+0x68>)
 8003b88:	f7fe fc54 	bl	8002434 <HAL_TIMEx_MasterConfigSynchronization>
 8003b8c:	b960      	cbnz	r0, 8003ba8 <MX_TIM1_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003b8e:	b009      	add	sp, #36	; 0x24
 8003b90:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003b94:	2143      	movs	r1, #67	; 0x43
 8003b96:	4809      	ldr	r0, [pc, #36]	; (8003bbc <MX_TIM1_Init+0x70>)
 8003b98:	f7ff fca2 	bl	80034e0 <_Error_Handler>
 8003b9c:	e7e5      	b.n	8003b6a <MX_TIM1_Init+0x1e>
    _Error_Handler(__FILE__, __LINE__);
 8003b9e:	2149      	movs	r1, #73	; 0x49
 8003ba0:	4806      	ldr	r0, [pc, #24]	; (8003bbc <MX_TIM1_Init+0x70>)
 8003ba2:	f7ff fc9d 	bl	80034e0 <_Error_Handler>
 8003ba6:	e7e9      	b.n	8003b7c <MX_TIM1_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8003ba8:	2151      	movs	r1, #81	; 0x51
 8003baa:	4804      	ldr	r0, [pc, #16]	; (8003bbc <MX_TIM1_Init+0x70>)
 8003bac:	f7ff fc98 	bl	80034e0 <_Error_Handler>
}
 8003bb0:	e7ed      	b.n	8003b8e <MX_TIM1_Init+0x42>
 8003bb2:	bf00      	nop
 8003bb4:	200015e4 	.word	0x200015e4
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	08005644 	.word	0x08005644

08003bc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003bc0:	b500      	push	{lr}
 8003bc2:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8003bc4:	4817      	ldr	r0, [pc, #92]	; (8003c24 <MX_TIM2_Init+0x64>)
 8003bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bca:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bd0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 8003bd2:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd4:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bd6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bd8:	f7fe fb7c 	bl	80022d4 <HAL_TIM_Base_Init>
 8003bdc:	b998      	cbnz	r0, 8003c06 <MX_TIM2_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bde:	a908      	add	r1, sp, #32
 8003be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be4:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003be8:	480e      	ldr	r0, [pc, #56]	; (8003c24 <MX_TIM2_Init+0x64>)
 8003bea:	f7fe fb99 	bl	8002320 <HAL_TIM_ConfigClockSource>
 8003bee:	b978      	cbnz	r0, 8003c10 <MX_TIM2_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bf6:	a901      	add	r1, sp, #4
 8003bf8:	480a      	ldr	r0, [pc, #40]	; (8003c24 <MX_TIM2_Init+0x64>)
 8003bfa:	f7fe fc1b 	bl	8002434 <HAL_TIMEx_MasterConfigSynchronization>
 8003bfe:	b960      	cbnz	r0, 8003c1a <MX_TIM2_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003c00:	b009      	add	sp, #36	; 0x24
 8003c02:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003c06:	2163      	movs	r1, #99	; 0x63
 8003c08:	4807      	ldr	r0, [pc, #28]	; (8003c28 <MX_TIM2_Init+0x68>)
 8003c0a:	f7ff fc69 	bl	80034e0 <_Error_Handler>
 8003c0e:	e7e6      	b.n	8003bde <MX_TIM2_Init+0x1e>
    _Error_Handler(__FILE__, __LINE__);
 8003c10:	2169      	movs	r1, #105	; 0x69
 8003c12:	4805      	ldr	r0, [pc, #20]	; (8003c28 <MX_TIM2_Init+0x68>)
 8003c14:	f7ff fc64 	bl	80034e0 <_Error_Handler>
 8003c18:	e7ea      	b.n	8003bf0 <MX_TIM2_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8003c1a:	2170      	movs	r1, #112	; 0x70
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <MX_TIM2_Init+0x68>)
 8003c1e:	f7ff fc5f 	bl	80034e0 <_Error_Handler>
}
 8003c22:	e7ed      	b.n	8003c00 <MX_TIM2_Init+0x40>
 8003c24:	20001564 	.word	0x20001564
 8003c28:	08005644 	.word	0x08005644

08003c2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c2c:	b500      	push	{lr}
 8003c2e:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8003c30:	4818      	ldr	r0, [pc, #96]	; (8003c94 <MX_TIM3_Init+0x68>)
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <MX_TIM3_Init+0x6c>)
 8003c34:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 9999;
 8003c36:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c3a:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 99;
 8003c40:	2263      	movs	r2, #99	; 0x63
 8003c42:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c44:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c46:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c48:	f7fe fb44 	bl	80022d4 <HAL_TIM_Base_Init>
 8003c4c:	b998      	cbnz	r0, 8003c76 <MX_TIM3_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c4e:	a908      	add	r1, sp, #32
 8003c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c54:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c58:	480e      	ldr	r0, [pc, #56]	; (8003c94 <MX_TIM3_Init+0x68>)
 8003c5a:	f7fe fb61 	bl	8002320 <HAL_TIM_ConfigClockSource>
 8003c5e:	b978      	cbnz	r0, 8003c80 <MX_TIM3_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c64:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c66:	a901      	add	r1, sp, #4
 8003c68:	480a      	ldr	r0, [pc, #40]	; (8003c94 <MX_TIM3_Init+0x68>)
 8003c6a:	f7fe fbe3 	bl	8002434 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6e:	b960      	cbnz	r0, 8003c8a <MX_TIM3_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003c70:	b009      	add	sp, #36	; 0x24
 8003c72:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003c76:	2182      	movs	r1, #130	; 0x82
 8003c78:	4808      	ldr	r0, [pc, #32]	; (8003c9c <MX_TIM3_Init+0x70>)
 8003c7a:	f7ff fc31 	bl	80034e0 <_Error_Handler>
 8003c7e:	e7e6      	b.n	8003c4e <MX_TIM3_Init+0x22>
    _Error_Handler(__FILE__, __LINE__);
 8003c80:	2188      	movs	r1, #136	; 0x88
 8003c82:	4806      	ldr	r0, [pc, #24]	; (8003c9c <MX_TIM3_Init+0x70>)
 8003c84:	f7ff fc2c 	bl	80034e0 <_Error_Handler>
 8003c88:	e7ea      	b.n	8003c60 <MX_TIM3_Init+0x34>
    _Error_Handler(__FILE__, __LINE__);
 8003c8a:	218f      	movs	r1, #143	; 0x8f
 8003c8c:	4803      	ldr	r0, [pc, #12]	; (8003c9c <MX_TIM3_Init+0x70>)
 8003c8e:	f7ff fc27 	bl	80034e0 <_Error_Handler>
}
 8003c92:	e7ed      	b.n	8003c70 <MX_TIM3_Init+0x44>
 8003c94:	20001524 	.word	0x20001524
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	08005644 	.word	0x08005644

08003ca0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ca0:	b500      	push	{lr}
 8003ca2:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8003ca4:	4818      	ldr	r0, [pc, #96]	; (8003d08 <MX_TIM4_Init+0x68>)
 8003ca6:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <MX_TIM4_Init+0x6c>)
 8003ca8:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 9999;
 8003caa:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cae:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 99;
 8003cb4:	2263      	movs	r2, #99	; 0x63
 8003cb6:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb8:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cba:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003cbc:	f7fe fb0a 	bl	80022d4 <HAL_TIM_Base_Init>
 8003cc0:	b998      	cbnz	r0, 8003cea <MX_TIM4_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cc2:	a908      	add	r1, sp, #32
 8003cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ccc:	480e      	ldr	r0, [pc, #56]	; (8003d08 <MX_TIM4_Init+0x68>)
 8003cce:	f7fe fb27 	bl	8002320 <HAL_TIM_ConfigClockSource>
 8003cd2:	b978      	cbnz	r0, 8003cf4 <MX_TIM4_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cda:	a901      	add	r1, sp, #4
 8003cdc:	480a      	ldr	r0, [pc, #40]	; (8003d08 <MX_TIM4_Init+0x68>)
 8003cde:	f7fe fba9 	bl	8002434 <HAL_TIMEx_MasterConfigSynchronization>
 8003ce2:	b960      	cbnz	r0, 8003cfe <MX_TIM4_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003ce4:	b009      	add	sp, #36	; 0x24
 8003ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003cea:	21a1      	movs	r1, #161	; 0xa1
 8003cec:	4808      	ldr	r0, [pc, #32]	; (8003d10 <MX_TIM4_Init+0x70>)
 8003cee:	f7ff fbf7 	bl	80034e0 <_Error_Handler>
 8003cf2:	e7e6      	b.n	8003cc2 <MX_TIM4_Init+0x22>
    _Error_Handler(__FILE__, __LINE__);
 8003cf4:	21a7      	movs	r1, #167	; 0xa7
 8003cf6:	4806      	ldr	r0, [pc, #24]	; (8003d10 <MX_TIM4_Init+0x70>)
 8003cf8:	f7ff fbf2 	bl	80034e0 <_Error_Handler>
 8003cfc:	e7ea      	b.n	8003cd4 <MX_TIM4_Init+0x34>
    _Error_Handler(__FILE__, __LINE__);
 8003cfe:	21ae      	movs	r1, #174	; 0xae
 8003d00:	4803      	ldr	r0, [pc, #12]	; (8003d10 <MX_TIM4_Init+0x70>)
 8003d02:	f7ff fbed 	bl	80034e0 <_Error_Handler>
}
 8003d06:	e7ed      	b.n	8003ce4 <MX_TIM4_Init+0x44>
 8003d08:	200015a4 	.word	0x200015a4
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	08005644 	.word	0x08005644

08003d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d14:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM1)
 8003d16:	6803      	ldr	r3, [r0, #0]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <HAL_TIM_Base_MspInit+0x7c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00a      	beq.n	8003d34 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d22:	d012      	beq.n	8003d4a <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8003d24:	4a1b      	ldr	r2, [pc, #108]	; (8003d94 <HAL_TIM_Base_MspInit+0x80>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01b      	beq.n	8003d62 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_TIM_Base_MspInit+0x84>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d023      	beq.n	8003d78 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003d30:	b004      	add	sp, #16
 8003d32:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d34:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <HAL_TIM_Base_MspInit+0x88>)
 8003d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	9b00      	ldr	r3, [sp, #0]
 8003d48:	e7f2      	b.n	8003d30 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d4a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	9b01      	ldr	r3, [sp, #4]
 8003d60:	e7e6      	b.n	8003d30 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d62:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <HAL_TIM_Base_MspInit+0x88>)
 8003d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d66:	f042 0202 	orr.w	r2, r2, #2
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	9302      	str	r3, [sp, #8]
 8003d74:	9b02      	ldr	r3, [sp, #8]
 8003d76:	e7db      	b.n	8003d30 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <HAL_TIM_Base_MspInit+0x88>)
 8003d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7c:	f042 0204 	orr.w	r2, r2, #4
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	9303      	str	r3, [sp, #12]
 8003d8a:	9b03      	ldr	r3, [sp, #12]
}
 8003d8c:	e7d0      	b.n	8003d30 <HAL_TIM_Base_MspInit+0x1c>
 8003d8e:	bf00      	nop
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40023800 	.word	0x40023800

08003da0 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003da0:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 8003da2:	480c      	ldr	r0, [pc, #48]	; (8003dd4 <MX_UART5_Init+0x34>)
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <MX_UART5_Init+0x38>)
 8003da6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8003da8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003dac:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003dae:	2300      	movs	r3, #0
 8003db0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003db2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003db4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003db6:	220c      	movs	r2, #12
 8003db8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dba:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dbc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dbe:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dc0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003dc2:	f7ff f816 	bl	8002df2 <HAL_UART_Init>
 8003dc6:	b900      	cbnz	r0, 8003dca <MX_UART5_Init+0x2a>
 8003dc8:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8003dca:	214d      	movs	r1, #77	; 0x4d
 8003dcc:	4803      	ldr	r0, [pc, #12]	; (8003ddc <MX_UART5_Init+0x3c>)
 8003dce:	f7ff fb87 	bl	80034e0 <_Error_Handler>
  }

}
 8003dd2:	e7f9      	b.n	8003dc8 <MX_UART5_Init+0x28>
 8003dd4:	20001694 	.word	0x20001694
 8003dd8:	40005000 	.word	0x40005000
 8003ddc:	08005654 	.word	0x08005654

08003de0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8003de0:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 8003de2:	480c      	ldr	r0, [pc, #48]	; (8003e14 <MX_UART7_Init+0x34>)
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <MX_UART7_Init+0x38>)
 8003de6:	6003      	str	r3, [r0, #0]
  huart7.Init.BaudRate = 115200;
 8003de8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003dec:	6043      	str	r3, [r0, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003dee:	2300      	movs	r3, #0
 8003df0:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003df2:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003df4:	6103      	str	r3, [r0, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003df6:	220c      	movs	r2, #12
 8003df8:	6142      	str	r2, [r0, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dfa:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dfc:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dfe:	6203      	str	r3, [r0, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e00:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003e02:	f7fe fff6 	bl	8002df2 <HAL_UART_Init>
 8003e06:	b900      	cbnz	r0, 8003e0a <MX_UART7_Init+0x2a>
 8003e08:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e0a:	2161      	movs	r1, #97	; 0x61
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <MX_UART7_Init+0x3c>)
 8003e0e:	f7ff fb67 	bl	80034e0 <_Error_Handler>
  }

}
 8003e12:	e7f9      	b.n	8003e08 <MX_UART7_Init+0x28>
 8003e14:	20001624 	.word	0x20001624
 8003e18:	40007800 	.word	0x40007800
 8003e1c:	08005654 	.word	0x08005654

08003e20 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8003e20:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8003e22:	480c      	ldr	r0, [pc, #48]	; (8003e54 <MX_UART8_Init+0x34>)
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <MX_UART8_Init+0x38>)
 8003e26:	6003      	str	r3, [r0, #0]
  huart8.Init.BaudRate = 115200;
 8003e28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003e2c:	6043      	str	r3, [r0, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003e32:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003e34:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003e36:	220c      	movs	r2, #12
 8003e38:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e3a:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e3c:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e3e:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e40:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003e42:	f7fe ffd6 	bl	8002df2 <HAL_UART_Init>
 8003e46:	b900      	cbnz	r0, 8003e4a <MX_UART8_Init+0x2a>
 8003e48:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e4a:	2175      	movs	r1, #117	; 0x75
 8003e4c:	4803      	ldr	r0, [pc, #12]	; (8003e5c <MX_UART8_Init+0x3c>)
 8003e4e:	f7ff fb47 	bl	80034e0 <_Error_Handler>
  }

}
 8003e52:	e7f9      	b.n	8003e48 <MX_UART8_Init+0x28>
 8003e54:	20001704 	.word	0x20001704
 8003e58:	40007c00 	.word	0x40007c00
 8003e5c:	08005654 	.word	0x08005654

08003e60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e60:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003e62:	480c      	ldr	r0, [pc, #48]	; (8003e94 <MX_USART2_UART_Init+0x34>)
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <MX_USART2_UART_Init+0x38>)
 8003e66:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003e68:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003e6c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e72:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e74:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e76:	220c      	movs	r2, #12
 8003e78:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e7a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e7c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e7e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e80:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e82:	f7fe ffb6 	bl	8002df2 <HAL_UART_Init>
 8003e86:	b900      	cbnz	r0, 8003e8a <MX_USART2_UART_Init+0x2a>
 8003e88:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e8a:	218a      	movs	r1, #138	; 0x8a
 8003e8c:	4803      	ldr	r0, [pc, #12]	; (8003e9c <MX_USART2_UART_Init+0x3c>)
 8003e8e:	f7ff fb27 	bl	80034e0 <_Error_Handler>
  }

}
 8003e92:	e7f9      	b.n	8003e88 <MX_USART2_UART_Init+0x28>
 8003e94:	20000098 	.word	0x20000098
 8003e98:	40004400 	.word	0x40004400
 8003e9c:	08005654 	.word	0x08005654

08003ea0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ea0:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003ea2:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <MX_USART3_UART_Init+0x34>)
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <MX_USART3_UART_Init+0x38>)
 8003ea6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8003ea8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003eac:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003eb2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003eb4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eba:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ebc:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ebe:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ec0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ec2:	f7fe ff96 	bl	8002df2 <HAL_UART_Init>
 8003ec6:	b900      	cbnz	r0, 8003eca <MX_USART3_UART_Init+0x2a>
 8003ec8:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8003eca:	219f      	movs	r1, #159	; 0x9f
 8003ecc:	4803      	ldr	r0, [pc, #12]	; (8003edc <MX_USART3_UART_Init+0x3c>)
 8003ece:	f7ff fb07 	bl	80034e0 <_Error_Handler>
  }

}
 8003ed2:	e7f9      	b.n	8003ec8 <MX_USART3_UART_Init+0x28>
 8003ed4:	20001074 	.word	0x20001074
 8003ed8:	40004800 	.word	0x40004800
 8003edc:	08005654 	.word	0x08005654

08003ee0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003ee0:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8003ee2:	480c      	ldr	r0, [pc, #48]	; (8003f14 <MX_USART6_UART_Init+0x34>)
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <MX_USART6_UART_Init+0x38>)
 8003ee6:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8003ee8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003eec:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003ef2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003ef4:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003ef6:	220c      	movs	r2, #12
 8003ef8:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003efa:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003efc:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003efe:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f00:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003f02:	f7fe ff76 	bl	8002df2 <HAL_UART_Init>
 8003f06:	b900      	cbnz	r0, 8003f0a <MX_USART6_UART_Init+0x2a>
 8003f08:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8003f0a:	21b4      	movs	r1, #180	; 0xb4
 8003f0c:	4803      	ldr	r0, [pc, #12]	; (8003f1c <MX_USART6_UART_Init+0x3c>)
 8003f0e:	f7ff fae7 	bl	80034e0 <_Error_Handler>
  }

}
 8003f12:	e7f9      	b.n	8003f08 <MX_USART6_UART_Init+0x28>
 8003f14:	20001774 	.word	0x20001774
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	08005654 	.word	0x08005654

08003f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f24:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART5)
 8003f26:	6803      	ldr	r3, [r0, #0]
 8003f28:	4a9e      	ldr	r2, [pc, #632]	; (80041a4 <HAL_UART_MspInit+0x284>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d014      	beq.n	8003f58 <HAL_UART_MspInit+0x38>
 8003f2e:	4604      	mov	r4, r0

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==UART7)
 8003f30:	4a9d      	ldr	r2, [pc, #628]	; (80041a8 <HAL_UART_MspInit+0x288>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d035      	beq.n	8003fa2 <HAL_UART_MspInit+0x82>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 8003f36:	4a9d      	ldr	r2, [pc, #628]	; (80041ac <HAL_UART_MspInit+0x28c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d04b      	beq.n	8003fd4 <HAL_UART_MspInit+0xb4>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8003f3c:	4a9c      	ldr	r2, [pc, #624]	; (80041b0 <HAL_UART_MspInit+0x290>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d060      	beq.n	8004004 <HAL_UART_MspInit+0xe4>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8003f42:	4a9c      	ldr	r2, [pc, #624]	; (80041b4 <HAL_UART_MspInit+0x294>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	f000 80b8 	beq.w	80040ba <HAL_UART_MspInit+0x19a>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 8003f4a:	4a9b      	ldr	r2, [pc, #620]	; (80041b8 <HAL_UART_MspInit+0x298>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	f000 8110 	beq.w	8004172 <HAL_UART_MspInit+0x252>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003f52:	b00c      	add	sp, #48	; 0x30
 8003f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f58:	4b98      	ldr	r3, [pc, #608]	; (80041bc <HAL_UART_MspInit+0x29c>)
 8003f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003f6c:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8003f70:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2702      	movs	r7, #2
 8003f76:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2600      	movs	r6, #0
 8003f7a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7c:	2503      	movs	r5, #3
 8003f7e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003f80:	2408      	movs	r4, #8
 8003f82:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f84:	a907      	add	r1, sp, #28
 8003f86:	488e      	ldr	r0, [pc, #568]	; (80041c0 <HAL_UART_MspInit+0x2a0>)
 8003f88:	f7fc fe7e 	bl	8000c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003f8c:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f94:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003f96:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f98:	a907      	add	r1, sp, #28
 8003f9a:	488a      	ldr	r0, [pc, #552]	; (80041c4 <HAL_UART_MspInit+0x2a4>)
 8003f9c:	f7fc fe74 	bl	8000c88 <HAL_GPIO_Init>
 8003fa0:	e7d7      	b.n	8003f52 <HAL_UART_MspInit+0x32>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003fa2:	4b86      	ldr	r3, [pc, #536]	; (80041bc <HAL_UART_MspInit+0x29c>)
 8003fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fb2:	9302      	str	r3, [sp, #8]
 8003fb4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fb6:	23c0      	movs	r3, #192	; 0xc0
 8003fb8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fca:	a907      	add	r1, sp, #28
 8003fcc:	487e      	ldr	r0, [pc, #504]	; (80041c8 <HAL_UART_MspInit+0x2a8>)
 8003fce:	f7fc fe5b 	bl	8000c88 <HAL_GPIO_Init>
 8003fd2:	e7be      	b.n	8003f52 <HAL_UART_MspInit+0x32>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003fd4:	4b79      	ldr	r3, [pc, #484]	; (80041bc <HAL_UART_MspInit+0x29c>)
 8003fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fe4:	9303      	str	r3, [sp, #12]
 8003fe6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fec:	2202      	movs	r2, #2
 8003fee:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ffa:	a907      	add	r1, sp, #28
 8003ffc:	4873      	ldr	r0, [pc, #460]	; (80041cc <HAL_UART_MspInit+0x2ac>)
 8003ffe:	f7fc fe43 	bl	8000c88 <HAL_GPIO_Init>
 8004002:	e7a6      	b.n	8003f52 <HAL_UART_MspInit+0x32>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004004:	4b6d      	ldr	r3, [pc, #436]	; (80041bc <HAL_UART_MspInit+0x29c>)
 8004006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004008:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	9304      	str	r3, [sp, #16]
 8004016:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = UART2_WIFI_TX_Pin|UART2_WIFI_RX_Pin;
 8004018:	2360      	movs	r3, #96	; 0x60
 800401a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	2302      	movs	r3, #2
 800401e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2500      	movs	r5, #0
 8004022:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004024:	2303      	movs	r3, #3
 8004026:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004028:	2307      	movs	r3, #7
 800402a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800402c:	a907      	add	r1, sp, #28
 800402e:	4868      	ldr	r0, [pc, #416]	; (80041d0 <HAL_UART_MspInit+0x2b0>)
 8004030:	f7fc fe2a 	bl	8000c88 <HAL_GPIO_Init>
		hdma_usart2_rx.Instance = DMA1_Stream5;
 8004034:	4867      	ldr	r0, [pc, #412]	; (80041d4 <HAL_UART_MspInit+0x2b4>)
 8004036:	4b68      	ldr	r3, [pc, #416]	; (80041d8 <HAL_UART_MspInit+0x2b8>)
 8004038:	6003      	str	r3, [r0, #0]
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800403a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800403e:	6043      	str	r3, [r0, #4]
		hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004040:	6085      	str	r5, [r0, #8]
		hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004042:	60c5      	str	r5, [r0, #12]
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004048:	6103      	str	r3, [r0, #16]
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800404a:	6145      	str	r5, [r0, #20]
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800404c:	6185      	str	r5, [r0, #24]
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800404e:	61c5      	str	r5, [r0, #28]
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004050:	6205      	str	r5, [r0, #32]
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004052:	6245      	str	r5, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8004054:	f7fc fc7c 	bl	8000950 <HAL_DMA_Init>
 8004058:	bb18      	cbnz	r0, 80040a2 <HAL_UART_MspInit+0x182>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 800405a:	4b5e      	ldr	r3, [pc, #376]	; (80041d4 <HAL_UART_MspInit+0x2b4>)
 800405c:	6663      	str	r3, [r4, #100]	; 0x64
 800405e:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004060:	485e      	ldr	r0, [pc, #376]	; (80041dc <HAL_UART_MspInit+0x2bc>)
 8004062:	4b5f      	ldr	r3, [pc, #380]	; (80041e0 <HAL_UART_MspInit+0x2c0>)
 8004064:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800406a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004070:	2300      	movs	r3, #0
 8004072:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004078:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800407a:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800407c:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800407e:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004080:	6203      	str	r3, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004082:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004084:	f7fc fc64 	bl	8000950 <HAL_DMA_Init>
 8004088:	b988      	cbnz	r0, 80040ae <HAL_UART_MspInit+0x18e>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800408a:	4b54      	ldr	r3, [pc, #336]	; (80041dc <HAL_UART_MspInit+0x2bc>)
 800408c:	6623      	str	r3, [r4, #96]	; 0x60
 800408e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004090:	2200      	movs	r2, #0
 8004092:	4611      	mov	r1, r2
 8004094:	2026      	movs	r0, #38	; 0x26
 8004096:	f7fc fb15 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800409a:	2026      	movs	r0, #38	; 0x26
 800409c:	f7fc fb42 	bl	8000724 <HAL_NVIC_EnableIRQ>
 80040a0:	e757      	b.n	8003f52 <HAL_UART_MspInit+0x32>
			_Error_Handler(__FILE__, __LINE__);
 80040a2:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80040a6:	484f      	ldr	r0, [pc, #316]	; (80041e4 <HAL_UART_MspInit+0x2c4>)
 80040a8:	f7ff fa1a 	bl	80034e0 <_Error_Handler>
 80040ac:	e7d5      	b.n	800405a <HAL_UART_MspInit+0x13a>
      _Error_Handler(__FILE__, __LINE__);
 80040ae:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80040b2:	484c      	ldr	r0, [pc, #304]	; (80041e4 <HAL_UART_MspInit+0x2c4>)
 80040b4:	f7ff fa14 	bl	80034e0 <_Error_Handler>
 80040b8:	e7e7      	b.n	800408a <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040ba:	4b40      	ldr	r3, [pc, #256]	; (80041bc <HAL_UART_MspInit+0x29c>)
 80040bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ca:	9305      	str	r3, [sp, #20]
 80040cc:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80040ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	2302      	movs	r3, #2
 80040d6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2500      	movs	r5, #0
 80040da:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040dc:	2303      	movs	r3, #3
 80040de:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040e0:	2307      	movs	r3, #7
 80040e2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040e4:	a907      	add	r1, sp, #28
 80040e6:	483a      	ldr	r0, [pc, #232]	; (80041d0 <HAL_UART_MspInit+0x2b0>)
 80040e8:	f7fc fdce 	bl	8000c88 <HAL_GPIO_Init>
		hdma_usart3_rx.Instance = DMA1_Stream1;
 80040ec:	483e      	ldr	r0, [pc, #248]	; (80041e8 <HAL_UART_MspInit+0x2c8>)
 80040ee:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <HAL_UART_MspInit+0x2cc>)
 80040f0:	6003      	str	r3, [r0, #0]
		hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80040f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040f6:	6043      	str	r3, [r0, #4]
		hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040f8:	6085      	str	r5, [r0, #8]
		hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040fa:	60c5      	str	r5, [r0, #12]
		hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004100:	6103      	str	r3, [r0, #16]
		hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004102:	6145      	str	r5, [r0, #20]
		hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004104:	6185      	str	r5, [r0, #24]
		hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004106:	61c5      	str	r5, [r0, #28]
		hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004108:	6205      	str	r5, [r0, #32]
		hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800410a:	6245      	str	r5, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK) {
 800410c:	f7fc fc20 	bl	8000950 <HAL_DMA_Init>
 8004110:	bb18      	cbnz	r0, 800415a <HAL_UART_MspInit+0x23a>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart3_rx);
 8004112:	4b35      	ldr	r3, [pc, #212]	; (80041e8 <HAL_UART_MspInit+0x2c8>)
 8004114:	6663      	str	r3, [r4, #100]	; 0x64
 8004116:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004118:	4835      	ldr	r0, [pc, #212]	; (80041f0 <HAL_UART_MspInit+0x2d0>)
 800411a:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <HAL_UART_MspInit+0x2d4>)
 800411c:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800411e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004122:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004124:	2340      	movs	r3, #64	; 0x40
 8004126:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004128:	2300      	movs	r3, #0
 800412a:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800412c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004130:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004132:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004134:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004136:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004138:	6203      	str	r3, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800413a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800413c:	f7fc fc08 	bl	8000950 <HAL_DMA_Init>
 8004140:	b988      	cbnz	r0, 8004166 <HAL_UART_MspInit+0x246>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004142:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <HAL_UART_MspInit+0x2d0>)
 8004144:	6623      	str	r3, [r4, #96]	; 0x60
 8004146:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004148:	2200      	movs	r2, #0
 800414a:	4611      	mov	r1, r2
 800414c:	2027      	movs	r0, #39	; 0x27
 800414e:	f7fc fab9 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004152:	2027      	movs	r0, #39	; 0x27
 8004154:	f7fc fae6 	bl	8000724 <HAL_NVIC_EnableIRQ>
 8004158:	e6fb      	b.n	8003f52 <HAL_UART_MspInit+0x32>
			_Error_Handler(__FILE__, __LINE__);
 800415a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800415e:	4821      	ldr	r0, [pc, #132]	; (80041e4 <HAL_UART_MspInit+0x2c4>)
 8004160:	f7ff f9be 	bl	80034e0 <_Error_Handler>
 8004164:	e7d5      	b.n	8004112 <HAL_UART_MspInit+0x1f2>
      _Error_Handler(__FILE__, __LINE__);
 8004166:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800416a:	481e      	ldr	r0, [pc, #120]	; (80041e4 <HAL_UART_MspInit+0x2c4>)
 800416c:	f7ff f9b8 	bl	80034e0 <_Error_Handler>
 8004170:	e7e7      	b.n	8004142 <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_UART_MspInit+0x29c>)
 8004174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004176:	f042 0220 	orr.w	r2, r2, #32
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	9306      	str	r3, [sp, #24]
 8004184:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004186:	23c0      	movs	r3, #192	; 0xc0
 8004188:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	2302      	movs	r3, #2
 800418c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004192:	2303      	movs	r3, #3
 8004194:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004196:	2308      	movs	r3, #8
 8004198:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419a:	a907      	add	r1, sp, #28
 800419c:	4809      	ldr	r0, [pc, #36]	; (80041c4 <HAL_UART_MspInit+0x2a4>)
 800419e:	f7fc fd73 	bl	8000c88 <HAL_GPIO_Init>
}
 80041a2:	e6d6      	b.n	8003f52 <HAL_UART_MspInit+0x32>
 80041a4:	40005000 	.word	0x40005000
 80041a8:	40007800 	.word	0x40007800
 80041ac:	40007c00 	.word	0x40007c00
 80041b0:	40004400 	.word	0x40004400
 80041b4:	40004800 	.word	0x40004800
 80041b8:	40011400 	.word	0x40011400
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40020400 	.word	0x40020400
 80041c4:	40020800 	.word	0x40020800
 80041c8:	40021400 	.word	0x40021400
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40020c00 	.word	0x40020c00
 80041d4:	200010f8 	.word	0x200010f8
 80041d8:	40026088 	.word	0x40026088
 80041dc:	200012d8 	.word	0x200012d8
 80041e0:	400260a0 	.word	0x400260a0
 80041e4:	08005654 	.word	0x08005654
 80041e8:	200011b8 	.word	0x200011b8
 80041ec:	40026028 	.word	0x40026028
 80041f0:	20001218 	.word	0x20001218
 80041f4:	40026058 	.word	0x40026058

080041f8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80041f8:	b510      	push	{r4, lr}

  if(uartHandle->Instance==UART5)
 80041fa:	6803      	ldr	r3, [r0, #0]
 80041fc:	4a37      	ldr	r2, [pc, #220]	; (80042dc <HAL_UART_MspDeInit+0xe4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d010      	beq.n	8004224 <HAL_UART_MspDeInit+0x2c>
 8004202:	4604      	mov	r4, r0

  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(uartHandle->Instance==UART7)
 8004204:	4a36      	ldr	r2, [pc, #216]	; (80042e0 <HAL_UART_MspDeInit+0xe8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d01d      	beq.n	8004246 <HAL_UART_MspDeInit+0x4e>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 800420a:	4a36      	ldr	r2, [pc, #216]	; (80042e4 <HAL_UART_MspDeInit+0xec>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d025      	beq.n	800425c <HAL_UART_MspDeInit+0x64>

  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8004210:	4a35      	ldr	r2, [pc, #212]	; (80042e8 <HAL_UART_MspDeInit+0xf0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02d      	beq.n	8004272 <HAL_UART_MspDeInit+0x7a>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8004216:	4a35      	ldr	r2, [pc, #212]	; (80042ec <HAL_UART_MspDeInit+0xf4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d03e      	beq.n	800429a <HAL_UART_MspDeInit+0xa2>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 800421c:	4a34      	ldr	r2, [pc, #208]	; (80042f0 <HAL_UART_MspDeInit+0xf8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d050      	beq.n	80042c4 <HAL_UART_MspDeInit+0xcc>
 8004222:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART5_CLK_DISABLE();
 8004224:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8004228:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800422a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800422e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8004230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004234:	482f      	ldr	r0, [pc, #188]	; (80042f4 <HAL_UART_MspDeInit+0xfc>)
 8004236:	f7fc fe15 	bl	8000e64 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800423a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800423e:	482e      	ldr	r0, [pc, #184]	; (80042f8 <HAL_UART_MspDeInit+0x100>)
 8004240:	f7fc fe10 	bl	8000e64 <HAL_GPIO_DeInit>
 8004244:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART7_CLK_DISABLE();
 8004246:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800424a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800424c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8004252:	21c0      	movs	r1, #192	; 0xc0
 8004254:	4829      	ldr	r0, [pc, #164]	; (80042fc <HAL_UART_MspDeInit+0x104>)
 8004256:	f7fc fe05 	bl	8000e64 <HAL_GPIO_DeInit>
 800425a:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 800425c:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8004260:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004266:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8004268:	2103      	movs	r1, #3
 800426a:	4825      	ldr	r0, [pc, #148]	; (8004300 <HAL_UART_MspDeInit+0x108>)
 800426c:	f7fc fdfa 	bl	8000e64 <HAL_GPIO_DeInit>
 8004270:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_DISABLE();
 8004272:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8004276:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004278:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800427c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, UART2_WIFI_TX_Pin|UART2_WIFI_RX_Pin);
 800427e:	2160      	movs	r1, #96	; 0x60
 8004280:	4820      	ldr	r0, [pc, #128]	; (8004304 <HAL_UART_MspDeInit+0x10c>)
 8004282:	f7fc fdef 	bl	8000e64 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004286:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004288:	f7fc fbca 	bl	8000a20 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800428c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800428e:	f7fc fbc7 	bl	8000a20 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004292:	2026      	movs	r0, #38	; 0x26
 8004294:	f7fc fa52 	bl	800073c <HAL_NVIC_DisableIRQ>
 8004298:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART3_CLK_DISABLE();
 800429a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 800429e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80042a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80042a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80042aa:	4816      	ldr	r0, [pc, #88]	; (8004304 <HAL_UART_MspDeInit+0x10c>)
 80042ac:	f7fc fdda 	bl	8000e64 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80042b0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80042b2:	f7fc fbb5 	bl	8000a20 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80042b6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80042b8:	f7fc fbb2 	bl	8000a20 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80042bc:	2027      	movs	r0, #39	; 0x27
 80042be:	f7fc fa3d 	bl	800073c <HAL_NVIC_DisableIRQ>
 80042c2:	bd10      	pop	{r4, pc}
  {
  /* USER CODE BEGIN USART6_MspDeInit 0 */

  /* USER CODE END USART6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART6_CLK_DISABLE();
 80042c4:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80042c8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80042ca:	f023 0320 	bic.w	r3, r3, #32
 80042ce:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 80042d0:	21c0      	movs	r1, #192	; 0xc0
 80042d2:	4809      	ldr	r0, [pc, #36]	; (80042f8 <HAL_UART_MspDeInit+0x100>)
 80042d4:	f7fc fdc6 	bl	8000e64 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 80042d8:	e7a3      	b.n	8004222 <HAL_UART_MspDeInit+0x2a>
 80042da:	bf00      	nop
 80042dc:	40005000 	.word	0x40005000
 80042e0:	40007800 	.word	0x40007800
 80042e4:	40007c00 	.word	0x40007c00
 80042e8:	40004400 	.word	0x40004400
 80042ec:	40004800 	.word	0x40004800
 80042f0:	40011400 	.word	0x40011400
 80042f4:	40020400 	.word	0x40020400
 80042f8:	40020800 	.word	0x40020800
 80042fc:	40021400 	.word	0x40021400
 8004300:	40021000 	.word	0x40021000
 8004304:	40020c00 	.word	0x40020c00

08004308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800430c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800430e:	e003      	b.n	8004318 <LoopCopyDataInit>

08004310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004316:	3104      	adds	r1, #4

08004318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004318:	480b      	ldr	r0, [pc, #44]	; (8004348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800431c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800431e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004320:	d3f6      	bcc.n	8004310 <CopyDataInit>
  ldr  r2, =_sbss
 8004322:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004324:	e002      	b.n	800432c <LoopFillZerobss>

08004326 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004328:	f842 3b04 	str.w	r3, [r2], #4

0800432c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800432e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004330:	d3f9      	bcc.n	8004326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004332:	f7ff fbe3 	bl	8003afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004336:	f000 f993 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800433a:	f7ff f97f 	bl	800363c <main>
  bx  lr    
 800433e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004340:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004344:	0800570c 	.word	0x0800570c
  ldr  r0, =_sdata
 8004348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800434c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004350:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004354:	200017e8 	.word	0x200017e8

08004358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004358:	e7fe      	b.n	8004358 <ADC_IRQHandler>
	...

0800435c <__errno>:
 800435c:	4b01      	ldr	r3, [pc, #4]	; (8004364 <__errno+0x8>)
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	2000000c 	.word	0x2000000c

08004368 <__sflush_r>:
 8004368:	898a      	ldrh	r2, [r1, #12]
 800436a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800436e:	4605      	mov	r5, r0
 8004370:	0710      	lsls	r0, r2, #28
 8004372:	460c      	mov	r4, r1
 8004374:	d45a      	bmi.n	800442c <__sflush_r+0xc4>
 8004376:	684b      	ldr	r3, [r1, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	dc05      	bgt.n	8004388 <__sflush_r+0x20>
 800437c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	dc02      	bgt.n	8004388 <__sflush_r+0x20>
 8004382:	2000      	movs	r0, #0
 8004384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800438a:	2e00      	cmp	r6, #0
 800438c:	d0f9      	beq.n	8004382 <__sflush_r+0x1a>
 800438e:	2300      	movs	r3, #0
 8004390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004394:	682f      	ldr	r7, [r5, #0]
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	d033      	beq.n	8004402 <__sflush_r+0x9a>
 800439a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	075a      	lsls	r2, r3, #29
 80043a0:	d505      	bpl.n	80043ae <__sflush_r+0x46>
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	1ac0      	subs	r0, r0, r3
 80043a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043a8:	b10b      	cbz	r3, 80043ae <__sflush_r+0x46>
 80043aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ac:	1ac0      	subs	r0, r0, r3
 80043ae:	2300      	movs	r3, #0
 80043b0:	4602      	mov	r2, r0
 80043b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043b4:	6a21      	ldr	r1, [r4, #32]
 80043b6:	4628      	mov	r0, r5
 80043b8:	47b0      	blx	r6
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	d106      	bne.n	80043ce <__sflush_r+0x66>
 80043c0:	6829      	ldr	r1, [r5, #0]
 80043c2:	291d      	cmp	r1, #29
 80043c4:	d84b      	bhi.n	800445e <__sflush_r+0xf6>
 80043c6:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <__sflush_r+0x10c>)
 80043c8:	40ca      	lsrs	r2, r1
 80043ca:	07d6      	lsls	r6, r2, #31
 80043cc:	d547      	bpl.n	800445e <__sflush_r+0xf6>
 80043ce:	2200      	movs	r2, #0
 80043d0:	6062      	str	r2, [r4, #4]
 80043d2:	04d9      	lsls	r1, r3, #19
 80043d4:	6922      	ldr	r2, [r4, #16]
 80043d6:	6022      	str	r2, [r4, #0]
 80043d8:	d504      	bpl.n	80043e4 <__sflush_r+0x7c>
 80043da:	1c42      	adds	r2, r0, #1
 80043dc:	d101      	bne.n	80043e2 <__sflush_r+0x7a>
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	b903      	cbnz	r3, 80043e4 <__sflush_r+0x7c>
 80043e2:	6560      	str	r0, [r4, #84]	; 0x54
 80043e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043e6:	602f      	str	r7, [r5, #0]
 80043e8:	2900      	cmp	r1, #0
 80043ea:	d0ca      	beq.n	8004382 <__sflush_r+0x1a>
 80043ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f0:	4299      	cmp	r1, r3
 80043f2:	d002      	beq.n	80043fa <__sflush_r+0x92>
 80043f4:	4628      	mov	r0, r5
 80043f6:	f000 f95f 	bl	80046b8 <_free_r>
 80043fa:	2000      	movs	r0, #0
 80043fc:	6360      	str	r0, [r4, #52]	; 0x34
 80043fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004402:	6a21      	ldr	r1, [r4, #32]
 8004404:	2301      	movs	r3, #1
 8004406:	4628      	mov	r0, r5
 8004408:	47b0      	blx	r6
 800440a:	1c41      	adds	r1, r0, #1
 800440c:	d1c6      	bne.n	800439c <__sflush_r+0x34>
 800440e:	682b      	ldr	r3, [r5, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0c3      	beq.n	800439c <__sflush_r+0x34>
 8004414:	2b1d      	cmp	r3, #29
 8004416:	d001      	beq.n	800441c <__sflush_r+0xb4>
 8004418:	2b16      	cmp	r3, #22
 800441a:	d101      	bne.n	8004420 <__sflush_r+0xb8>
 800441c:	602f      	str	r7, [r5, #0]
 800441e:	e7b0      	b.n	8004382 <__sflush_r+0x1a>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800442c:	690f      	ldr	r7, [r1, #16]
 800442e:	2f00      	cmp	r7, #0
 8004430:	d0a7      	beq.n	8004382 <__sflush_r+0x1a>
 8004432:	0793      	lsls	r3, r2, #30
 8004434:	680e      	ldr	r6, [r1, #0]
 8004436:	bf08      	it	eq
 8004438:	694b      	ldreq	r3, [r1, #20]
 800443a:	600f      	str	r7, [r1, #0]
 800443c:	bf18      	it	ne
 800443e:	2300      	movne	r3, #0
 8004440:	eba6 0807 	sub.w	r8, r6, r7
 8004444:	608b      	str	r3, [r1, #8]
 8004446:	f1b8 0f00 	cmp.w	r8, #0
 800444a:	dd9a      	ble.n	8004382 <__sflush_r+0x1a>
 800444c:	4643      	mov	r3, r8
 800444e:	463a      	mov	r2, r7
 8004450:	6a21      	ldr	r1, [r4, #32]
 8004452:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004454:	4628      	mov	r0, r5
 8004456:	47b0      	blx	r6
 8004458:	2800      	cmp	r0, #0
 800445a:	dc07      	bgt.n	800446c <__sflush_r+0x104>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800446c:	4407      	add	r7, r0
 800446e:	eba8 0800 	sub.w	r8, r8, r0
 8004472:	e7e8      	b.n	8004446 <__sflush_r+0xde>
 8004474:	20400001 	.word	0x20400001

08004478 <_fflush_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	690b      	ldr	r3, [r1, #16]
 800447c:	4605      	mov	r5, r0
 800447e:	460c      	mov	r4, r1
 8004480:	b1db      	cbz	r3, 80044ba <_fflush_r+0x42>
 8004482:	b118      	cbz	r0, 800448c <_fflush_r+0x14>
 8004484:	6983      	ldr	r3, [r0, #24]
 8004486:	b90b      	cbnz	r3, 800448c <_fflush_r+0x14>
 8004488:	f000 f860 	bl	800454c <__sinit>
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <_fflush_r+0x48>)
 800448e:	429c      	cmp	r4, r3
 8004490:	d109      	bne.n	80044a6 <_fflush_r+0x2e>
 8004492:	686c      	ldr	r4, [r5, #4]
 8004494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004498:	b17b      	cbz	r3, 80044ba <_fflush_r+0x42>
 800449a:	4621      	mov	r1, r4
 800449c:	4628      	mov	r0, r5
 800449e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044a2:	f7ff bf61 	b.w	8004368 <__sflush_r>
 80044a6:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <_fflush_r+0x4c>)
 80044a8:	429c      	cmp	r4, r3
 80044aa:	d101      	bne.n	80044b0 <_fflush_r+0x38>
 80044ac:	68ac      	ldr	r4, [r5, #8]
 80044ae:	e7f1      	b.n	8004494 <_fflush_r+0x1c>
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <_fflush_r+0x50>)
 80044b2:	429c      	cmp	r4, r3
 80044b4:	bf08      	it	eq
 80044b6:	68ec      	ldreq	r4, [r5, #12]
 80044b8:	e7ec      	b.n	8004494 <_fflush_r+0x1c>
 80044ba:	2000      	movs	r0, #0
 80044bc:	bd38      	pop	{r3, r4, r5, pc}
 80044be:	bf00      	nop
 80044c0:	08005684 	.word	0x08005684
 80044c4:	080056a4 	.word	0x080056a4
 80044c8:	08005664 	.word	0x08005664

080044cc <_cleanup_r>:
 80044cc:	4901      	ldr	r1, [pc, #4]	; (80044d4 <_cleanup_r+0x8>)
 80044ce:	f000 b8a9 	b.w	8004624 <_fwalk_reent>
 80044d2:	bf00      	nop
 80044d4:	08004479 	.word	0x08004479

080044d8 <std.isra.0>:
 80044d8:	2300      	movs	r3, #0
 80044da:	b510      	push	{r4, lr}
 80044dc:	4604      	mov	r4, r0
 80044de:	6003      	str	r3, [r0, #0]
 80044e0:	6043      	str	r3, [r0, #4]
 80044e2:	6083      	str	r3, [r0, #8]
 80044e4:	8181      	strh	r1, [r0, #12]
 80044e6:	6643      	str	r3, [r0, #100]	; 0x64
 80044e8:	81c2      	strh	r2, [r0, #14]
 80044ea:	6103      	str	r3, [r0, #16]
 80044ec:	6143      	str	r3, [r0, #20]
 80044ee:	6183      	str	r3, [r0, #24]
 80044f0:	4619      	mov	r1, r3
 80044f2:	2208      	movs	r2, #8
 80044f4:	305c      	adds	r0, #92	; 0x5c
 80044f6:	f000 f8d7 	bl	80046a8 <memset>
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <std.isra.0+0x38>)
 80044fc:	6263      	str	r3, [r4, #36]	; 0x24
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <std.isra.0+0x3c>)
 8004500:	62a3      	str	r3, [r4, #40]	; 0x28
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <std.isra.0+0x40>)
 8004504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <std.isra.0+0x44>)
 8004508:	6224      	str	r4, [r4, #32]
 800450a:	6323      	str	r3, [r4, #48]	; 0x30
 800450c:	bd10      	pop	{r4, pc}
 800450e:	bf00      	nop
 8004510:	08004a85 	.word	0x08004a85
 8004514:	08004aa7 	.word	0x08004aa7
 8004518:	08004adf 	.word	0x08004adf
 800451c:	08004b03 	.word	0x08004b03

08004520 <__sfmoreglue>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	1e4a      	subs	r2, r1, #1
 8004524:	2568      	movs	r5, #104	; 0x68
 8004526:	4355      	muls	r5, r2
 8004528:	460e      	mov	r6, r1
 800452a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800452e:	f000 f911 	bl	8004754 <_malloc_r>
 8004532:	4604      	mov	r4, r0
 8004534:	b140      	cbz	r0, 8004548 <__sfmoreglue+0x28>
 8004536:	2100      	movs	r1, #0
 8004538:	e880 0042 	stmia.w	r0, {r1, r6}
 800453c:	300c      	adds	r0, #12
 800453e:	60a0      	str	r0, [r4, #8]
 8004540:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004544:	f000 f8b0 	bl	80046a8 <memset>
 8004548:	4620      	mov	r0, r4
 800454a:	bd70      	pop	{r4, r5, r6, pc}

0800454c <__sinit>:
 800454c:	6983      	ldr	r3, [r0, #24]
 800454e:	b510      	push	{r4, lr}
 8004550:	4604      	mov	r4, r0
 8004552:	bb33      	cbnz	r3, 80045a2 <__sinit+0x56>
 8004554:	6483      	str	r3, [r0, #72]	; 0x48
 8004556:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004558:	6503      	str	r3, [r0, #80]	; 0x50
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <__sinit+0x58>)
 800455c:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <__sinit+0x5c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6282      	str	r2, [r0, #40]	; 0x28
 8004562:	4298      	cmp	r0, r3
 8004564:	bf04      	itt	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	6183      	streq	r3, [r0, #24]
 800456a:	f000 f81f 	bl	80045ac <__sfp>
 800456e:	6060      	str	r0, [r4, #4]
 8004570:	4620      	mov	r0, r4
 8004572:	f000 f81b 	bl	80045ac <__sfp>
 8004576:	60a0      	str	r0, [r4, #8]
 8004578:	4620      	mov	r0, r4
 800457a:	f000 f817 	bl	80045ac <__sfp>
 800457e:	2200      	movs	r2, #0
 8004580:	60e0      	str	r0, [r4, #12]
 8004582:	2104      	movs	r1, #4
 8004584:	6860      	ldr	r0, [r4, #4]
 8004586:	f7ff ffa7 	bl	80044d8 <std.isra.0>
 800458a:	2201      	movs	r2, #1
 800458c:	2109      	movs	r1, #9
 800458e:	68a0      	ldr	r0, [r4, #8]
 8004590:	f7ff ffa2 	bl	80044d8 <std.isra.0>
 8004594:	2202      	movs	r2, #2
 8004596:	2112      	movs	r1, #18
 8004598:	68e0      	ldr	r0, [r4, #12]
 800459a:	f7ff ff9d 	bl	80044d8 <std.isra.0>
 800459e:	2301      	movs	r3, #1
 80045a0:	61a3      	str	r3, [r4, #24]
 80045a2:	bd10      	pop	{r4, pc}
 80045a4:	080056c4 	.word	0x080056c4
 80045a8:	080044cd 	.word	0x080044cd

080045ac <__sfp>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <__sfp+0x74>)
 80045b0:	681e      	ldr	r6, [r3, #0]
 80045b2:	69b3      	ldr	r3, [r6, #24]
 80045b4:	4607      	mov	r7, r0
 80045b6:	b913      	cbnz	r3, 80045be <__sfp+0x12>
 80045b8:	4630      	mov	r0, r6
 80045ba:	f7ff ffc7 	bl	800454c <__sinit>
 80045be:	3648      	adds	r6, #72	; 0x48
 80045c0:	68b4      	ldr	r4, [r6, #8]
 80045c2:	6873      	ldr	r3, [r6, #4]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	d503      	bpl.n	80045d0 <__sfp+0x24>
 80045c8:	6833      	ldr	r3, [r6, #0]
 80045ca:	b133      	cbz	r3, 80045da <__sfp+0x2e>
 80045cc:	6836      	ldr	r6, [r6, #0]
 80045ce:	e7f7      	b.n	80045c0 <__sfp+0x14>
 80045d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045d4:	b16d      	cbz	r5, 80045f2 <__sfp+0x46>
 80045d6:	3468      	adds	r4, #104	; 0x68
 80045d8:	e7f4      	b.n	80045c4 <__sfp+0x18>
 80045da:	2104      	movs	r1, #4
 80045dc:	4638      	mov	r0, r7
 80045de:	f7ff ff9f 	bl	8004520 <__sfmoreglue>
 80045e2:	6030      	str	r0, [r6, #0]
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d1f1      	bne.n	80045cc <__sfp+0x20>
 80045e8:	230c      	movs	r3, #12
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4604      	mov	r4, r0
 80045ee:	4620      	mov	r0, r4
 80045f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045f6:	81e3      	strh	r3, [r4, #14]
 80045f8:	2301      	movs	r3, #1
 80045fa:	81a3      	strh	r3, [r4, #12]
 80045fc:	6665      	str	r5, [r4, #100]	; 0x64
 80045fe:	6025      	str	r5, [r4, #0]
 8004600:	60a5      	str	r5, [r4, #8]
 8004602:	6065      	str	r5, [r4, #4]
 8004604:	6125      	str	r5, [r4, #16]
 8004606:	6165      	str	r5, [r4, #20]
 8004608:	61a5      	str	r5, [r4, #24]
 800460a:	2208      	movs	r2, #8
 800460c:	4629      	mov	r1, r5
 800460e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004612:	f000 f849 	bl	80046a8 <memset>
 8004616:	6365      	str	r5, [r4, #52]	; 0x34
 8004618:	63a5      	str	r5, [r4, #56]	; 0x38
 800461a:	64a5      	str	r5, [r4, #72]	; 0x48
 800461c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800461e:	e7e6      	b.n	80045ee <__sfp+0x42>
 8004620:	080056c4 	.word	0x080056c4

08004624 <_fwalk_reent>:
 8004624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004628:	4680      	mov	r8, r0
 800462a:	4689      	mov	r9, r1
 800462c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004630:	2600      	movs	r6, #0
 8004632:	b914      	cbnz	r4, 800463a <_fwalk_reent+0x16>
 8004634:	4630      	mov	r0, r6
 8004636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800463a:	68a5      	ldr	r5, [r4, #8]
 800463c:	6867      	ldr	r7, [r4, #4]
 800463e:	3f01      	subs	r7, #1
 8004640:	d501      	bpl.n	8004646 <_fwalk_reent+0x22>
 8004642:	6824      	ldr	r4, [r4, #0]
 8004644:	e7f5      	b.n	8004632 <_fwalk_reent+0xe>
 8004646:	89ab      	ldrh	r3, [r5, #12]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d907      	bls.n	800465c <_fwalk_reent+0x38>
 800464c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004650:	3301      	adds	r3, #1
 8004652:	d003      	beq.n	800465c <_fwalk_reent+0x38>
 8004654:	4629      	mov	r1, r5
 8004656:	4640      	mov	r0, r8
 8004658:	47c8      	blx	r9
 800465a:	4306      	orrs	r6, r0
 800465c:	3568      	adds	r5, #104	; 0x68
 800465e:	e7ee      	b.n	800463e <_fwalk_reent+0x1a>

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4e0d      	ldr	r6, [pc, #52]	; (8004698 <__libc_init_array+0x38>)
 8004664:	4c0d      	ldr	r4, [pc, #52]	; (800469c <__libc_init_array+0x3c>)
 8004666:	1ba4      	subs	r4, r4, r6
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	2500      	movs	r5, #0
 800466c:	42a5      	cmp	r5, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	4e0b      	ldr	r6, [pc, #44]	; (80046a0 <__libc_init_array+0x40>)
 8004672:	4c0c      	ldr	r4, [pc, #48]	; (80046a4 <__libc_init_array+0x44>)
 8004674:	f000 feb6 	bl	80053e4 <_init>
 8004678:	1ba4      	subs	r4, r4, r6
 800467a:	10a4      	asrs	r4, r4, #2
 800467c:	2500      	movs	r5, #0
 800467e:	42a5      	cmp	r5, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004688:	4798      	blx	r3
 800468a:	3501      	adds	r5, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004692:	4798      	blx	r3
 8004694:	3501      	adds	r5, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	08005704 	.word	0x08005704
 800469c:	08005704 	.word	0x08005704
 80046a0:	08005704 	.word	0x08005704
 80046a4:	08005708 	.word	0x08005708

080046a8 <memset>:
 80046a8:	4402      	add	r2, r0
 80046aa:	4603      	mov	r3, r0
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d100      	bne.n	80046b2 <memset+0xa>
 80046b0:	4770      	bx	lr
 80046b2:	f803 1b01 	strb.w	r1, [r3], #1
 80046b6:	e7f9      	b.n	80046ac <memset+0x4>

080046b8 <_free_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4605      	mov	r5, r0
 80046bc:	2900      	cmp	r1, #0
 80046be:	d045      	beq.n	800474c <_free_r+0x94>
 80046c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c4:	1f0c      	subs	r4, r1, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bfb8      	it	lt
 80046ca:	18e4      	addlt	r4, r4, r3
 80046cc:	f000 fb7e 	bl	8004dcc <__malloc_lock>
 80046d0:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <_free_r+0x98>)
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	4610      	mov	r0, r2
 80046d6:	b933      	cbnz	r3, 80046e6 <_free_r+0x2e>
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	6014      	str	r4, [r2, #0]
 80046dc:	4628      	mov	r0, r5
 80046de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046e2:	f000 bb74 	b.w	8004dce <__malloc_unlock>
 80046e6:	42a3      	cmp	r3, r4
 80046e8:	d90c      	bls.n	8004704 <_free_r+0x4c>
 80046ea:	6821      	ldr	r1, [r4, #0]
 80046ec:	1862      	adds	r2, r4, r1
 80046ee:	4293      	cmp	r3, r2
 80046f0:	bf04      	itt	eq
 80046f2:	681a      	ldreq	r2, [r3, #0]
 80046f4:	685b      	ldreq	r3, [r3, #4]
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	bf04      	itt	eq
 80046fa:	1852      	addeq	r2, r2, r1
 80046fc:	6022      	streq	r2, [r4, #0]
 80046fe:	6004      	str	r4, [r0, #0]
 8004700:	e7ec      	b.n	80046dc <_free_r+0x24>
 8004702:	4613      	mov	r3, r2
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	b10a      	cbz	r2, 800470c <_free_r+0x54>
 8004708:	42a2      	cmp	r2, r4
 800470a:	d9fa      	bls.n	8004702 <_free_r+0x4a>
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	1858      	adds	r0, r3, r1
 8004710:	42a0      	cmp	r0, r4
 8004712:	d10b      	bne.n	800472c <_free_r+0x74>
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	4401      	add	r1, r0
 8004718:	1858      	adds	r0, r3, r1
 800471a:	4282      	cmp	r2, r0
 800471c:	6019      	str	r1, [r3, #0]
 800471e:	d1dd      	bne.n	80046dc <_free_r+0x24>
 8004720:	6810      	ldr	r0, [r2, #0]
 8004722:	6852      	ldr	r2, [r2, #4]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	4401      	add	r1, r0
 8004728:	6019      	str	r1, [r3, #0]
 800472a:	e7d7      	b.n	80046dc <_free_r+0x24>
 800472c:	d902      	bls.n	8004734 <_free_r+0x7c>
 800472e:	230c      	movs	r3, #12
 8004730:	602b      	str	r3, [r5, #0]
 8004732:	e7d3      	b.n	80046dc <_free_r+0x24>
 8004734:	6820      	ldr	r0, [r4, #0]
 8004736:	1821      	adds	r1, r4, r0
 8004738:	428a      	cmp	r2, r1
 800473a:	bf04      	itt	eq
 800473c:	6811      	ldreq	r1, [r2, #0]
 800473e:	6852      	ldreq	r2, [r2, #4]
 8004740:	6062      	str	r2, [r4, #4]
 8004742:	bf04      	itt	eq
 8004744:	1809      	addeq	r1, r1, r0
 8004746:	6021      	streq	r1, [r4, #0]
 8004748:	605c      	str	r4, [r3, #4]
 800474a:	e7c7      	b.n	80046dc <_free_r+0x24>
 800474c:	bd38      	pop	{r3, r4, r5, pc}
 800474e:	bf00      	nop
 8004750:	20000090 	.word	0x20000090

08004754 <_malloc_r>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	1ccd      	adds	r5, r1, #3
 8004758:	f025 0503 	bic.w	r5, r5, #3
 800475c:	3508      	adds	r5, #8
 800475e:	2d0c      	cmp	r5, #12
 8004760:	bf38      	it	cc
 8004762:	250c      	movcc	r5, #12
 8004764:	2d00      	cmp	r5, #0
 8004766:	4606      	mov	r6, r0
 8004768:	db01      	blt.n	800476e <_malloc_r+0x1a>
 800476a:	42a9      	cmp	r1, r5
 800476c:	d903      	bls.n	8004776 <_malloc_r+0x22>
 800476e:	230c      	movs	r3, #12
 8004770:	6033      	str	r3, [r6, #0]
 8004772:	2000      	movs	r0, #0
 8004774:	bd70      	pop	{r4, r5, r6, pc}
 8004776:	f000 fb29 	bl	8004dcc <__malloc_lock>
 800477a:	4a23      	ldr	r2, [pc, #140]	; (8004808 <_malloc_r+0xb4>)
 800477c:	6814      	ldr	r4, [r2, #0]
 800477e:	4621      	mov	r1, r4
 8004780:	b991      	cbnz	r1, 80047a8 <_malloc_r+0x54>
 8004782:	4c22      	ldr	r4, [pc, #136]	; (800480c <_malloc_r+0xb8>)
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	b91b      	cbnz	r3, 8004790 <_malloc_r+0x3c>
 8004788:	4630      	mov	r0, r6
 800478a:	f000 f8bd 	bl	8004908 <_sbrk_r>
 800478e:	6020      	str	r0, [r4, #0]
 8004790:	4629      	mov	r1, r5
 8004792:	4630      	mov	r0, r6
 8004794:	f000 f8b8 	bl	8004908 <_sbrk_r>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d126      	bne.n	80047ea <_malloc_r+0x96>
 800479c:	230c      	movs	r3, #12
 800479e:	6033      	str	r3, [r6, #0]
 80047a0:	4630      	mov	r0, r6
 80047a2:	f000 fb14 	bl	8004dce <__malloc_unlock>
 80047a6:	e7e4      	b.n	8004772 <_malloc_r+0x1e>
 80047a8:	680b      	ldr	r3, [r1, #0]
 80047aa:	1b5b      	subs	r3, r3, r5
 80047ac:	d41a      	bmi.n	80047e4 <_malloc_r+0x90>
 80047ae:	2b0b      	cmp	r3, #11
 80047b0:	d90f      	bls.n	80047d2 <_malloc_r+0x7e>
 80047b2:	600b      	str	r3, [r1, #0]
 80047b4:	50cd      	str	r5, [r1, r3]
 80047b6:	18cc      	adds	r4, r1, r3
 80047b8:	4630      	mov	r0, r6
 80047ba:	f000 fb08 	bl	8004dce <__malloc_unlock>
 80047be:	f104 000b 	add.w	r0, r4, #11
 80047c2:	1d23      	adds	r3, r4, #4
 80047c4:	f020 0007 	bic.w	r0, r0, #7
 80047c8:	1ac3      	subs	r3, r0, r3
 80047ca:	d01b      	beq.n	8004804 <_malloc_r+0xb0>
 80047cc:	425a      	negs	r2, r3
 80047ce:	50e2      	str	r2, [r4, r3]
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
 80047d2:	428c      	cmp	r4, r1
 80047d4:	bf0d      	iteet	eq
 80047d6:	6863      	ldreq	r3, [r4, #4]
 80047d8:	684b      	ldrne	r3, [r1, #4]
 80047da:	6063      	strne	r3, [r4, #4]
 80047dc:	6013      	streq	r3, [r2, #0]
 80047de:	bf18      	it	ne
 80047e0:	460c      	movne	r4, r1
 80047e2:	e7e9      	b.n	80047b8 <_malloc_r+0x64>
 80047e4:	460c      	mov	r4, r1
 80047e6:	6849      	ldr	r1, [r1, #4]
 80047e8:	e7ca      	b.n	8004780 <_malloc_r+0x2c>
 80047ea:	1cc4      	adds	r4, r0, #3
 80047ec:	f024 0403 	bic.w	r4, r4, #3
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d005      	beq.n	8004800 <_malloc_r+0xac>
 80047f4:	1a21      	subs	r1, r4, r0
 80047f6:	4630      	mov	r0, r6
 80047f8:	f000 f886 	bl	8004908 <_sbrk_r>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d0cd      	beq.n	800479c <_malloc_r+0x48>
 8004800:	6025      	str	r5, [r4, #0]
 8004802:	e7d9      	b.n	80047b8 <_malloc_r+0x64>
 8004804:	bd70      	pop	{r4, r5, r6, pc}
 8004806:	bf00      	nop
 8004808:	20000090 	.word	0x20000090
 800480c:	20000094 	.word	0x20000094

08004810 <iprintf>:
 8004810:	b40f      	push	{r0, r1, r2, r3}
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <iprintf+0x2c>)
 8004814:	b513      	push	{r0, r1, r4, lr}
 8004816:	681c      	ldr	r4, [r3, #0]
 8004818:	b124      	cbz	r4, 8004824 <iprintf+0x14>
 800481a:	69a3      	ldr	r3, [r4, #24]
 800481c:	b913      	cbnz	r3, 8004824 <iprintf+0x14>
 800481e:	4620      	mov	r0, r4
 8004820:	f7ff fe94 	bl	800454c <__sinit>
 8004824:	ab05      	add	r3, sp, #20
 8004826:	9a04      	ldr	r2, [sp, #16]
 8004828:	68a1      	ldr	r1, [r4, #8]
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	4620      	mov	r0, r4
 800482e:	f000 faf9 	bl	8004e24 <_vfiprintf_r>
 8004832:	b002      	add	sp, #8
 8004834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004838:	b004      	add	sp, #16
 800483a:	4770      	bx	lr
 800483c:	2000000c 	.word	0x2000000c

08004840 <_puts_r>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	460e      	mov	r6, r1
 8004844:	4605      	mov	r5, r0
 8004846:	b118      	cbz	r0, 8004850 <_puts_r+0x10>
 8004848:	6983      	ldr	r3, [r0, #24]
 800484a:	b90b      	cbnz	r3, 8004850 <_puts_r+0x10>
 800484c:	f7ff fe7e 	bl	800454c <__sinit>
 8004850:	69ab      	ldr	r3, [r5, #24]
 8004852:	68ac      	ldr	r4, [r5, #8]
 8004854:	b913      	cbnz	r3, 800485c <_puts_r+0x1c>
 8004856:	4628      	mov	r0, r5
 8004858:	f7ff fe78 	bl	800454c <__sinit>
 800485c:	4b23      	ldr	r3, [pc, #140]	; (80048ec <_puts_r+0xac>)
 800485e:	429c      	cmp	r4, r3
 8004860:	d117      	bne.n	8004892 <_puts_r+0x52>
 8004862:	686c      	ldr	r4, [r5, #4]
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	071b      	lsls	r3, r3, #28
 8004868:	d51d      	bpl.n	80048a6 <_puts_r+0x66>
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	b1db      	cbz	r3, 80048a6 <_puts_r+0x66>
 800486e:	3e01      	subs	r6, #1
 8004870:	68a3      	ldr	r3, [r4, #8]
 8004872:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004876:	3b01      	subs	r3, #1
 8004878:	60a3      	str	r3, [r4, #8]
 800487a:	b9e9      	cbnz	r1, 80048b8 <_puts_r+0x78>
 800487c:	2b00      	cmp	r3, #0
 800487e:	da2e      	bge.n	80048de <_puts_r+0x9e>
 8004880:	4622      	mov	r2, r4
 8004882:	210a      	movs	r1, #10
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f941 	bl	8004b0c <__swbuf_r>
 800488a:	3001      	adds	r0, #1
 800488c:	d011      	beq.n	80048b2 <_puts_r+0x72>
 800488e:	200a      	movs	r0, #10
 8004890:	bd70      	pop	{r4, r5, r6, pc}
 8004892:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <_puts_r+0xb0>)
 8004894:	429c      	cmp	r4, r3
 8004896:	d101      	bne.n	800489c <_puts_r+0x5c>
 8004898:	68ac      	ldr	r4, [r5, #8]
 800489a:	e7e3      	b.n	8004864 <_puts_r+0x24>
 800489c:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <_puts_r+0xb4>)
 800489e:	429c      	cmp	r4, r3
 80048a0:	bf08      	it	eq
 80048a2:	68ec      	ldreq	r4, [r5, #12]
 80048a4:	e7de      	b.n	8004864 <_puts_r+0x24>
 80048a6:	4621      	mov	r1, r4
 80048a8:	4628      	mov	r0, r5
 80048aa:	f000 f993 	bl	8004bd4 <__swsetup_r>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d0dd      	beq.n	800486e <_puts_r+0x2e>
 80048b2:	f04f 30ff 	mov.w	r0, #4294967295
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	da04      	bge.n	80048c6 <_puts_r+0x86>
 80048bc:	69a2      	ldr	r2, [r4, #24]
 80048be:	4293      	cmp	r3, r2
 80048c0:	db06      	blt.n	80048d0 <_puts_r+0x90>
 80048c2:	290a      	cmp	r1, #10
 80048c4:	d004      	beq.n	80048d0 <_puts_r+0x90>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	6022      	str	r2, [r4, #0]
 80048cc:	7019      	strb	r1, [r3, #0]
 80048ce:	e7cf      	b.n	8004870 <_puts_r+0x30>
 80048d0:	4622      	mov	r2, r4
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 f91a 	bl	8004b0c <__swbuf_r>
 80048d8:	3001      	adds	r0, #1
 80048da:	d1c9      	bne.n	8004870 <_puts_r+0x30>
 80048dc:	e7e9      	b.n	80048b2 <_puts_r+0x72>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	200a      	movs	r0, #10
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	7018      	strb	r0, [r3, #0]
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
 80048ea:	bf00      	nop
 80048ec:	08005684 	.word	0x08005684
 80048f0:	080056a4 	.word	0x080056a4
 80048f4:	08005664 	.word	0x08005664

080048f8 <puts>:
 80048f8:	4b02      	ldr	r3, [pc, #8]	; (8004904 <puts+0xc>)
 80048fa:	4601      	mov	r1, r0
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	f7ff bf9f 	b.w	8004840 <_puts_r>
 8004902:	bf00      	nop
 8004904:	2000000c 	.word	0x2000000c

08004908 <_sbrk_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4c06      	ldr	r4, [pc, #24]	; (8004924 <_sbrk_r+0x1c>)
 800490c:	2300      	movs	r3, #0
 800490e:	4605      	mov	r5, r0
 8004910:	4608      	mov	r0, r1
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	f7ff f8c8 	bl	8003aa8 <_sbrk>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_sbrk_r+0x1a>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	b103      	cbz	r3, 8004922 <_sbrk_r+0x1a>
 8004920:	602b      	str	r3, [r5, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	200017e4 	.word	0x200017e4

08004928 <setvbuf>:
 8004928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800492c:	461d      	mov	r5, r3
 800492e:	4b51      	ldr	r3, [pc, #324]	; (8004a74 <setvbuf+0x14c>)
 8004930:	681e      	ldr	r6, [r3, #0]
 8004932:	4604      	mov	r4, r0
 8004934:	460f      	mov	r7, r1
 8004936:	4690      	mov	r8, r2
 8004938:	b126      	cbz	r6, 8004944 <setvbuf+0x1c>
 800493a:	69b3      	ldr	r3, [r6, #24]
 800493c:	b913      	cbnz	r3, 8004944 <setvbuf+0x1c>
 800493e:	4630      	mov	r0, r6
 8004940:	f7ff fe04 	bl	800454c <__sinit>
 8004944:	4b4c      	ldr	r3, [pc, #304]	; (8004a78 <setvbuf+0x150>)
 8004946:	429c      	cmp	r4, r3
 8004948:	d152      	bne.n	80049f0 <setvbuf+0xc8>
 800494a:	6874      	ldr	r4, [r6, #4]
 800494c:	f1b8 0f02 	cmp.w	r8, #2
 8004950:	d006      	beq.n	8004960 <setvbuf+0x38>
 8004952:	f1b8 0f01 	cmp.w	r8, #1
 8004956:	f200 8089 	bhi.w	8004a6c <setvbuf+0x144>
 800495a:	2d00      	cmp	r5, #0
 800495c:	f2c0 8086 	blt.w	8004a6c <setvbuf+0x144>
 8004960:	4621      	mov	r1, r4
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff fd88 	bl	8004478 <_fflush_r>
 8004968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800496a:	b141      	cbz	r1, 800497e <setvbuf+0x56>
 800496c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004970:	4299      	cmp	r1, r3
 8004972:	d002      	beq.n	800497a <setvbuf+0x52>
 8004974:	4630      	mov	r0, r6
 8004976:	f7ff fe9f 	bl	80046b8 <_free_r>
 800497a:	2300      	movs	r3, #0
 800497c:	6363      	str	r3, [r4, #52]	; 0x34
 800497e:	2300      	movs	r3, #0
 8004980:	61a3      	str	r3, [r4, #24]
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	061b      	lsls	r3, r3, #24
 8004988:	d503      	bpl.n	8004992 <setvbuf+0x6a>
 800498a:	6921      	ldr	r1, [r4, #16]
 800498c:	4630      	mov	r0, r6
 800498e:	f7ff fe93 	bl	80046b8 <_free_r>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004998:	f023 0303 	bic.w	r3, r3, #3
 800499c:	f1b8 0f02 	cmp.w	r8, #2
 80049a0:	81a3      	strh	r3, [r4, #12]
 80049a2:	d05d      	beq.n	8004a60 <setvbuf+0x138>
 80049a4:	ab01      	add	r3, sp, #4
 80049a6:	466a      	mov	r2, sp
 80049a8:	4621      	mov	r1, r4
 80049aa:	4630      	mov	r0, r6
 80049ac:	f000 f9a2 	bl	8004cf4 <__swhatbuf_r>
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	4318      	orrs	r0, r3
 80049b4:	81a0      	strh	r0, [r4, #12]
 80049b6:	bb2d      	cbnz	r5, 8004a04 <setvbuf+0xdc>
 80049b8:	9d00      	ldr	r5, [sp, #0]
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 f9fe 	bl	8004dbc <malloc>
 80049c0:	4607      	mov	r7, r0
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d14e      	bne.n	8004a64 <setvbuf+0x13c>
 80049c6:	f8dd 9000 	ldr.w	r9, [sp]
 80049ca:	45a9      	cmp	r9, r5
 80049cc:	d13c      	bne.n	8004a48 <setvbuf+0x120>
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	2300      	movs	r3, #0
 80049dc:	60a3      	str	r3, [r4, #8]
 80049de:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049e2:	6023      	str	r3, [r4, #0]
 80049e4:	6123      	str	r3, [r4, #16]
 80049e6:	2301      	movs	r3, #1
 80049e8:	6163      	str	r3, [r4, #20]
 80049ea:	b003      	add	sp, #12
 80049ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049f0:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <setvbuf+0x154>)
 80049f2:	429c      	cmp	r4, r3
 80049f4:	d101      	bne.n	80049fa <setvbuf+0xd2>
 80049f6:	68b4      	ldr	r4, [r6, #8]
 80049f8:	e7a8      	b.n	800494c <setvbuf+0x24>
 80049fa:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <setvbuf+0x158>)
 80049fc:	429c      	cmp	r4, r3
 80049fe:	bf08      	it	eq
 8004a00:	68f4      	ldreq	r4, [r6, #12]
 8004a02:	e7a3      	b.n	800494c <setvbuf+0x24>
 8004a04:	2f00      	cmp	r7, #0
 8004a06:	d0d8      	beq.n	80049ba <setvbuf+0x92>
 8004a08:	69b3      	ldr	r3, [r6, #24]
 8004a0a:	b913      	cbnz	r3, 8004a12 <setvbuf+0xea>
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f7ff fd9d 	bl	800454c <__sinit>
 8004a12:	f1b8 0f01 	cmp.w	r8, #1
 8004a16:	bf08      	it	eq
 8004a18:	89a3      	ldrheq	r3, [r4, #12]
 8004a1a:	6027      	str	r7, [r4, #0]
 8004a1c:	bf04      	itt	eq
 8004a1e:	f043 0301 	orreq.w	r3, r3, #1
 8004a22:	81a3      	strheq	r3, [r4, #12]
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	6127      	str	r7, [r4, #16]
 8004a28:	f013 0008 	ands.w	r0, r3, #8
 8004a2c:	6165      	str	r5, [r4, #20]
 8004a2e:	d01b      	beq.n	8004a68 <setvbuf+0x140>
 8004a30:	f013 0001 	ands.w	r0, r3, #1
 8004a34:	bf18      	it	ne
 8004a36:	426d      	negne	r5, r5
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	bf1d      	ittte	ne
 8004a3e:	60a3      	strne	r3, [r4, #8]
 8004a40:	61a5      	strne	r5, [r4, #24]
 8004a42:	4618      	movne	r0, r3
 8004a44:	60a5      	streq	r5, [r4, #8]
 8004a46:	e7d0      	b.n	80049ea <setvbuf+0xc2>
 8004a48:	4648      	mov	r0, r9
 8004a4a:	f000 f9b7 	bl	8004dbc <malloc>
 8004a4e:	4607      	mov	r7, r0
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d0bc      	beq.n	80049ce <setvbuf+0xa6>
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	464d      	mov	r5, r9
 8004a5e:	e7d3      	b.n	8004a08 <setvbuf+0xe0>
 8004a60:	2000      	movs	r0, #0
 8004a62:	e7b6      	b.n	80049d2 <setvbuf+0xaa>
 8004a64:	46a9      	mov	r9, r5
 8004a66:	e7f5      	b.n	8004a54 <setvbuf+0x12c>
 8004a68:	60a0      	str	r0, [r4, #8]
 8004a6a:	e7be      	b.n	80049ea <setvbuf+0xc2>
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a70:	e7bb      	b.n	80049ea <setvbuf+0xc2>
 8004a72:	bf00      	nop
 8004a74:	2000000c 	.word	0x2000000c
 8004a78:	08005684 	.word	0x08005684
 8004a7c:	080056a4 	.word	0x080056a4
 8004a80:	08005664 	.word	0x08005664

08004a84 <__sread>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	460c      	mov	r4, r1
 8004a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8c:	f000 fc76 	bl	800537c <_read_r>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	bfab      	itete	ge
 8004a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a96:	89a3      	ldrhlt	r3, [r4, #12]
 8004a98:	181b      	addge	r3, r3, r0
 8004a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a9e:	bfac      	ite	ge
 8004aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004aa2:	81a3      	strhlt	r3, [r4, #12]
 8004aa4:	bd10      	pop	{r4, pc}

08004aa6 <__swrite>:
 8004aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aaa:	461f      	mov	r7, r3
 8004aac:	898b      	ldrh	r3, [r1, #12]
 8004aae:	05db      	lsls	r3, r3, #23
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	4616      	mov	r6, r2
 8004ab6:	d505      	bpl.n	8004ac4 <__swrite+0x1e>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	2200      	movs	r2, #0
 8004abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac0:	f000 f906 	bl	8004cd0 <_lseek_r>
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ace:	81a3      	strh	r3, [r4, #12]
 8004ad0:	4632      	mov	r2, r6
 8004ad2:	463b      	mov	r3, r7
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ada:	f000 b869 	b.w	8004bb0 <_write_r>

08004ade <__sseek>:
 8004ade:	b510      	push	{r4, lr}
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae6:	f000 f8f3 	bl	8004cd0 <_lseek_r>
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	bf15      	itete	ne
 8004af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004afa:	81a3      	strheq	r3, [r4, #12]
 8004afc:	bf18      	it	ne
 8004afe:	81a3      	strhne	r3, [r4, #12]
 8004b00:	bd10      	pop	{r4, pc}

08004b02 <__sclose>:
 8004b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b06:	f000 b8d3 	b.w	8004cb0 <_close_r>
	...

08004b0c <__swbuf_r>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	460e      	mov	r6, r1
 8004b10:	4614      	mov	r4, r2
 8004b12:	4605      	mov	r5, r0
 8004b14:	b118      	cbz	r0, 8004b1e <__swbuf_r+0x12>
 8004b16:	6983      	ldr	r3, [r0, #24]
 8004b18:	b90b      	cbnz	r3, 8004b1e <__swbuf_r+0x12>
 8004b1a:	f7ff fd17 	bl	800454c <__sinit>
 8004b1e:	4b21      	ldr	r3, [pc, #132]	; (8004ba4 <__swbuf_r+0x98>)
 8004b20:	429c      	cmp	r4, r3
 8004b22:	d12a      	bne.n	8004b7a <__swbuf_r+0x6e>
 8004b24:	686c      	ldr	r4, [r5, #4]
 8004b26:	69a3      	ldr	r3, [r4, #24]
 8004b28:	60a3      	str	r3, [r4, #8]
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	071a      	lsls	r2, r3, #28
 8004b2e:	d52e      	bpl.n	8004b8e <__swbuf_r+0x82>
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	b363      	cbz	r3, 8004b8e <__swbuf_r+0x82>
 8004b34:	6923      	ldr	r3, [r4, #16]
 8004b36:	6820      	ldr	r0, [r4, #0]
 8004b38:	1ac0      	subs	r0, r0, r3
 8004b3a:	6963      	ldr	r3, [r4, #20]
 8004b3c:	b2f6      	uxtb	r6, r6
 8004b3e:	4298      	cmp	r0, r3
 8004b40:	4637      	mov	r7, r6
 8004b42:	db04      	blt.n	8004b4e <__swbuf_r+0x42>
 8004b44:	4621      	mov	r1, r4
 8004b46:	4628      	mov	r0, r5
 8004b48:	f7ff fc96 	bl	8004478 <_fflush_r>
 8004b4c:	bb28      	cbnz	r0, 8004b9a <__swbuf_r+0x8e>
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	60a3      	str	r3, [r4, #8]
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	6022      	str	r2, [r4, #0]
 8004b5a:	701e      	strb	r6, [r3, #0]
 8004b5c:	6963      	ldr	r3, [r4, #20]
 8004b5e:	3001      	adds	r0, #1
 8004b60:	4298      	cmp	r0, r3
 8004b62:	d004      	beq.n	8004b6e <__swbuf_r+0x62>
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	07db      	lsls	r3, r3, #31
 8004b68:	d519      	bpl.n	8004b9e <__swbuf_r+0x92>
 8004b6a:	2e0a      	cmp	r6, #10
 8004b6c:	d117      	bne.n	8004b9e <__swbuf_r+0x92>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f7ff fc81 	bl	8004478 <_fflush_r>
 8004b76:	b190      	cbz	r0, 8004b9e <__swbuf_r+0x92>
 8004b78:	e00f      	b.n	8004b9a <__swbuf_r+0x8e>
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <__swbuf_r+0x9c>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	d101      	bne.n	8004b84 <__swbuf_r+0x78>
 8004b80:	68ac      	ldr	r4, [r5, #8]
 8004b82:	e7d0      	b.n	8004b26 <__swbuf_r+0x1a>
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <__swbuf_r+0xa0>)
 8004b86:	429c      	cmp	r4, r3
 8004b88:	bf08      	it	eq
 8004b8a:	68ec      	ldreq	r4, [r5, #12]
 8004b8c:	e7cb      	b.n	8004b26 <__swbuf_r+0x1a>
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4628      	mov	r0, r5
 8004b92:	f000 f81f 	bl	8004bd4 <__swsetup_r>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d0cc      	beq.n	8004b34 <__swbuf_r+0x28>
 8004b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	08005684 	.word	0x08005684
 8004ba8:	080056a4 	.word	0x080056a4
 8004bac:	08005664 	.word	0x08005664

08004bb0 <_write_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4c07      	ldr	r4, [pc, #28]	; (8004bd0 <_write_r+0x20>)
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	4611      	mov	r1, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	6022      	str	r2, [r4, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7fe ff63 	bl	8003a8a <_write>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_write_r+0x1e>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_write_r+0x1e>
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	200017e4 	.word	0x200017e4

08004bd4 <__swsetup_r>:
 8004bd4:	4b32      	ldr	r3, [pc, #200]	; (8004ca0 <__swsetup_r+0xcc>)
 8004bd6:	b570      	push	{r4, r5, r6, lr}
 8004bd8:	681d      	ldr	r5, [r3, #0]
 8004bda:	4606      	mov	r6, r0
 8004bdc:	460c      	mov	r4, r1
 8004bde:	b125      	cbz	r5, 8004bea <__swsetup_r+0x16>
 8004be0:	69ab      	ldr	r3, [r5, #24]
 8004be2:	b913      	cbnz	r3, 8004bea <__swsetup_r+0x16>
 8004be4:	4628      	mov	r0, r5
 8004be6:	f7ff fcb1 	bl	800454c <__sinit>
 8004bea:	4b2e      	ldr	r3, [pc, #184]	; (8004ca4 <__swsetup_r+0xd0>)
 8004bec:	429c      	cmp	r4, r3
 8004bee:	d10f      	bne.n	8004c10 <__swsetup_r+0x3c>
 8004bf0:	686c      	ldr	r4, [r5, #4]
 8004bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	0715      	lsls	r5, r2, #28
 8004bfa:	d42c      	bmi.n	8004c56 <__swsetup_r+0x82>
 8004bfc:	06d0      	lsls	r0, r2, #27
 8004bfe:	d411      	bmi.n	8004c24 <__swsetup_r+0x50>
 8004c00:	2209      	movs	r2, #9
 8004c02:	6032      	str	r2, [r6, #0]
 8004c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	4b25      	ldr	r3, [pc, #148]	; (8004ca8 <__swsetup_r+0xd4>)
 8004c12:	429c      	cmp	r4, r3
 8004c14:	d101      	bne.n	8004c1a <__swsetup_r+0x46>
 8004c16:	68ac      	ldr	r4, [r5, #8]
 8004c18:	e7eb      	b.n	8004bf2 <__swsetup_r+0x1e>
 8004c1a:	4b24      	ldr	r3, [pc, #144]	; (8004cac <__swsetup_r+0xd8>)
 8004c1c:	429c      	cmp	r4, r3
 8004c1e:	bf08      	it	eq
 8004c20:	68ec      	ldreq	r4, [r5, #12]
 8004c22:	e7e6      	b.n	8004bf2 <__swsetup_r+0x1e>
 8004c24:	0751      	lsls	r1, r2, #29
 8004c26:	d512      	bpl.n	8004c4e <__swsetup_r+0x7a>
 8004c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c2a:	b141      	cbz	r1, 8004c3e <__swsetup_r+0x6a>
 8004c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c30:	4299      	cmp	r1, r3
 8004c32:	d002      	beq.n	8004c3a <__swsetup_r+0x66>
 8004c34:	4630      	mov	r0, r6
 8004c36:	f7ff fd3f 	bl	80046b8 <_free_r>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c44:	81a3      	strh	r3, [r4, #12]
 8004c46:	2300      	movs	r3, #0
 8004c48:	6063      	str	r3, [r4, #4]
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	f043 0308 	orr.w	r3, r3, #8
 8004c54:	81a3      	strh	r3, [r4, #12]
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	b94b      	cbnz	r3, 8004c6e <__swsetup_r+0x9a>
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c64:	d003      	beq.n	8004c6e <__swsetup_r+0x9a>
 8004c66:	4621      	mov	r1, r4
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f000 f867 	bl	8004d3c <__smakebuf_r>
 8004c6e:	89a2      	ldrh	r2, [r4, #12]
 8004c70:	f012 0301 	ands.w	r3, r2, #1
 8004c74:	d00c      	beq.n	8004c90 <__swsetup_r+0xbc>
 8004c76:	2300      	movs	r3, #0
 8004c78:	60a3      	str	r3, [r4, #8]
 8004c7a:	6963      	ldr	r3, [r4, #20]
 8004c7c:	425b      	negs	r3, r3
 8004c7e:	61a3      	str	r3, [r4, #24]
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	b953      	cbnz	r3, 8004c9a <__swsetup_r+0xc6>
 8004c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004c8c:	d1ba      	bne.n	8004c04 <__swsetup_r+0x30>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	0792      	lsls	r2, r2, #30
 8004c92:	bf58      	it	pl
 8004c94:	6963      	ldrpl	r3, [r4, #20]
 8004c96:	60a3      	str	r3, [r4, #8]
 8004c98:	e7f2      	b.n	8004c80 <__swsetup_r+0xac>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e7f7      	b.n	8004c8e <__swsetup_r+0xba>
 8004c9e:	bf00      	nop
 8004ca0:	2000000c 	.word	0x2000000c
 8004ca4:	08005684 	.word	0x08005684
 8004ca8:	080056a4 	.word	0x080056a4
 8004cac:	08005664 	.word	0x08005664

08004cb0 <_close_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4c06      	ldr	r4, [pc, #24]	; (8004ccc <_close_r+0x1c>)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	4608      	mov	r0, r1
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	f7fe ff12 	bl	8003ae4 <_close>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_close_r+0x1a>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_close_r+0x1a>
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	200017e4 	.word	0x200017e4

08004cd0 <_lseek_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4c07      	ldr	r4, [pc, #28]	; (8004cf0 <_lseek_r+0x20>)
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	4608      	mov	r0, r1
 8004cd8:	4611      	mov	r1, r2
 8004cda:	2200      	movs	r2, #0
 8004cdc:	6022      	str	r2, [r4, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f7fe ff0a 	bl	8003af8 <_lseek>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_lseek_r+0x1e>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_lseek_r+0x1e>
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	200017e4 	.word	0x200017e4

08004cf4 <__swhatbuf_r>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	460e      	mov	r6, r1
 8004cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	b090      	sub	sp, #64	; 0x40
 8004d00:	4614      	mov	r4, r2
 8004d02:	461d      	mov	r5, r3
 8004d04:	da07      	bge.n	8004d16 <__swhatbuf_r+0x22>
 8004d06:	2300      	movs	r3, #0
 8004d08:	602b      	str	r3, [r5, #0]
 8004d0a:	89b3      	ldrh	r3, [r6, #12]
 8004d0c:	061a      	lsls	r2, r3, #24
 8004d0e:	d410      	bmi.n	8004d32 <__swhatbuf_r+0x3e>
 8004d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d14:	e00e      	b.n	8004d34 <__swhatbuf_r+0x40>
 8004d16:	aa01      	add	r2, sp, #4
 8004d18:	f000 fb42 	bl	80053a0 <_fstat_r>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	dbf2      	blt.n	8004d06 <__swhatbuf_r+0x12>
 8004d20:	9a02      	ldr	r2, [sp, #8]
 8004d22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d2a:	425a      	negs	r2, r3
 8004d2c:	415a      	adcs	r2, r3
 8004d2e:	602a      	str	r2, [r5, #0]
 8004d30:	e7ee      	b.n	8004d10 <__swhatbuf_r+0x1c>
 8004d32:	2340      	movs	r3, #64	; 0x40
 8004d34:	2000      	movs	r0, #0
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	b010      	add	sp, #64	; 0x40
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}

08004d3c <__smakebuf_r>:
 8004d3c:	898b      	ldrh	r3, [r1, #12]
 8004d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d40:	079d      	lsls	r5, r3, #30
 8004d42:	4606      	mov	r6, r0
 8004d44:	460c      	mov	r4, r1
 8004d46:	d507      	bpl.n	8004d58 <__smakebuf_r+0x1c>
 8004d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	6123      	str	r3, [r4, #16]
 8004d50:	2301      	movs	r3, #1
 8004d52:	6163      	str	r3, [r4, #20]
 8004d54:	b002      	add	sp, #8
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	ab01      	add	r3, sp, #4
 8004d5a:	466a      	mov	r2, sp
 8004d5c:	f7ff ffca 	bl	8004cf4 <__swhatbuf_r>
 8004d60:	9900      	ldr	r1, [sp, #0]
 8004d62:	4605      	mov	r5, r0
 8004d64:	4630      	mov	r0, r6
 8004d66:	f7ff fcf5 	bl	8004754 <_malloc_r>
 8004d6a:	b948      	cbnz	r0, 8004d80 <__smakebuf_r+0x44>
 8004d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d70:	059a      	lsls	r2, r3, #22
 8004d72:	d4ef      	bmi.n	8004d54 <__smakebuf_r+0x18>
 8004d74:	f023 0303 	bic.w	r3, r3, #3
 8004d78:	f043 0302 	orr.w	r3, r3, #2
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	e7e3      	b.n	8004d48 <__smakebuf_r+0xc>
 8004d80:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <__smakebuf_r+0x7c>)
 8004d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	6020      	str	r0, [r4, #0]
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	81a3      	strh	r3, [r4, #12]
 8004d8e:	9b00      	ldr	r3, [sp, #0]
 8004d90:	6163      	str	r3, [r4, #20]
 8004d92:	9b01      	ldr	r3, [sp, #4]
 8004d94:	6120      	str	r0, [r4, #16]
 8004d96:	b15b      	cbz	r3, 8004db0 <__smakebuf_r+0x74>
 8004d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f000 fb11 	bl	80053c4 <_isatty_r>
 8004da2:	b128      	cbz	r0, 8004db0 <__smakebuf_r+0x74>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	431d      	orrs	r5, r3
 8004db4:	81a5      	strh	r5, [r4, #12]
 8004db6:	e7cd      	b.n	8004d54 <__smakebuf_r+0x18>
 8004db8:	080044cd 	.word	0x080044cd

08004dbc <malloc>:
 8004dbc:	4b02      	ldr	r3, [pc, #8]	; (8004dc8 <malloc+0xc>)
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	f7ff bcc7 	b.w	8004754 <_malloc_r>
 8004dc6:	bf00      	nop
 8004dc8:	2000000c 	.word	0x2000000c

08004dcc <__malloc_lock>:
 8004dcc:	4770      	bx	lr

08004dce <__malloc_unlock>:
 8004dce:	4770      	bx	lr

08004dd0 <__sfputc_r>:
 8004dd0:	6893      	ldr	r3, [r2, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	b410      	push	{r4}
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	da09      	bge.n	8004df0 <__sfputc_r+0x20>
 8004ddc:	6994      	ldr	r4, [r2, #24]
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	db02      	blt.n	8004de8 <__sfputc_r+0x18>
 8004de2:	b2cb      	uxtb	r3, r1
 8004de4:	2b0a      	cmp	r3, #10
 8004de6:	d103      	bne.n	8004df0 <__sfputc_r+0x20>
 8004de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dec:	f7ff be8e 	b.w	8004b0c <__swbuf_r>
 8004df0:	6813      	ldr	r3, [r2, #0]
 8004df2:	1c58      	adds	r0, r3, #1
 8004df4:	6010      	str	r0, [r2, #0]
 8004df6:	7019      	strb	r1, [r3, #0]
 8004df8:	b2c8      	uxtb	r0, r1
 8004dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <__sfputs_r>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	4606      	mov	r6, r0
 8004e04:	460f      	mov	r7, r1
 8004e06:	4614      	mov	r4, r2
 8004e08:	18d5      	adds	r5, r2, r3
 8004e0a:	42ac      	cmp	r4, r5
 8004e0c:	d101      	bne.n	8004e12 <__sfputs_r+0x12>
 8004e0e:	2000      	movs	r0, #0
 8004e10:	e007      	b.n	8004e22 <__sfputs_r+0x22>
 8004e12:	463a      	mov	r2, r7
 8004e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f7ff ffd9 	bl	8004dd0 <__sfputc_r>
 8004e1e:	1c43      	adds	r3, r0, #1
 8004e20:	d1f3      	bne.n	8004e0a <__sfputs_r+0xa>
 8004e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e24 <_vfiprintf_r>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	b09d      	sub	sp, #116	; 0x74
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	4617      	mov	r7, r2
 8004e2e:	9303      	str	r3, [sp, #12]
 8004e30:	4606      	mov	r6, r0
 8004e32:	b118      	cbz	r0, 8004e3c <_vfiprintf_r+0x18>
 8004e34:	6983      	ldr	r3, [r0, #24]
 8004e36:	b90b      	cbnz	r3, 8004e3c <_vfiprintf_r+0x18>
 8004e38:	f7ff fb88 	bl	800454c <__sinit>
 8004e3c:	4b7c      	ldr	r3, [pc, #496]	; (8005030 <_vfiprintf_r+0x20c>)
 8004e3e:	429c      	cmp	r4, r3
 8004e40:	d157      	bne.n	8004ef2 <_vfiprintf_r+0xce>
 8004e42:	6874      	ldr	r4, [r6, #4]
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	0718      	lsls	r0, r3, #28
 8004e48:	d55d      	bpl.n	8004f06 <_vfiprintf_r+0xe2>
 8004e4a:	6923      	ldr	r3, [r4, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d05a      	beq.n	8004f06 <_vfiprintf_r+0xe2>
 8004e50:	2300      	movs	r3, #0
 8004e52:	9309      	str	r3, [sp, #36]	; 0x24
 8004e54:	2320      	movs	r3, #32
 8004e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e5a:	2330      	movs	r3, #48	; 0x30
 8004e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e60:	f04f 0b01 	mov.w	fp, #1
 8004e64:	46b8      	mov	r8, r7
 8004e66:	4645      	mov	r5, r8
 8004e68:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d155      	bne.n	8004f1c <_vfiprintf_r+0xf8>
 8004e70:	ebb8 0a07 	subs.w	sl, r8, r7
 8004e74:	d00b      	beq.n	8004e8e <_vfiprintf_r+0x6a>
 8004e76:	4653      	mov	r3, sl
 8004e78:	463a      	mov	r2, r7
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f7ff ffbf 	bl	8004e00 <__sfputs_r>
 8004e82:	3001      	adds	r0, #1
 8004e84:	f000 80c4 	beq.w	8005010 <_vfiprintf_r+0x1ec>
 8004e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8a:	4453      	add	r3, sl
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	f898 3000 	ldrb.w	r3, [r8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80bc 	beq.w	8005010 <_vfiprintf_r+0x1ec>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	9307      	str	r3, [sp, #28]
 8004ea2:	9205      	str	r2, [sp, #20]
 8004ea4:	9306      	str	r3, [sp, #24]
 8004ea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eaa:	931a      	str	r3, [sp, #104]	; 0x68
 8004eac:	2205      	movs	r2, #5
 8004eae:	7829      	ldrb	r1, [r5, #0]
 8004eb0:	4860      	ldr	r0, [pc, #384]	; (8005034 <_vfiprintf_r+0x210>)
 8004eb2:	f7fb f9c5 	bl	8000240 <memchr>
 8004eb6:	f105 0801 	add.w	r8, r5, #1
 8004eba:	9b04      	ldr	r3, [sp, #16]
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d131      	bne.n	8004f24 <_vfiprintf_r+0x100>
 8004ec0:	06d9      	lsls	r1, r3, #27
 8004ec2:	bf44      	itt	mi
 8004ec4:	2220      	movmi	r2, #32
 8004ec6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004eca:	071a      	lsls	r2, r3, #28
 8004ecc:	bf44      	itt	mi
 8004ece:	222b      	movmi	r2, #43	; 0x2b
 8004ed0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ed4:	782a      	ldrb	r2, [r5, #0]
 8004ed6:	2a2a      	cmp	r2, #42	; 0x2a
 8004ed8:	d02c      	beq.n	8004f34 <_vfiprintf_r+0x110>
 8004eda:	9a07      	ldr	r2, [sp, #28]
 8004edc:	2100      	movs	r1, #0
 8004ede:	200a      	movs	r0, #10
 8004ee0:	46a8      	mov	r8, r5
 8004ee2:	3501      	adds	r5, #1
 8004ee4:	f898 3000 	ldrb.w	r3, [r8]
 8004ee8:	3b30      	subs	r3, #48	; 0x30
 8004eea:	2b09      	cmp	r3, #9
 8004eec:	d96d      	bls.n	8004fca <_vfiprintf_r+0x1a6>
 8004eee:	b371      	cbz	r1, 8004f4e <_vfiprintf_r+0x12a>
 8004ef0:	e026      	b.n	8004f40 <_vfiprintf_r+0x11c>
 8004ef2:	4b51      	ldr	r3, [pc, #324]	; (8005038 <_vfiprintf_r+0x214>)
 8004ef4:	429c      	cmp	r4, r3
 8004ef6:	d101      	bne.n	8004efc <_vfiprintf_r+0xd8>
 8004ef8:	68b4      	ldr	r4, [r6, #8]
 8004efa:	e7a3      	b.n	8004e44 <_vfiprintf_r+0x20>
 8004efc:	4b4f      	ldr	r3, [pc, #316]	; (800503c <_vfiprintf_r+0x218>)
 8004efe:	429c      	cmp	r4, r3
 8004f00:	bf08      	it	eq
 8004f02:	68f4      	ldreq	r4, [r6, #12]
 8004f04:	e79e      	b.n	8004e44 <_vfiprintf_r+0x20>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f7ff fe63 	bl	8004bd4 <__swsetup_r>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d09e      	beq.n	8004e50 <_vfiprintf_r+0x2c>
 8004f12:	f04f 30ff 	mov.w	r0, #4294967295
 8004f16:	b01d      	add	sp, #116	; 0x74
 8004f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1c:	2b25      	cmp	r3, #37	; 0x25
 8004f1e:	d0a7      	beq.n	8004e70 <_vfiprintf_r+0x4c>
 8004f20:	46a8      	mov	r8, r5
 8004f22:	e7a0      	b.n	8004e66 <_vfiprintf_r+0x42>
 8004f24:	4a43      	ldr	r2, [pc, #268]	; (8005034 <_vfiprintf_r+0x210>)
 8004f26:	1a80      	subs	r0, r0, r2
 8004f28:	fa0b f000 	lsl.w	r0, fp, r0
 8004f2c:	4318      	orrs	r0, r3
 8004f2e:	9004      	str	r0, [sp, #16]
 8004f30:	4645      	mov	r5, r8
 8004f32:	e7bb      	b.n	8004eac <_vfiprintf_r+0x88>
 8004f34:	9a03      	ldr	r2, [sp, #12]
 8004f36:	1d11      	adds	r1, r2, #4
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	9103      	str	r1, [sp, #12]
 8004f3c:	2a00      	cmp	r2, #0
 8004f3e:	db01      	blt.n	8004f44 <_vfiprintf_r+0x120>
 8004f40:	9207      	str	r2, [sp, #28]
 8004f42:	e004      	b.n	8004f4e <_vfiprintf_r+0x12a>
 8004f44:	4252      	negs	r2, r2
 8004f46:	f043 0302 	orr.w	r3, r3, #2
 8004f4a:	9207      	str	r2, [sp, #28]
 8004f4c:	9304      	str	r3, [sp, #16]
 8004f4e:	f898 3000 	ldrb.w	r3, [r8]
 8004f52:	2b2e      	cmp	r3, #46	; 0x2e
 8004f54:	d110      	bne.n	8004f78 <_vfiprintf_r+0x154>
 8004f56:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5c:	f108 0101 	add.w	r1, r8, #1
 8004f60:	d137      	bne.n	8004fd2 <_vfiprintf_r+0x1ae>
 8004f62:	9b03      	ldr	r3, [sp, #12]
 8004f64:	1d1a      	adds	r2, r3, #4
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	9203      	str	r2, [sp, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bfb8      	it	lt
 8004f6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f72:	f108 0802 	add.w	r8, r8, #2
 8004f76:	9305      	str	r3, [sp, #20]
 8004f78:	4d31      	ldr	r5, [pc, #196]	; (8005040 <_vfiprintf_r+0x21c>)
 8004f7a:	f898 1000 	ldrb.w	r1, [r8]
 8004f7e:	2203      	movs	r2, #3
 8004f80:	4628      	mov	r0, r5
 8004f82:	f7fb f95d 	bl	8000240 <memchr>
 8004f86:	b140      	cbz	r0, 8004f9a <_vfiprintf_r+0x176>
 8004f88:	2340      	movs	r3, #64	; 0x40
 8004f8a:	1b40      	subs	r0, r0, r5
 8004f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8004f90:	9b04      	ldr	r3, [sp, #16]
 8004f92:	4303      	orrs	r3, r0
 8004f94:	9304      	str	r3, [sp, #16]
 8004f96:	f108 0801 	add.w	r8, r8, #1
 8004f9a:	f898 1000 	ldrb.w	r1, [r8]
 8004f9e:	4829      	ldr	r0, [pc, #164]	; (8005044 <_vfiprintf_r+0x220>)
 8004fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fa4:	2206      	movs	r2, #6
 8004fa6:	f108 0701 	add.w	r7, r8, #1
 8004faa:	f7fb f949 	bl	8000240 <memchr>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d034      	beq.n	800501c <_vfiprintf_r+0x1f8>
 8004fb2:	4b25      	ldr	r3, [pc, #148]	; (8005048 <_vfiprintf_r+0x224>)
 8004fb4:	bb03      	cbnz	r3, 8004ff8 <_vfiprintf_r+0x1d4>
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	3307      	adds	r3, #7
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	9303      	str	r3, [sp, #12]
 8004fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc4:	444b      	add	r3, r9
 8004fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc8:	e74c      	b.n	8004e64 <_vfiprintf_r+0x40>
 8004fca:	fb00 3202 	mla	r2, r0, r2, r3
 8004fce:	2101      	movs	r1, #1
 8004fd0:	e786      	b.n	8004ee0 <_vfiprintf_r+0xbc>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9305      	str	r3, [sp, #20]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	250a      	movs	r5, #10
 8004fda:	4688      	mov	r8, r1
 8004fdc:	3101      	adds	r1, #1
 8004fde:	f898 2000 	ldrb.w	r2, [r8]
 8004fe2:	3a30      	subs	r2, #48	; 0x30
 8004fe4:	2a09      	cmp	r2, #9
 8004fe6:	d903      	bls.n	8004ff0 <_vfiprintf_r+0x1cc>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0c5      	beq.n	8004f78 <_vfiprintf_r+0x154>
 8004fec:	9005      	str	r0, [sp, #20]
 8004fee:	e7c3      	b.n	8004f78 <_vfiprintf_r+0x154>
 8004ff0:	fb05 2000 	mla	r0, r5, r0, r2
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e7f0      	b.n	8004fda <_vfiprintf_r+0x1b6>
 8004ff8:	ab03      	add	r3, sp, #12
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <_vfiprintf_r+0x228>)
 8005000:	a904      	add	r1, sp, #16
 8005002:	4630      	mov	r0, r6
 8005004:	f3af 8000 	nop.w
 8005008:	f1b0 3fff 	cmp.w	r0, #4294967295
 800500c:	4681      	mov	r9, r0
 800500e:	d1d8      	bne.n	8004fc2 <_vfiprintf_r+0x19e>
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	065b      	lsls	r3, r3, #25
 8005014:	f53f af7d 	bmi.w	8004f12 <_vfiprintf_r+0xee>
 8005018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800501a:	e77c      	b.n	8004f16 <_vfiprintf_r+0xf2>
 800501c:	ab03      	add	r3, sp, #12
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	4622      	mov	r2, r4
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <_vfiprintf_r+0x228>)
 8005024:	a904      	add	r1, sp, #16
 8005026:	4630      	mov	r0, r6
 8005028:	f000 f888 	bl	800513c <_printf_i>
 800502c:	e7ec      	b.n	8005008 <_vfiprintf_r+0x1e4>
 800502e:	bf00      	nop
 8005030:	08005684 	.word	0x08005684
 8005034:	080056c8 	.word	0x080056c8
 8005038:	080056a4 	.word	0x080056a4
 800503c:	08005664 	.word	0x08005664
 8005040:	080056ce 	.word	0x080056ce
 8005044:	080056d2 	.word	0x080056d2
 8005048:	00000000 	.word	0x00000000
 800504c:	08004e01 	.word	0x08004e01

08005050 <_printf_common>:
 8005050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	4691      	mov	r9, r2
 8005056:	461f      	mov	r7, r3
 8005058:	688a      	ldr	r2, [r1, #8]
 800505a:	690b      	ldr	r3, [r1, #16]
 800505c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005060:	4293      	cmp	r3, r2
 8005062:	bfb8      	it	lt
 8005064:	4613      	movlt	r3, r2
 8005066:	f8c9 3000 	str.w	r3, [r9]
 800506a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800506e:	4606      	mov	r6, r0
 8005070:	460c      	mov	r4, r1
 8005072:	b112      	cbz	r2, 800507a <_printf_common+0x2a>
 8005074:	3301      	adds	r3, #1
 8005076:	f8c9 3000 	str.w	r3, [r9]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005084:	3302      	addmi	r3, #2
 8005086:	f8c9 3000 	strmi.w	r3, [r9]
 800508a:	6825      	ldr	r5, [r4, #0]
 800508c:	f015 0506 	ands.w	r5, r5, #6
 8005090:	d107      	bne.n	80050a2 <_printf_common+0x52>
 8005092:	f104 0a19 	add.w	sl, r4, #25
 8005096:	68e3      	ldr	r3, [r4, #12]
 8005098:	f8d9 2000 	ldr.w	r2, [r9]
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	429d      	cmp	r5, r3
 80050a0:	db29      	blt.n	80050f6 <_printf_common+0xa6>
 80050a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	3300      	adds	r3, #0
 80050aa:	bf18      	it	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	0692      	lsls	r2, r2, #26
 80050b0:	d42e      	bmi.n	8005110 <_printf_common+0xc0>
 80050b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b6:	4639      	mov	r1, r7
 80050b8:	4630      	mov	r0, r6
 80050ba:	47c0      	blx	r8
 80050bc:	3001      	adds	r0, #1
 80050be:	d021      	beq.n	8005104 <_printf_common+0xb4>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	68e5      	ldr	r5, [r4, #12]
 80050c4:	f8d9 2000 	ldr.w	r2, [r9]
 80050c8:	f003 0306 	and.w	r3, r3, #6
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	bf08      	it	eq
 80050d0:	1aad      	subeq	r5, r5, r2
 80050d2:	68a3      	ldr	r3, [r4, #8]
 80050d4:	6922      	ldr	r2, [r4, #16]
 80050d6:	bf0c      	ite	eq
 80050d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050dc:	2500      	movne	r5, #0
 80050de:	4293      	cmp	r3, r2
 80050e0:	bfc4      	itt	gt
 80050e2:	1a9b      	subgt	r3, r3, r2
 80050e4:	18ed      	addgt	r5, r5, r3
 80050e6:	f04f 0900 	mov.w	r9, #0
 80050ea:	341a      	adds	r4, #26
 80050ec:	454d      	cmp	r5, r9
 80050ee:	d11b      	bne.n	8005128 <_printf_common+0xd8>
 80050f0:	2000      	movs	r0, #0
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	2301      	movs	r3, #1
 80050f8:	4652      	mov	r2, sl
 80050fa:	4639      	mov	r1, r7
 80050fc:	4630      	mov	r0, r6
 80050fe:	47c0      	blx	r8
 8005100:	3001      	adds	r0, #1
 8005102:	d103      	bne.n	800510c <_printf_common+0xbc>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510c:	3501      	adds	r5, #1
 800510e:	e7c2      	b.n	8005096 <_printf_common+0x46>
 8005110:	18e1      	adds	r1, r4, r3
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	2030      	movs	r0, #48	; 0x30
 8005116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800511a:	4422      	add	r2, r4
 800511c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005124:	3302      	adds	r3, #2
 8005126:	e7c4      	b.n	80050b2 <_printf_common+0x62>
 8005128:	2301      	movs	r3, #1
 800512a:	4622      	mov	r2, r4
 800512c:	4639      	mov	r1, r7
 800512e:	4630      	mov	r0, r6
 8005130:	47c0      	blx	r8
 8005132:	3001      	adds	r0, #1
 8005134:	d0e6      	beq.n	8005104 <_printf_common+0xb4>
 8005136:	f109 0901 	add.w	r9, r9, #1
 800513a:	e7d7      	b.n	80050ec <_printf_common+0x9c>

0800513c <_printf_i>:
 800513c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005140:	4617      	mov	r7, r2
 8005142:	7e0a      	ldrb	r2, [r1, #24]
 8005144:	b085      	sub	sp, #20
 8005146:	2a6e      	cmp	r2, #110	; 0x6e
 8005148:	4698      	mov	r8, r3
 800514a:	4606      	mov	r6, r0
 800514c:	460c      	mov	r4, r1
 800514e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005150:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005154:	f000 80bc 	beq.w	80052d0 <_printf_i+0x194>
 8005158:	d81a      	bhi.n	8005190 <_printf_i+0x54>
 800515a:	2a63      	cmp	r2, #99	; 0x63
 800515c:	d02e      	beq.n	80051bc <_printf_i+0x80>
 800515e:	d80a      	bhi.n	8005176 <_printf_i+0x3a>
 8005160:	2a00      	cmp	r2, #0
 8005162:	f000 80c8 	beq.w	80052f6 <_printf_i+0x1ba>
 8005166:	2a58      	cmp	r2, #88	; 0x58
 8005168:	f000 808a 	beq.w	8005280 <_printf_i+0x144>
 800516c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005170:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005174:	e02a      	b.n	80051cc <_printf_i+0x90>
 8005176:	2a64      	cmp	r2, #100	; 0x64
 8005178:	d001      	beq.n	800517e <_printf_i+0x42>
 800517a:	2a69      	cmp	r2, #105	; 0x69
 800517c:	d1f6      	bne.n	800516c <_printf_i+0x30>
 800517e:	6821      	ldr	r1, [r4, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005186:	d023      	beq.n	80051d0 <_printf_i+0x94>
 8005188:	1d11      	adds	r1, r2, #4
 800518a:	6019      	str	r1, [r3, #0]
 800518c:	6813      	ldr	r3, [r2, #0]
 800518e:	e027      	b.n	80051e0 <_printf_i+0xa4>
 8005190:	2a73      	cmp	r2, #115	; 0x73
 8005192:	f000 80b4 	beq.w	80052fe <_printf_i+0x1c2>
 8005196:	d808      	bhi.n	80051aa <_printf_i+0x6e>
 8005198:	2a6f      	cmp	r2, #111	; 0x6f
 800519a:	d02a      	beq.n	80051f2 <_printf_i+0xb6>
 800519c:	2a70      	cmp	r2, #112	; 0x70
 800519e:	d1e5      	bne.n	800516c <_printf_i+0x30>
 80051a0:	680a      	ldr	r2, [r1, #0]
 80051a2:	f042 0220 	orr.w	r2, r2, #32
 80051a6:	600a      	str	r2, [r1, #0]
 80051a8:	e003      	b.n	80051b2 <_printf_i+0x76>
 80051aa:	2a75      	cmp	r2, #117	; 0x75
 80051ac:	d021      	beq.n	80051f2 <_printf_i+0xb6>
 80051ae:	2a78      	cmp	r2, #120	; 0x78
 80051b0:	d1dc      	bne.n	800516c <_printf_i+0x30>
 80051b2:	2278      	movs	r2, #120	; 0x78
 80051b4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80051b8:	496e      	ldr	r1, [pc, #440]	; (8005374 <_printf_i+0x238>)
 80051ba:	e064      	b.n	8005286 <_printf_i+0x14a>
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80051c2:	1d11      	adds	r1, r2, #4
 80051c4:	6019      	str	r1, [r3, #0]
 80051c6:	6813      	ldr	r3, [r2, #0]
 80051c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0a3      	b.n	8005318 <_printf_i+0x1dc>
 80051d0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80051d4:	f102 0104 	add.w	r1, r2, #4
 80051d8:	6019      	str	r1, [r3, #0]
 80051da:	d0d7      	beq.n	800518c <_printf_i+0x50>
 80051dc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da03      	bge.n	80051ec <_printf_i+0xb0>
 80051e4:	222d      	movs	r2, #45	; 0x2d
 80051e6:	425b      	negs	r3, r3
 80051e8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80051ec:	4962      	ldr	r1, [pc, #392]	; (8005378 <_printf_i+0x23c>)
 80051ee:	220a      	movs	r2, #10
 80051f0:	e017      	b.n	8005222 <_printf_i+0xe6>
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051fa:	d003      	beq.n	8005204 <_printf_i+0xc8>
 80051fc:	1d08      	adds	r0, r1, #4
 80051fe:	6018      	str	r0, [r3, #0]
 8005200:	680b      	ldr	r3, [r1, #0]
 8005202:	e006      	b.n	8005212 <_printf_i+0xd6>
 8005204:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005208:	f101 0004 	add.w	r0, r1, #4
 800520c:	6018      	str	r0, [r3, #0]
 800520e:	d0f7      	beq.n	8005200 <_printf_i+0xc4>
 8005210:	880b      	ldrh	r3, [r1, #0]
 8005212:	4959      	ldr	r1, [pc, #356]	; (8005378 <_printf_i+0x23c>)
 8005214:	2a6f      	cmp	r2, #111	; 0x6f
 8005216:	bf14      	ite	ne
 8005218:	220a      	movne	r2, #10
 800521a:	2208      	moveq	r2, #8
 800521c:	2000      	movs	r0, #0
 800521e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005222:	6865      	ldr	r5, [r4, #4]
 8005224:	60a5      	str	r5, [r4, #8]
 8005226:	2d00      	cmp	r5, #0
 8005228:	f2c0 809c 	blt.w	8005364 <_printf_i+0x228>
 800522c:	6820      	ldr	r0, [r4, #0]
 800522e:	f020 0004 	bic.w	r0, r0, #4
 8005232:	6020      	str	r0, [r4, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d13f      	bne.n	80052b8 <_printf_i+0x17c>
 8005238:	2d00      	cmp	r5, #0
 800523a:	f040 8095 	bne.w	8005368 <_printf_i+0x22c>
 800523e:	4675      	mov	r5, lr
 8005240:	2a08      	cmp	r2, #8
 8005242:	d10b      	bne.n	800525c <_printf_i+0x120>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	07da      	lsls	r2, r3, #31
 8005248:	d508      	bpl.n	800525c <_printf_i+0x120>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	6862      	ldr	r2, [r4, #4]
 800524e:	429a      	cmp	r2, r3
 8005250:	bfde      	ittt	le
 8005252:	2330      	movle	r3, #48	; 0x30
 8005254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800525c:	ebae 0305 	sub.w	r3, lr, r5
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	f8cd 8000 	str.w	r8, [sp]
 8005266:	463b      	mov	r3, r7
 8005268:	aa03      	add	r2, sp, #12
 800526a:	4621      	mov	r1, r4
 800526c:	4630      	mov	r0, r6
 800526e:	f7ff feef 	bl	8005050 <_printf_common>
 8005272:	3001      	adds	r0, #1
 8005274:	d155      	bne.n	8005322 <_printf_i+0x1e6>
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	b005      	add	sp, #20
 800527c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005280:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005284:	493c      	ldr	r1, [pc, #240]	; (8005378 <_printf_i+0x23c>)
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800528e:	f100 0504 	add.w	r5, r0, #4
 8005292:	601d      	str	r5, [r3, #0]
 8005294:	d001      	beq.n	800529a <_printf_i+0x15e>
 8005296:	6803      	ldr	r3, [r0, #0]
 8005298:	e002      	b.n	80052a0 <_printf_i+0x164>
 800529a:	0655      	lsls	r5, r2, #25
 800529c:	d5fb      	bpl.n	8005296 <_printf_i+0x15a>
 800529e:	8803      	ldrh	r3, [r0, #0]
 80052a0:	07d0      	lsls	r0, r2, #31
 80052a2:	bf44      	itt	mi
 80052a4:	f042 0220 	orrmi.w	r2, r2, #32
 80052a8:	6022      	strmi	r2, [r4, #0]
 80052aa:	b91b      	cbnz	r3, 80052b4 <_printf_i+0x178>
 80052ac:	6822      	ldr	r2, [r4, #0]
 80052ae:	f022 0220 	bic.w	r2, r2, #32
 80052b2:	6022      	str	r2, [r4, #0]
 80052b4:	2210      	movs	r2, #16
 80052b6:	e7b1      	b.n	800521c <_printf_i+0xe0>
 80052b8:	4675      	mov	r5, lr
 80052ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80052be:	fb02 3310 	mls	r3, r2, r0, r3
 80052c2:	5ccb      	ldrb	r3, [r1, r3]
 80052c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80052c8:	4603      	mov	r3, r0
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d1f5      	bne.n	80052ba <_printf_i+0x17e>
 80052ce:	e7b7      	b.n	8005240 <_printf_i+0x104>
 80052d0:	6808      	ldr	r0, [r1, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	6949      	ldr	r1, [r1, #20]
 80052d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80052da:	d004      	beq.n	80052e6 <_printf_i+0x1aa>
 80052dc:	1d10      	adds	r0, r2, #4
 80052de:	6018      	str	r0, [r3, #0]
 80052e0:	6813      	ldr	r3, [r2, #0]
 80052e2:	6019      	str	r1, [r3, #0]
 80052e4:	e007      	b.n	80052f6 <_printf_i+0x1ba>
 80052e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052ea:	f102 0004 	add.w	r0, r2, #4
 80052ee:	6018      	str	r0, [r3, #0]
 80052f0:	6813      	ldr	r3, [r2, #0]
 80052f2:	d0f6      	beq.n	80052e2 <_printf_i+0x1a6>
 80052f4:	8019      	strh	r1, [r3, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	4675      	mov	r5, lr
 80052fc:	e7b1      	b.n	8005262 <_printf_i+0x126>
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	1d11      	adds	r1, r2, #4
 8005302:	6019      	str	r1, [r3, #0]
 8005304:	6815      	ldr	r5, [r2, #0]
 8005306:	6862      	ldr	r2, [r4, #4]
 8005308:	2100      	movs	r1, #0
 800530a:	4628      	mov	r0, r5
 800530c:	f7fa ff98 	bl	8000240 <memchr>
 8005310:	b108      	cbz	r0, 8005316 <_printf_i+0x1da>
 8005312:	1b40      	subs	r0, r0, r5
 8005314:	6060      	str	r0, [r4, #4]
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	2300      	movs	r3, #0
 800531c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005320:	e79f      	b.n	8005262 <_printf_i+0x126>
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	462a      	mov	r2, r5
 8005326:	4639      	mov	r1, r7
 8005328:	4630      	mov	r0, r6
 800532a:	47c0      	blx	r8
 800532c:	3001      	adds	r0, #1
 800532e:	d0a2      	beq.n	8005276 <_printf_i+0x13a>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	079b      	lsls	r3, r3, #30
 8005334:	d507      	bpl.n	8005346 <_printf_i+0x20a>
 8005336:	2500      	movs	r5, #0
 8005338:	f104 0919 	add.w	r9, r4, #25
 800533c:	68e3      	ldr	r3, [r4, #12]
 800533e:	9a03      	ldr	r2, [sp, #12]
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	429d      	cmp	r5, r3
 8005344:	db05      	blt.n	8005352 <_printf_i+0x216>
 8005346:	68e0      	ldr	r0, [r4, #12]
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	4298      	cmp	r0, r3
 800534c:	bfb8      	it	lt
 800534e:	4618      	movlt	r0, r3
 8005350:	e793      	b.n	800527a <_printf_i+0x13e>
 8005352:	2301      	movs	r3, #1
 8005354:	464a      	mov	r2, r9
 8005356:	4639      	mov	r1, r7
 8005358:	4630      	mov	r0, r6
 800535a:	47c0      	blx	r8
 800535c:	3001      	adds	r0, #1
 800535e:	d08a      	beq.n	8005276 <_printf_i+0x13a>
 8005360:	3501      	adds	r5, #1
 8005362:	e7eb      	b.n	800533c <_printf_i+0x200>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1a7      	bne.n	80052b8 <_printf_i+0x17c>
 8005368:	780b      	ldrb	r3, [r1, #0]
 800536a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800536e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005372:	e765      	b.n	8005240 <_printf_i+0x104>
 8005374:	080056ea 	.word	0x080056ea
 8005378:	080056d9 	.word	0x080056d9

0800537c <_read_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4c07      	ldr	r4, [pc, #28]	; (800539c <_read_r+0x20>)
 8005380:	4605      	mov	r5, r0
 8005382:	4608      	mov	r0, r1
 8005384:	4611      	mov	r1, r2
 8005386:	2200      	movs	r2, #0
 8005388:	6022      	str	r2, [r4, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	f7fe fb6e 	bl	8003a6c <_read>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_read_r+0x1e>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	b103      	cbz	r3, 800539a <_read_r+0x1e>
 8005398:	602b      	str	r3, [r5, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	200017e4 	.word	0x200017e4

080053a0 <_fstat_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4c07      	ldr	r4, [pc, #28]	; (80053c0 <_fstat_r+0x20>)
 80053a4:	2300      	movs	r3, #0
 80053a6:	4605      	mov	r5, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	f7fe fb9c 	bl	8003aea <_fstat>
 80053b2:	1c43      	adds	r3, r0, #1
 80053b4:	d102      	bne.n	80053bc <_fstat_r+0x1c>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	b103      	cbz	r3, 80053bc <_fstat_r+0x1c>
 80053ba:	602b      	str	r3, [r5, #0]
 80053bc:	bd38      	pop	{r3, r4, r5, pc}
 80053be:	bf00      	nop
 80053c0:	200017e4 	.word	0x200017e4

080053c4 <_isatty_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4c06      	ldr	r4, [pc, #24]	; (80053e0 <_isatty_r+0x1c>)
 80053c8:	2300      	movs	r3, #0
 80053ca:	4605      	mov	r5, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	f7fe fb90 	bl	8003af4 <_isatty>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_isatty_r+0x1a>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	b103      	cbz	r3, 80053de <_isatty_r+0x1a>
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	200017e4 	.word	0x200017e4

080053e4 <_init>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	bf00      	nop
 80053e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ea:	bc08      	pop	{r3}
 80053ec:	469e      	mov	lr, r3
 80053ee:	4770      	bx	lr

080053f0 <_fini>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	bf00      	nop
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr
